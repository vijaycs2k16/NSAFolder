define([
    'Backbone',
    'jQuery',
    'Lodash',
    'views/dialogViewBase',
    'text!templates/VExam/exam/paperConfig/CreateTemplate.html',
    'models/vPaperConfigModel',
    'populate',
    'vconstants',
    'helpers/keyValidator',
    'helpers',
    'dataService',
    'services/examManagment',
    'services/examSchedule',
], function (Backbone, $, _, Parent, template, Model, populate, CONSTANTS, keyValidator, helpers, dataService, examManagmentService, examScheduleService) {
    'use strict';

    var createView = Parent.extend({
        template   : _.template(template),
        contentType: 'PaperConfiguration',

        initialize : function (options) {
            options = options || {};
            this.bundleObj = {};

            _.bindAll(this, 'render', 'saveItem','generateQuestions');

            this.currentModel = new Model();

            this.collection = options.collection;

            this.responseObj = {};

            this.render();
        },

        events: {
            'keypress #price'            : 'keypressHandler',
            'click ._circleRadioRadiance': 'checked',
            'click #showBtn'             : examManagmentService.showSubjects,
            'click ._variantsSubjects'   : examManagmentService.showSubjects,
            'change .productCategory'    : 'changeSubject',
            'change .productCenterCategory' : 'changeCenter',
            'click .deleteTag '          : examManagmentService.deleteSubject,
            'click #showBtn1'            : examManagmentService.showTopics,
            'click ._variantsTopics'     : examManagmentService.showTopics,
            'change .topicCategories'    : 'changeTopic',
            'click .deleteTag1'          : examManagmentService.deleteTopic,
            'click .deleteCenter '       : examManagmentService.deleteCourse,
            'click .itemForBundle'       : 'addToBundle',
            'click .removeBundle'        : 'removeBundle',
            'click #showCenterBtn'       : examScheduleService.showCenters,
            'click ._varientCenter'      : examScheduleService.showCenters,
            'click .workflow-sub'        : 'chooseWorkflowDetailes',
            'click .workflow-list li'    : 'chooseWorkflowDetailes',
            'keyup .enterQuestions'      : 'weightageSelectedQuestions',
            'click ._formWrap'           : 'closeMultiselect',
            'click ._formBlock'          : 'hideSelect',
            'keyup #questions'           : 'noQuestions',
            'input .multiSelectSearch'   : examManagmentService.multiSelectSearch
        },


        checked : function(e) {
            var value = $(e.target).val();
            $('.saveBtn').removeClass('hide');
            this.questionMode = value;
            this.setValues();
            $('.generatedQuestions').addClass('hide');
            if(!this.data.classDetail || this.data.classDetail === 'Select'){
                $('#'+value).prop('checked', false);
                return App.render({
                    type   : 'error',
                    message: "Please Select class."
                });
            }
            if(_.isEmpty(this.data.subject)){
                $('#'+value).prop('checked', false);
                return App.render({
                    type   : 'error',
                    message: "Please Select subject."
                });
            }
            if(_.isEmpty(this.data.topic)){
                $('#'+value).prop('checked', false);
                return App.render({
                    type   : 'error',
                    message: "Please Select topic."
                });
            }
            if (!this.data.name) {
                $('#'+value).prop('checked', false);
                return App.render({
                    type   : 'error',
                    message: "Paper Name field can't be empty."
                });
            }

            if(!this.data.num){
                $('#'+value).prop('checked', false);
                return App.render({
                    type   : 'error',
                    message: "Please enter no of questions."
                });
            }

            if(value == 'ManualQuestions'){
              $('.randomQuestions').addClass('hide');
              $('.weightQuestions').addClass('hide');
              $('.manualQuestions').removeClass('hide');
                $('.generateQue').addClass('hide');
                this.getManualQuestions();
            } else if(value == 'WeightageBase'){
                $('.saveBtn').addClass('hide');
              $('.randomQuestions').addClass('hide');
              $('.manualQuestions').addClass('hide');
              $('.weightQuestions').removeClass('hide');
                this.getWeightageQuestions();
                $('.generateQue').removeClass('hide');
            } else if(value == 'Random'){
             $('.manualQuestions').addClass('hide');
             $('.weightQuestions').addClass('hide');
             $('.randomQuestions').removeClass('hide');
             this.randomQuestions();
             $('.generateQue').addClass('hide');
            }
        },

        resetExamMode: function(){
            $('.randomQuestions').addClass('hide');
            $('.weightQuestions').addClass('hide');
            $('.manualQuestions').addClass('hide');
            $('.generatedQuestions').addClass('hide');
            if(this.questionMode){
                $('#'+this.questionMode).prop('checked', false);
            }
        },

        hideSelect: function(e) {
            $('.newSelectList').hide();
        },

        closeMultiselect : function(e) {
            var $thisEl = this.$el;
            var $categoriesBlock = $thisEl.find('._variantsBlock');
            e.stopPropagation();
            if (!$categoriesBlock.length) {
                $categoriesBlock = $thisEl.find('._variantsBlock');
            }
            if ($categoriesBlock.hasClass('open')) {
                $categoriesBlock.removeClass('open');
                $categoriesBlock.children('ul').hide();
            }
        },

        addToBundle: function (e) {
            var $thisEl = this.$el;
            var $target = $(e.target).closest('li');
            var $container = $thisEl.find('#productsBundle');
            var val = $target.text();
            var id = $target.data('id');
            this.setValues();
            if (Object.keys(this.bundleObj).length) {
                this.bundlesValues();
            }
            this.selectQuestion = this.selectQuestion ? this.selectQuestion : [];
            if(parseInt(this.data.num) > this.selectQuestion.length){
                if (Object.keys(this.bundleObj).indexOf(id) >= 0) {
                    return;
                }
                this.bundleObj[id] = '0';
                $container.append('<div class="bundle _bundle" data-id="' + id + '">' + val + '<div class="_editConteiner"><span class="removeBundle _actionCircleBtn icon-close3"></span></div></div>');
            }else {
                return App.render({
                    type   : 'error',
                    message: "No of Questions limit exceeded."
                });
            }
        },

        removeBundle: function (e) {
            var $thisEl = this.$el;
            var target = $(e.target).closest('.bundle');
            var position = Object.keys(this.bundleObj).indexOf(target.data('id'));

            if (position >= 0) {
                delete this.bundleObj[target.data('id')];
            }

            target.remove();
        },

        changeSubject : function(e){
            var $thisEl = this.$el;
            var self = this;
            this.$el.find('#topicCategories').empty();
            this.resetExamMode();
            this.$el.find('#checkedTopics').empty();
            var $categoryContainer = $thisEl.find('#checkedProductCategories');
            var $target = $(e.target);
            var categoryId = $target.data('id');
            var categoryName = $target.data('value');
            var idsArray = [];
            var checkedProductCategory = $thisEl.find('.checkedProductCategory');
            e.stopPropagation();

            if (checkedProductCategory && checkedProductCategory.length) {
                checkedProductCategory.each(function (key, item) {
                    idsArray.push($(item).data('id'));
                });
            }
            if (idsArray.length && idsArray.indexOf(categoryId) >= 0) {
                $categoryContainer.find('[data-id=' + categoryId + ']').closest('li').remove();
            } else {
                $categoryContainer.append('<li><span class="checkedProductCategory"  data-value="' + categoryName + '" data-id="' + categoryId + '">' + categoryName + '</span><span class="deleteTag icon-close3"></span></li>');
            }
            this.selectSubjects = []
            var checkedProductCategory = $thisEl.find('.checkedProductCategory');
            if (checkedProductCategory && checkedProductCategory.length) {
                checkedProductCategory.each(function (key, item) {
                    self.selectSubjects.push($(item).data('id'));
                });
            }
            $('#topicCategories').empty();
            if(!_.isEmpty(this.selectSubjects)){
                this.getTopicsBySubjects(this.selectSubjects,self.classId);

            }

            if (typeof this.useFilter === 'function') {
                this.useFilter();
            }
        },

        changeTopic : function(e){
            var $thisEl = this.$el;
            var self = this;
            this.resetExamMode()
            var $categoryContainer = $thisEl.find('#checkedTopics');
            var $target = $(e.target);
            var categoryId = $target.data('id');
            var categoryName = $target.data('value');
            var checkedProductCategory = $thisEl.find('.checkedTopics');
            var idsArray = [];
            if (checkedProductCategory && checkedProductCategory.length) {
                checkedProductCategory.each(function (key, item) {
                    idsArray.push($(item).data('id'));
                });
            }

            e.stopPropagation();

            if (idsArray.length && idsArray.indexOf(categoryId) >= 0) {
                $categoryContainer.find('[data-id=' + categoryId + ']').closest('li').remove();
            } else {
                $categoryContainer.append('<li><span class="checkedTopics"  data-value="' + categoryName + '" data-id="' + categoryId + '">' + categoryName + '</span><span class="deleteTag1 icon-close3"></span></li>');
            }
            var checkedProductCategory = $thisEl.find('.checkedTopics');
            this.selectTopics = []
                if (checkedProductCategory && checkedProductCategory.length) {
                    checkedProductCategory.each(function (key, item) {
                        self.selectTopics.push($(item).data('id'));
                    });
                }

            if (typeof this.useFilter === 'function') {
                this.useFilter();
            }
        },

        keypressHandler: function (e) {
            return keyValidator(e, true);
        },

        getTopicsBySubjects : function(ids, classId){
            this.resetExamMode();
            var $thisEl = this.$el;
            var self = this;
            this.resetTopics();
            dataService.getData('/vbatchSchedule/topics/class', {classId: classId, subject: ids}, function (topics) {
                self.topics = topics.data;
                var objs = [];
                _.map(self.topics, function (value) {
                    objs.push(value.topics)
                });
                self.renderTopics(_.uniqBy(_.flatten(objs), '_id'));

            });
        },

        chooseOption: function (e) {
            var target = $(e.target);
            var $thisEl = this.$el;
            var id = target.attr('id');
            var holder = $(e.target).parents('._newSelectListWrap').find('.current-selected');
            holder.text($(e.target).text()).attr('data-id', $(e.target).attr('id'));
            var courseId = $thisEl.find('#variantsCenterBlock').attr('data-id');
            var courseid = $thisEl.find('#variantsCenterBlock').attr('id');
            var classesId = $thisEl.find('#classpc').attr('data-id');
            var classid = $thisEl.find('#classpc').attr('id');
            /*if (holder.attr('id') === 'course') {
                this.selectCourse(courseId);
            }*/
            if( id == classesId ){
                this.classId = classesId;
                this.selectClasses(classesId)
            }
        },

        getWeightageQuestions: function(){
            var $thisEl = this.$el;
            var data = this.constructData(), self = this;
            dataService.postData('/vAssessment/questions/count/weightage', data, function (err, questions) {
                if(questions.data){
                     $(".workflow-list").empty();
                     self.weightage = questions.data;
                     self.weightage.forEach( function (item){
                     $(".workflow-list").append('<li data-id="'+ item._id +'"><a href="javascript:;" data-id="'+ item._id +'" title="'+ item.name +'" class="workflow">' + item.name +'</a></li>');
                      self.$el.find('.workflow-list li').first().addClass('active');
                      self.$el.find('.workflow-list li').first().click();
                     })
                }
            })

        },

        randomQuestions: function(){
            var data = this.constructData();
            var $thisEl = this.$el;
            var self = this;
            var noOfQue = $thisEl.find('#questions').val();
            dataService.postData('/vAssessment/questions/random/'+ noOfQue, data, function (err, questions) {
                if(questions.data){
                    self.questionsList(questions.data);
                }
            })
        },

        constructData: function(){
            var data = {};
            var $thisEl = this.$el;
            var self = this;
            data.questions = $.trim($thisEl.find('#questions').val()) ? $.trim($thisEl.find('#questions').val()) : null;
            //data.course = $thisEl.find('#course').attr('data-id');
            var courseId = self.selectCenters
            var subjects = [];
            data.course = courseId;
            data.classDetail = this.classId
            _.map(this.topics, function (topic) {
                _.map(self.selectTopics, function (val) {
                    var selected = _.find(topic.topics, {'_id': val});
                    if (selected) {
                        var subj = _.find(subjects, {'subjectId': topic.subject._id})
                        if (subj) {
                            subj.topics.push(selected._id);
                        } else {
                            var obj = {
                                subjectId: topic.subject._id,
                                topics: [selected._id]
                            }
                            subjects.push(obj);
                        }
                    }
                });
            });
            data.subjects = subjects;
            return data;
        },

        getManualQuestions: function(){
            var data = {};
            var $thisEl = this.$el;
            var self = this;
            var data = this.constructData();
            dataService.postData('/vAssessment/questions/topic', data, function (err, questions) {
                if(questions.data){
                    var data = questions.data
                    var $container = self.$el.find('#questionList');
                    var variant = '';
                    $container.html('');
                    _.each(data, function (item) {
                        if (item.form && item.form.length) {
                            _.each(item.form, function (variantOne) {
                                variant += variantOne.form ? variantOne.form[0].desc : '';
                            });
                        }
                        $container.append('<li class="itemForBundle" data-id="' + item._id + '">' + item.form[0].desc + ' <span data-id="' + item._id + '">' + variant + '</span></li>');
                        variant = '';
                    });
                }
            })

        },

        resetSubjects: function(){
            this.resetExamMode();
            this.$el.find('#topicCategories').empty();
            this.$el.find('#checkedTopics').empty();
            this.$el.find('#productCategories').empty();
            this.$el.find('#checkedProductCategories').empty();

        },

        resetCourse: function(){
            this.resetExamMode();
            this.$el.find('#productCenterCategories').empty();
            this.$el.find('#checkedProductCenter').empty();
            this.$el.find('#topicCategories').empty();
            this.$el.find('#checkedTopics').empty();
            this.$el.find('#productCategories').empty();
            this.$el.find('#checkedProductCategories').empty();

        },


        resetTopics: function(){
            this.resetExamMode();
            this.$el.find('#topicCategories').empty();
            this.$el.find('#checkedTopics').empty();
        },


        selectCourse: function (courseId) {

            var self = this;
            this.resetSubjects();
            var io = courseId[0]
            if (courseId !=='') {
                dataService.getData('/vsubject/course', {courseId: io, paper: true, subjectStatus: true}, function (subjects) {
                    var objs = []
                     _.map(subjects.data, function (sub) {
                         var obj ={};
                         obj['name'] = sub.subject.subjectName;
                         obj['_id'] = sub.subject._id;
                        objs.push(obj);
                    });
                    self.renderSubjects(objs);
                    self.responseObj['#subject'] = objs;
                });
            } else {
                self.responseObj['#subject'] = [];
            }
        },

        selectClasses: function(classid){
            this.resetCourse();
            var self = this;
            dataService.getData('/vsubject/details/'+ classid, {}, function (subjects) {
                subjects = _.map(subjects.data, function (subject) {
                    subject._id = subject.subject._id;
                    subject.name = subject.subject.subjectName;
                    return subject;
                });
                self.renderSubjects(subjects);
                self.responseObj['#subject'] = subjects;
                //self.renderCenters(courses)
            })

        },

        renderSubjects : function(objs){
            var $thisEl = this.$el;
            var $checkedCategoryContainer = $thisEl.find('#checkedProductCategories');
            var $categoriesBlock = $thisEl.find('#variantsCategoriesBlock');
            var $categoryContainer = $thisEl.find('#productCategories');
            var checkedSelectedId;
            var checkedName;
            $categoryContainer.append('<input type="text" id="mySubjectInput" class="multiSelectSearch" placeholder="Search for subjects.." title="Type in a subject">')
            _.each(objs, function (category) {
                checkedName = '';
                checkedSelectedId = '';

                if (objs.indexOf(category._id) >= 0) {
                    $categoryContainer.append('<li><label class="_customCHeckbox"><input checked="checked" type="checkbox" class="checkbox productCategory" id="' + category._id + '" data-value="' + category.name + '" data-id="' + category._id + '"> <span></span></label><label class="_checkboxLabel" for="' + category._id + '">' + category.name + '</label></li>');
                    checkedSelectedId = category._id;
                    checkedName = category.name;
                } else {
                    $categoryContainer.append('<li><label class="_customCHeckbox"><input type="checkbox" class="checkbox productCategory" id="' + category._id + '" data-value="' + category.name + '" data-id="' + category._id + '"> <span></span></label><label class="_checkboxLabel" for="' + category._id + '">' + category.name + '</label></li>');
                }

                if (checkedName) {
                    $checkedCategoryContainer.append('<li><span class="checkedProductCategory"  data-value="' + checkedName + '" data-id="' + checkedSelectedId + '">' + checkedName + '</span><span class="deleteTag icon-close3"></span></li>');
                }
            });
        },

        renderTopics : function(objs){
            var $thisEl = this.$el;
            var $checkedCategoryContainer = $thisEl.find('#checkedTopics');
            var $categoriesBlock = $thisEl.find('#topicBlocks');
            var $categoryContainer = $thisEl.find('#topicCategories');
            var checkedSelectedId;
            var checkedName;
            $categoryContainer.append('<input type="text" id="myTopicInput" class="multiSelectSearch"   placeholder="Search for topics.." title="Type in a topics">')
            _.each(objs, function (category) {
                checkedName = '';
                checkedSelectedId = '';

                if (objs.indexOf(category._id) >= 0) {
                    $categoryContainer.append('<li><label class="_customCHeckbox"><input checked="checked" type="checkbox" class="checkbox topicCategories" id="' + category._id + '" data-value="' + category.name + '" data-id="' + category._id + '"> <span></span></label><label class="_checkboxLabel" for="' + category._id + '">' + category.name + '</label></li>');
                    checkedSelectedId = category._id;
                    checkedName = category.name;
                } else {
                    $categoryContainer.append('<li><label class="_customCHeckbox"><input type="checkbox" class="checkbox topicCategories" id="' + category._id + '" data-value="' + category.name + '" data-id="' + category._id + '"> <span></span></label><label class="_checkboxLabel" for="' + category._id + '">' + category.name + '</label></li>');
                }

                if (checkedName) {
                    $checkedCategoryContainer.append('<li><span class="checkedTopics"  data-value="' + checkedName + '" data-id="' + checkedSelectedId + '">' + checkedName + '</span><span class="deleteTag1 icon-close3"></span></li>');
                }
            });

        },

        setValues: function () {
            var $thisEl = this.$el;
            var self = this;
            this.data ={};
            this.data.classDetail = $thisEl.find('#classpc').attr('data-id');
            //this.data.course = $thisEl.find('#course').attr('data-id');
            this.data.name   = $.trim($thisEl.find('#paperName').val()) ? $.trim($thisEl.find('#paperName').val()) : null
            this.data.num = $.trim($thisEl.find('#questions').val()) ? $.trim($thisEl.find('#questions').val()) : null;
            this.data.course = this.selectCenters;
            this.data.subject = this.selectSubjects;
            if (Object.keys(this.bundleObj).length) {
                this.bundlesValues();
            }
            this.data.topic = this.selectTopics;
        },

        noQuestions: function(e){
            this.resetExamMode();
        },

        saveItem: function () {
            var $thisEl = this.$el;
            var self = this;
            this.setValues();
            this.data.questionMode = this.questionMode ? this.questionMode : null;
            if(!this.data.classDetail || this.data.classDetail === 'Select'){
                return App.render({
                    type   : 'error',
                    message: "Please Select class."
                });
            }

           /* if(!this.data.course || this.data.course === 'Select'){
                return App.render({
                    type   : 'error',
                    message: "Please Select course."
                });
            }*/

            if(_.isEmpty(this.data.subject)){
                return App.render({
                    type   : 'error',
                    message: "Please Select subject."
                });
            }
            if(_.isEmpty(this.data.topic)){
                return App.render({
                    type   : 'error',
                    message: "Please Select topic."
                });
            }
            if (!this.data.name) {
                return App.render({
                    type   : 'error',
                    message: "Paper Name field can't be empty."
                });
            }

            if(!this.data.num){
                return App.render({
                    type   : 'error',
                    message: "Please enter no of questions."
                });
            }
            if(!this.data.questionMode){
                return App.render({
                    type   : 'error',
                    message: "Please select Question Mode."
                });
            }
            if(this.data.questionMode == 'ManualQuestions'){
                this.selectQuestion = this.selectQuestion ? this.selectQuestion : [];
                if(this.selectQuestion.length == 0){
                    return App.render({
                        type   : 'error',
                        message: "Please Select Questions."
                    });
                }
                this.data.questions = this.selectQuestion;
            }else {
                this.data.questions = this.generateQuesIds;
            }

            this.currentModel.save(this.data, {
                wait   : true,
                success: function (model) {
                    self.hideDialog();
                    self.collection.add(model);
                    Backbone.history.fragment = '';
                    Backbone.history.navigate(window.location.hash + '?paper=paper', {trigger: true, replace: true});
                    return App.render({
                        type: 'notify',
                        message:CONSTANTS.RESPONSES.CREATE_SUCCESS
                    });
                },

                error: function (model, xhr) {
                    self.errorNotification(xhr);
                }
            });
        },

        generateQuestions: function(){
            var $thisEl = this.$el;
            var self = this;
            var data ={};
            //data.course = $thisEl.find('#course').attr('data-id');
            var courseId = self.selectCenters
            data.course = courseId
            var subjects =[];
            _.forEach(this.selectSubjects, function(value){
                var obj = {};
                obj.subjectId = value;
                var topics = _.filter(self.weightage ,function(val){
                    return val.topic.subject == value;
                });
                if(!_.isEmpty(topics)){
                    obj.topics = topics;
                    subjects.push(obj);
                }
            })
            data.subjects = subjects;
             var noOfQue = $thisEl.find('#questions').val();
            this.totalQues = 0;
            _.map(this.weightage, function(value){
                _.map(value.details, function(obj){
                    self.totalQues += obj.noOfQuestions ? parseInt(obj.noOfQuestions) :0;
                })
            })

            if(!this.totalQues || this.totalQues == 0){
                return App.render({
                    type   : 'error',
                    message: "Please enter no of questions."
                });
            }
            if(parseInt(this.data.num) >= this.totalQues){
                dataService.postData('/vAssessment/questions/weightage/'+ noOfQue, data, function (err, questions) {
                    if(questions.data){
                        self.questionsList(questions.data);
                    }
                });
            }else {
                return App.render({
                    type   : 'error',
                    message: "Total Questions limit exceeded."
                });
            }
        },

        weightageSelectedQuestions: function(e){
            var $target =  $(e.target);
            var self = this;
            var id = $target.attr('id');
            var max = $(e.target).attr('max');
            var value = $(e.target).val();
            if(value > max){
                $(id).val('');
                $(e.target).val('');
                return App.render({
                    type   : 'error',
                    message: "Total Questions limit exceeded."
                });
            }
            var topicObj = _.find(this.weightage, {'_id':this.topicId});
            _.forEach(topicObj.details, function(value){
                if(value.id == id){
                    value.noOfQuestions = $(e.target).val() ? $(e.target).val() : 0;
                }
            })
        },

        questionsList: function(data){
            var $thisEl = this.$el;
            var self = this;
            $('.saveBtn').removeClass('hide');
            $('.generatedQuestions').removeClass('hide');
            var $container = self.$el.find('#generatedQues');
            $container.html('');
            self.generateQuesIds = [];
            _.each(data, function (item) {
                self.generateQuesIds.push(item._id);
                $container.append('<li class="itemForBundle">' + item.form[0].desc +'</li>');
            });
        },

        bundlesValues: function () {
            var $thisEl = this.$el, self = this;
            var bundlesArray = $thisEl.find('.bundle');
            var id;
            this.selectQuestion = [];
            _.each(bundlesArray, function (item) {
                id = $(item).data('id');
                self.selectQuestion.push(id);
            });
        },

        hideDialog: function () {
            $('.edit-dialog').remove();
        },

        chooseWorkflowDetailes: function (e, el) {
            var $target = e ? $(e.target) : el;
            var $thisEl = this.$el;
            var self = this;
            var id;
            if (e) {
                e.preventDefault();
                e.stopPropagation();
            }
            $thisEl.find('.workflow-sub-list>*').remove();
            $thisEl.find('#details').addClass('active').show();
            $thisEl.find('#workflows').empty();
            $thisEl.find('#workflowNames').html('');

            if ($target.hasClass('workflow')) {
                $('.workflow-list .active').removeClass('active');
                $target.parent().addClass('active');
            }
            this.topicId = $target.data('id');
            var data = _.find(this.weightage, {'_id': this.topicId});
            $thisEl.find('#workflows').append('<table class="list stripedList blueclr"><thead><tr><th class="text-left text-clr-white">Weightage</th><th class="text-left text-clr-white">Total Questions</th><th class="text-left text-clr-white">No Of Questions</th></tr></thead><tbody id="'+data.name.replace(/[^A-Z0-9-]/g,'')+'"></tbody></table>');

            $thisEl.find('#'+ data.name.replace(/[^A-Z0-9-]/g,'')).empty();

            _.forEach(data.details, function (item, index) {
                    item.id = self.topicId + index;
                $thisEl.find('#'+data.name.replace(/[^A-Z0-9-]/g,'')).append('<tr><td class="text-left">' +item.weightage +'</td><td class="text-left">' + item.questions +'</td>' +
                    '<td class="text-left">' +
                    '<input type="number" id="'+item.id+'" class="height-25 enterQuestions" style="width:50%" max="'+item.questions+'" value="'+item.noOfQuestions+'"/></td></tr>');
            })
        },

        render: function () {
            var self = this;
            var formString;

            formString = this.template({
                model           : this.currentModel.toJSON(),
                currencySplitter: helpers.currencySplitter
            });

            this.$el = $(formString).dialog({
                autoOpen   : true,
                dialogClass: 'edit-dialog',
                title      : 'Create Shipping Method',
                width      : '900px',
                buttons    : [{
                    text : 'Save',
                    class: 'btn blue saveBtn',
                    click: function () {
                        self.saveItem();
                    }
                }, {
                    text : 'Cancel',
                    class: 'btn',
                    click: function () {
                        self.hideDialog();
                    }
                },
                 {
                        text : 'Generate Questions',
                        class: 'btn generateQue',
                        click: function () {
                            self.generateQuestions();
                        }
                 }
                ]

            });
            $('.generateQue').addClass('hide');

            dataService.getData('/vcourse/classDetails', {category: 'COURSES'}, function (courses) {
                courses = _.map(courses.data, function (course) {
                    course.name = course.className;
                    return course;
                });
                //self.selectClasses(courses);
                self.responseObj['#classpc'] = courses;
            });
            //dataService.getData('/vcourse/', {category: 'COURSES'}, function (courses1) {
            //    courses1 = _.map(courses1.data, function (course1) {
            //        course1.name = course1.courseName;
            //        return course1;
            //    });
            //    self.renderCenters(courses1);
            //    self.responseObj['#variantsCategoriesBlock'] = courses1;
            //});

            this.delegateEvents(this.events);

            return this;
        },
        renderCenters : function(objs){
            var $thisEl = this.$el;
            var $checkedCategoryContainer = $thisEl.find('#checkedProductCenter');
            var $categoriesBlock = $thisEl.find('#variantsCenterBlock');
            var $categoryContainer = $thisEl.find('#productCenterCategories');
            var checkedSelectedId;
            var checkedName;
            $categoryContainer.append('<input type="text" id="myCenterInput" class="multiSelectSearch" placeholder="Search for course.." title="Type in a center">')
            $categoryContainer.append('<li><label class="_customCHeckbox"><input type="checkbox" class="checkbox productCenterCategory" id="1" data-value="ALL" data-id="1"> <span></span></label><label class="_checkboxLabel" for="1">ALL</label></li>');
            _.each(objs, function (category) {
                checkedName = '';
                checkedSelectedId = '';

                if (objs.indexOf(category._id) >= 0) {
                    $categoryContainer.append('<li><label class="_customCHeckbox"><input checked="checked" type="checkbox" class="checkbox productCenterCategory" id="' + category._id + '" data-value="' + category.name + '" data-id="' + category._id + '"> <span></span></label><label class="_checkboxLabel" for="' + category._id + '">' + category.name + '</label></li>');
                    checkedSelectedId = category._id;
                    checkedName = category.name;
                } else {
                    $categoryContainer.append('<li><label class="_customCHeckbox"><input type="checkbox" class="checkbox productCenterCategory" id="' + category._id + '" data-value="' + category.name + '" data-id="' + category._id + '"> <span></span></label><label class="_checkboxLabel" for="' + category._id + '">' + category.name + '</label></li>');
                }

                if (checkedName) {
                    $checkedCategoryContainer.append('<li><span class="checkedProductCenter"  data-value="' + checkedName + '" data-id="' + checkedSelectedId + '">' + checkedName + '</span><span class="deleteTag icon-close3"></span></li>');
                }
            });
        },

        deleteCenters: function(e) {
            var $thisEl = this.$el;
            var $target = $thisEl.find(e.target);
            var id = $thisEl.find($target.closest('li')
                .find('.checkedProductCenter')[0])
                .data('id');

            e.stopPropagation();
            //$thisEl.find('.productCenterCategory').prop('checked', false)
            $('#checkedProductCategories').empty();

            $thisEl.find('.productCenterCategory[data-id="' + id + '"]')
                .prop('checked', false);
            $target.closest('li').remove();
            this.selectBatches = [];
            $thisEl.find('#productCategories').empty();
            $thisEl.find('.productCategory').prop('checked', false);
            this.changeCenter(e);
            if (typeof this.useFilter === 'function') {
                this.useFilter();
            }
        },


        changeCenter : function(e){
            var $thisEl = this.$el;
            var self = this;
            var $categoryContainer = $thisEl.find('#checkedProductCenter');
            var $target = $(e.target);
            var categoryId = $target.data('id');
            var categoryName = $target.data('value');
            var idsArray = [];
            var checkedProductCategory = $thisEl.find('.checkedProductCenter');
            var checkedValues = $thisEl.find('.productCenterCategory')
            e.stopPropagation();

            if(categoryId == '1') {
                if($target.is(':checked')) {
                    $thisEl.find('.productCenterCategory').prop('checked', true)
                    $thisEl.find('#checkedProductCenter').empty();
                    checkedValues.each(function (key, item) {
                        if($(item).data('id') != 1) {
                            $categoryContainer.append('<li><span class="checkedProductCenter"  data-value="' + $(item).data('value') + '" data-id="' + $(item).data('id') + '">' + $(item).data('value') + '</span><span class="deleteCenter icon-close3"></span></li>');
                        }

                    });
                } else {
                    $thisEl.find('#checkedProductCenter').empty();
                    $thisEl.find('.productCenterCategory').prop('checked', false)
                }

            }

            if (checkedProductCategory && checkedProductCategory.length) {
                checkedProductCategory.each(function (key, item) {
                    idsArray.push($(item).data('id'));
                });
            }

            if(categoryId && categoryId != '1') {
                if (idsArray.length && idsArray.indexOf(categoryId) >= 0) {
                    $categoryContainer.find('[data-id=' + categoryId + ']').closest('li').remove();
                } else {
                    $categoryContainer.append('<li><span class="checkedProductCenter"  data-value="' + categoryName + '" data-id="' + categoryId + '">' + categoryName + '</span><span class="deleteCenter icon-close3"></span></li>');
                }
            }



            this.selectCenters = [];
            var checkedProductCategory = $thisEl.find('.checkedProductCenter');
            if (checkedProductCategory && checkedProductCategory.length) {
                checkedProductCategory.each(function (key, item) {
                    self.selectCenters.push($(item).data('id'));
                });
            }


            /*var paperId = $thisEl.find('#paperConfig').attr('data-id');
             var courseObj = _.filter(this.config, {_id: paperId} );
             this.courseId = courseObj.length > 0 ? courseObj[0].course._id : '';*/

            if(!_.isEmpty(self.selectCenters)){
                this.selectCourse(self.selectCenters);
            }

            if (typeof this.useFilter === 'function') {
                this.useFilter();
            }
        },
    });

    return createView;
});
