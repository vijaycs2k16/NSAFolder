'use strict';

var Promise = require('bluebird');

var readdirp = require('readdirp');
var util = require('util');
var async = require('async');
var _ = require('lodash');

var cql = Promise.promisifyAll(require('dse-driver'));
var ORM = Promise.promisifyAll(require('./orm/apollo'));
var debug = require('debug')('express-cassandra');

var CassandraClient = function f(options) {
  var self = this;
  self.modelInstance = {};
  self.orm = new ORM(options.clientOptions, options.ormOptions);
};

CassandraClient.createClient = function (options) {
  return new CassandraClient(options);
};

CassandraClient.setDirectory = function (directory) {
  CassandraClient.directory = directory;
  return CassandraClient;
};

CassandraClient.bind = function (options, cb) {
  var self = CassandraClient;
  self.modelInstance = {};
  self.orm = new ORM(options.clientOptions, options.ormOptions);
  self.orm.connect(function (err) {
    if (err) {
      if (cb) cb(err);
      return;
    }

    readdirp({
      root: self.directory,
      fileFilter: ['*.js', '*.javascript', '*.jsx', '*.coffee', '*.coffeescript', '*.iced', '*.script', '*.ts', '*.tsx', '*.typescript', '*.cjsx', '*.co', '*.json', '*.json5', '*.litcoffee', '*.liticed', '*.ls', '*.node', '*.toml', '*.wisp']
    }, function (err1, list) {
      if (err1 && err1.length > 0) {
        if (cb) cb(err1[0]);
        return;
      }

      list = list.files;

      async.each(list, function (file, callback) {
        if (file.name.indexOf('Model') === -1) {
          callback();
          return;
        }

        var modelName = self._translateFileNameToModelName(file.name);

        if (modelName) {
          var filePath = util.format('%s/%s', self.directory, file.path);
          // eslint-disable-next-line import/no-dynamic-require
          var modelSchema = require(filePath);
          self.modelInstance[modelName] = self.orm.add_model(modelName.toLowerCase(), modelSchema, function (err2) {
            if (err2) callback(err2);else callback();
          });
          self.modelInstance[modelName] = Promise.promisifyAll(self.modelInstance[modelName]);
        } else {
          callback();
        }
      }, function (err3) {
        if (err3 && cb) {
          cb(err3);
        } else if (cb) {
          cb();
        }
      });
    });
  });
};

CassandraClient.bindAsync = Promise.promisify(CassandraClient.bind);

CassandraClient.prototype.connect = function f(callback) {
  var self = this;
  self.orm.connect(callback);
};

CassandraClient.prototype.connectAsync = Promise.promisify(CassandraClient.prototype.connect);

CassandraClient.prototype.loadSchema = function f(modelName, modelSchema, callback) {
  var self = this;
  var cb = function cb(err) {
    if (typeof callback === 'function') {
      if (err) callback(err);else callback(null, self.modelInstance[modelName]);
    }
  };
  self.modelInstance[modelName] = self.orm.add_model(modelName, modelSchema, cb);
  self.modelInstance[modelName] = Promise.promisifyAll(self.modelInstance[modelName]);
  return self.modelInstance[modelName];
};

CassandraClient.prototype.loadSchemaAsync = function f(modelName, modelSchema) {
  var _this = this;

  return new Promise(function (resolve, reject) {
    _this.loadSchema(modelName, modelSchema, function (err, Model) {
      if (err) reject(err);else resolve(Model);
    });
  });
};

CassandraClient.uuid = function () {
  return cql.types.Uuid.random();
};

CassandraClient.uuidFromString = function (str) {
  return cql.types.Uuid.fromString(str);
};

CassandraClient.uuidFromBuffer = function (buf) {
  return new cql.types.Uuid(buf);
};

CassandraClient.timeuuid = function () {
  return cql.types.TimeUuid.now();
};

CassandraClient.timeuuidFromDate = function (date) {
  return cql.types.TimeUuid.fromDate(date);
};

CassandraClient.timeuuidFromString = function (str) {
  return cql.types.TimeUuid.fromString(str);
};

CassandraClient.timeuuidFromBuffer = function (buf) {
  return new cql.types.TimeUuid(buf);
};

CassandraClient.maxTimeuuid = function (date) {
  return cql.types.TimeUuid.max(date);
};

CassandraClient.minTimeuuid = function (date) {
  return cql.types.TimeUuid.min(date);
};

CassandraClient.prototype.doBatch = function f(queries, options, callback) {
  if (arguments.length === 2) {
    callback = options;
    options = {};
  }

  var defaults = {
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  var randomModel = this.modelInstance[Object.keys(this.modelInstance)[0]];
  var builtQueries = [];
  var beforeHooks = [];
  for (var i = 0; i < queries.length; i++) {
    builtQueries.push({
      query: queries[i].query,
      params: queries[i].params
    });
    var beforeHookAsync = Promise.promisify(queries[i].before_hook);
    beforeHooks.push(beforeHookAsync());
  }

  var batchResult = void 0;
  Promise.all(beforeHooks).then(function () {
    if (builtQueries.length > 1) {
      return randomModel.execute_batchAsync(builtQueries, options);
    }
    if (builtQueries.length > 0) {
      debug('single query provided for batch request, applying as non batch query');
      return randomModel.execute_queryAsync(builtQueries[0].query, builtQueries[0].params, options);
    }
    debug('no queries provided for batch request, empty array found, doing nothing');
    return {};
  }).then(function (response) {
    batchResult = response;
    var afterHooks = [];
    for (var _i = 0; _i < queries.length; _i++) {
      var afterHookAsync = Promise.promisify(queries[_i].after_hook);
      afterHooks.push(afterHookAsync());
    }
    return Promise.all(afterHooks);
  }).then(function () {
    callback(null, batchResult);
  }).catch(function (err) {
    callback(err);
  });
};

CassandraClient.prototype.doBatchAsync = Promise.promisify(CassandraClient.prototype.doBatch);

CassandraClient.doBatch = function f(queries, options, callback) {
  if (arguments.length === 2) {
    callback = options;
    options = {};
  }

  var defaults = {
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  CassandraClient.prototype.doBatch.call(CassandraClient, queries, options, callback);
};

CassandraClient.doBatchAsync = Promise.promisify(CassandraClient.doBatch);

CassandraClient._translateFileNameToModelName = function (fileName) {
  return fileName.slice(0, fileName.lastIndexOf('.')).replace('Model', '');
};

Object.defineProperties(CassandraClient, {
  consistencies: {
    get: function get() {
      return cql.types.consistencies;
    }
  },
  datatypes: {
    get: function get() {
      return cql.types;
    }
  },
  driver: {
    get: function get() {
      return cql;
    }
  },
  instance: {
    get: function get() {
      return CassandraClient.modelInstance;
    }
  },
  close: {
    get: function get() {
      return CassandraClient.orm.close;
    }
  },
  closeAsync: {
    get: function get() {
      return Promise.promisify(CassandraClient.orm.close);
    }
  }
});

Object.defineProperties(CassandraClient.prototype, {
  consistencies: {
    get: function get() {
      return cql.types.consistencies;
    }
  },
  datatypes: {
    get: function get() {
      return cql.types;
    }
  },
  driver: {
    get: function get() {
      return cql;
    }
  },
  instance: {
    get: function get() {
      return this.modelInstance;
    }
  },
  close: {
    get: function get() {
      return this.orm.close;
    }
  },
  closeAsync: {
    get: function get() {
      return Promise.promisify(this.orm.close);
    }
  }
});

CassandraClient.prototype.uuid = CassandraClient.uuid;
CassandraClient.prototype.uuidFromString = CassandraClient.uuidFromString;
CassandraClient.prototype.uuidFromBuffer = CassandraClient.uuidFromBuffer;
CassandraClient.prototype.timeuuid = CassandraClient.timeuuid;
CassandraClient.prototype.timeuuidFromDate = CassandraClient.timeuuidFromDate;
CassandraClient.prototype.timeuuidFromString = CassandraClient.timeuuidFromString;
CassandraClient.prototype.timeuuidFromBuffer = CassandraClient.timeuuidFromBuffer;
CassandraClient.prototype.maxTimeuuid = CassandraClient.maxTimeuuid;
CassandraClient.prototype.minTimeuuid = CassandraClient.minTimeuuid;

CassandraClient.prototype._translateFileNameToModelName = CassandraClient._translateFileNameToModelName;

module.exports = CassandraClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,