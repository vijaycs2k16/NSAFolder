'use strict';

var util = require('util');
var cql = require('dse-driver');
var async = require('async');
var _ = require('lodash');
var deepDiff = require('deep-diff').diff;
var readlineSync = require('readline-sync');
var objectHash = require('object-hash');
var debug = require('debug')('express-cassandra');

var buildError = require('./apollo_error.js');
var schemer = require('./apollo_schemer');

var TYPE_MAP = require('./cassandra_types');

var checkDBTableName = function checkDBTableName(obj) {
  return typeof obj === 'string' && /^[a-zA-Z]+[a-zA-Z0-9_]*/.test(obj);
};

var BaseModel = function f(instanceValues) {
  instanceValues = instanceValues || {};
  var fieldValues = {};
  var fields = this.constructor._properties.schema.fields;
  var methods = this.constructor._properties.schema.methods || {};
  var model = this;

  var defaultSetter = function f1(propName, newValue) {
    if (this[propName] !== newValue) {
      model._modified[propName] = true;
    }
    this[propName] = newValue;
  };

  var defaultGetter = function f1(propName) {
    return this[propName];
  };

  this._modified = {};
  this._validators = {};

  for (var fieldsKeys = Object.keys(fields), i = 0, len = fieldsKeys.length; i < len; i++) {
    var propertyName = fieldsKeys[i];
    var field = fields[fieldsKeys[i]];

    this._validators[propertyName] = this.constructor._get_validators(propertyName);

    var setter = defaultSetter.bind(fieldValues, propertyName);
    var getter = defaultGetter.bind(fieldValues, propertyName);

    if (field.virtual && typeof field.virtual.set === 'function') {
      setter = field.virtual.set.bind(fieldValues);
    }

    if (field.virtual && typeof field.virtual.get === 'function') {
      getter = field.virtual.get.bind(fieldValues);
    }

    var descriptor = {
      enumerable: true,
      set: setter,
      get: getter
    };

    Object.defineProperty(this, propertyName, descriptor);
    if (!field.virtual) {
      this[propertyName] = instanceValues[propertyName];
    }
  }

  for (var methodNames = Object.keys(methods), _i = 0, _len = methodNames.length; _i < _len; _i++) {
    var methodName = methodNames[_i];
    var method = methods[methodName];
    this[methodName] = method;
  }
};

BaseModel._properties = {
  name: null,
  schema: null
};

BaseModel._set_properties = function f(properties) {
  var schema = properties.schema;
  var tableName = schema.table_name || properties.name;

  if (!checkDBTableName(tableName)) {
    throw buildError('model.tablecreation.invalidname', tableName);
  }

  var qualifiedTableName = util.format('"%s"."%s"', properties.keyspace, tableName);

  this._properties = properties;
  this._properties.table_name = tableName;
  this._properties.qualified_table_name = qualifiedTableName;
};

BaseModel._validate = function f(validators, value) {
  if (value == null || _.isPlainObject(value) && value.$db_function) return true;

  for (var v = 0; v < validators.length; v++) {
    if (typeof validators[v].validator === 'function') {
      if (!validators[v].validator(value)) {
        return validators[v].message;
      }
    }
  }
  return true;
};

BaseModel._get_generic_validator_message = function f(value, propName, fieldtype) {
  return util.format('Invalid Value: "%s" for Field: %s (Type: %s)', value, propName, fieldtype);
};

BaseModel._format_validator_rule = function f(rule) {
  if (typeof rule.validator !== 'function') {
    throw buildError('model.validator.invalidrule', 'Rule validator must be a valid function');
  }
  if (!rule.message) {
    rule.message = this._get_generic_validator_message;
  } else if (typeof rule.message === 'string') {
    rule.message = function f1(message) {
      return util.format(message);
    }.bind(null, rule.message);
  } else if (typeof rule.message !== 'function') {
    throw buildError('model.validator.invalidrule', 'Invalid validator message, must be string or a function');
  }

  return rule;
};

BaseModel._get_validators = function f(fieldname) {
  var _this = this;

  var fieldtype = void 0;
  try {
    fieldtype = schemer.get_field_type(this._properties.schema, fieldname);
  } catch (e) {
    throw buildError('model.validator.invalidschema', e.message);
  }

  var validators = [];
  var typeFieldValidator = TYPE_MAP.generic_type_validator(fieldtype);

  if (typeFieldValidator) validators.push(typeFieldValidator);

  var field = this._properties.schema.fields[fieldname];
  if (typeof field.rule !== 'undefined') {
    if (typeof field.rule === 'function') {
      field.rule = {
        validator: field.rule,
        message: this._get_generic_validator_message
      };
      validators.push(field.rule);
    } else {
      if (!_.isPlainObject(field.rule)) {
        throw buildError('model.validator.invalidrule', 'Validation rule must be a function or an object');
      }
      if (field.rule.validator) {
        validators.push(this._format_validator_rule(field.rule));
      } else if (Array.isArray(field.rule.validators)) {
        field.rule.validators.forEach(function (fieldrule) {
          validators.push(_this._format_validator_rule(fieldrule));
        });
      }
    }
  }

  return validators;
};

BaseModel._ask_confirmation = function f(message) {
  var permission = 'y';
  if (!this._properties.disableTTYConfirmation) {
    permission = readlineSync.question(message);
  }
  return permission;
};

BaseModel._ensure_connected = function f(callback) {
  if (!this._properties.cql) {
    this._properties.connect(callback);
  } else {
    callback();
  }
};

BaseModel._execute_definition_query = function f(query, params, callback) {
  var _this2 = this;

  this._ensure_connected(function (err) {
    if (err) {
      callback(err);
      return;
    }
    debug('executing definition query: %s with params: %j', query, params);
    var properties = _this2._properties;
    var conn = properties.define_connection;
    conn.execute(query, params, { prepare: false, fetchSize: 0 }, callback);
  });
};

BaseModel._execute_batch = function f(queries, options, callback) {
  var _this3 = this;

  this._ensure_connected(function (err) {
    if (err) {
      callback(err);
      return;
    }
    debug('executing batch queries: %j', queries);
    _this3._properties.cql.batch(queries, options, callback);
  });
};

BaseModel.execute_batch = function f(queries, options, callback) {
  if (arguments.length === 2) {
    callback = options;
    options = {};
  }

  var defaults = {
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  this._execute_batch(queries, options, callback);
};

BaseModel.get_cql_client = function f(callback) {
  var _this4 = this;

  this._ensure_connected(function (err) {
    if (err) {
      callback(err);
      return;
    }
    callback(null, _this4._properties.cql);
  });
};

BaseModel._create_table = function f(callback) {
  var _this5 = this;

  var properties = this._properties;
  var tableName = properties.table_name;
  var modelSchema = properties.schema;
  var dropTableOnSchemaChange = properties.dropTableOnSchemaChange;
  var migration = properties.migration;

  // backwards compatible change, dropTableOnSchemaChange will work like migration: 'drop'
  if (!migration) {
    if (dropTableOnSchemaChange) migration = 'drop';else migration = 'safe';
  }
  // always safe migrate if NODE_ENV==='production'
  if (process.env.NODE_ENV === 'production') migration = 'safe';

  // check for existence of table on DB and if it matches this model's schema
  this._get_db_table_schema(function (err, dbSchema) {
    if (err) {
      callback(err);
      return;
    }

    var afterCustomIndex = function afterCustomIndex(err1) {
      if (err1) {
        callback(buildError('model.tablecreation.dbindexcreate', err1));
        return;
      }
      // materialized view creation
      if (modelSchema.materialized_views) {
        async.eachSeries(Object.keys(modelSchema.materialized_views), function (viewName, next) {
          var matViewQuery = _this5._create_materialized_view_query(tableName, viewName, modelSchema.materialized_views[viewName]);
          _this5._execute_definition_query(matViewQuery, [], function (err2, result) {
            if (err2) next(buildError('model.tablecreation.matviewcreate', err2));else next(null, result);
          });
        }, callback);
      } else callback();
    };

    var afterDBIndex = function afterDBIndex(err1) {
      if (err1) {
        callback(buildError('model.tablecreation.dbindexcreate', err1));
        return;
      }
      // custom index creation
      if (modelSchema.custom_indexes) {
        async.eachSeries(modelSchema.custom_indexes, function (idx, next) {
          _this5._execute_definition_query(_this5._create_custom_index_query(tableName, idx), [], function (err2, result) {
            if (err2) next(err2);else next(null, result);
          });
        }, afterCustomIndex);
      } else if (modelSchema.custom_index) {
        var customIndexQuery = _this5._create_custom_index_query(tableName, modelSchema.custom_index);
        _this5._execute_definition_query(customIndexQuery, [], function (err2, result) {
          if (err2) afterCustomIndex(err2);else afterCustomIndex(null, result);
        });
      } else afterCustomIndex();
    };

    var afterDBCreate = function afterDBCreate(err1) {
      if (err1) {
        callback(buildError('model.tablecreation.dbcreate', err1));
        return;
      }
      // index creation
      if (modelSchema.indexes instanceof Array) {
        async.eachSeries(modelSchema.indexes, function (idx, next) {
          _this5._execute_definition_query(_this5._create_index_query(tableName, idx), [], function (err2, result) {
            if (err2) next(err2);else next(null, result);
          });
        }, afterDBIndex);
      } else afterDBIndex();
    };

    if (dbSchema) {
      var normalizedModelSchema = void 0;
      var normalizedDBSchema = void 0;

      try {
        normalizedModelSchema = schemer.normalize_model_schema(modelSchema);
        normalizedDBSchema = schemer.normalize_model_schema(dbSchema);
      } catch (e) {
        throw buildError('model.validator.invalidschema', e.message);
      }

      if (_.isEqual(normalizedModelSchema, normalizedDBSchema)) {
        callback();
      } else {
        var dropRecreateTable = function dropRecreateTable() {
          var permission = _this5._ask_confirmation(util.format('Migration: model schema changed for table "%s", drop table & recreate? (data will be lost!) (y/n): ', tableName));
          if (permission.toLowerCase() === 'y') {
            if (normalizedDBSchema.materialized_views) {
              var mviews = Object.keys(normalizedDBSchema.materialized_views);

              _this5.drop_mviews(mviews, function (err1) {
                if (err1) {
                  callback(buildError('model.tablecreation.matviewdrop', err1));
                  return;
                }

                _this5.drop_table(function (err2) {
                  if (err2) {
                    callback(buildError('model.tablecreation.dbdrop', err2));
                    return;
                  }
                  var createTableQuery = _this5._create_table_query(tableName, modelSchema);
                  _this5._execute_definition_query(createTableQuery, [], afterDBCreate);
                });
              });
            } else {
              _this5.drop_table(function (err1) {
                if (err1) {
                  callback(buildError('model.tablecreation.dbdrop', err1));
                  return;
                }
                var createTableQuery = _this5._create_table_query(tableName, modelSchema);
                _this5._execute_definition_query(createTableQuery, [], afterDBCreate);
              });
            }
          } else {
            callback(buildError('model.tablecreation.schemamismatch', tableName));
          }
        };

        var afterDBAlter = function afterDBAlter(err1) {
          if (err1) {
            if (err1.message !== 'break') callback(err1);
            return;
          }
          // it should create/drop indexes/custom_indexes/materialized_views that are added/removed in model schema
          // remove common indexes/custom_indexes/materialized_views from normalizedModelSchema and normalizedDBSchema
          // then drop all remaining indexes/custom_indexes/materialized_views from normalizedDBSchema
          // and add all remaining indexes/custom_indexes/materialized_views from normalizedModelSchema
          var addedIndexes = _.difference(normalizedModelSchema.indexes, normalizedDBSchema.indexes);
          var removedIndexes = _.difference(normalizedDBSchema.indexes, normalizedModelSchema.indexes);
          var removedIndexNames = [];
          removedIndexes.forEach(function (removedIndex) {
            removedIndexNames.push(dbSchema.index_names[removedIndex]);
          });

          var addedCustomIndexes = _.filter(normalizedModelSchema.custom_indexes, function (obj) {
            return !_.find(normalizedDBSchema.custom_indexes, obj);
          });
          var removedCustomIndexes = _.filter(normalizedDBSchema.custom_indexes, function (obj) {
            return !_.find(normalizedModelSchema.custom_indexes, obj);
          });
          removedCustomIndexes.forEach(function (removedIndex) {
            removedIndexNames.push(dbSchema.index_names[objectHash(removedIndex)]);
          });

          var addedMaterializedViews = _.filter(Object.keys(normalizedModelSchema.materialized_views), function (viewName) {
            return !_.find(normalizedDBSchema.materialized_views, normalizedModelSchema.materialized_views[viewName]);
          });
          var removedMaterializedViews = _.filter(Object.keys(normalizedDBSchema.materialized_views), function (viewName) {
            return !_.find(normalizedModelSchema.materialized_views, normalizedDBSchema.materialized_views[viewName]);
          });

          // remove altered materialized views
          if (removedMaterializedViews.length > 0) {
            var permission = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has removed materialized_views: %j, drop them? (y/n): ', tableName, removedMaterializedViews));
            if (permission.toLowerCase() !== 'y') {
              callback(buildError('model.tablecreation.schemamismatch', tableName));
              return;
            }
          }
          if (removedIndexNames.length > 0) {
            var _permission = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has removed indexes: %j, drop them? (y/n): ', tableName, removedIndexNames));
            if (_permission.toLowerCase() !== 'y') {
              callback(buildError('model.tablecreation.schemamismatch', tableName));
              return;
            }
          }

          _this5.drop_mviews(removedMaterializedViews, function (err2) {
            if (err2) {
              callback(buildError('model.tablecreation.matviewdrop', err2));
              return;
            }

            // remove altered indexes by index name
            _this5.drop_indexes(removedIndexNames, function (err3) {
              if (err3) {
                callback(buildError('model.tablecreation.dbindexdrop', err3));
                return;
              }

              // add altered indexes
              async.eachSeries(addedIndexes, function (idx, next) {
                _this5._execute_definition_query(_this5._create_index_query(tableName, idx), [], function (err4, result) {
                  if (err4) next(err4);else next(null, result);
                });
              }, function (err4) {
                if (err4) {
                  callback(buildError('model.tablecreation.dbindexcreate', err4));
                  return;
                }

                // add altered custom indexes
                async.eachSeries(addedCustomIndexes, function (idx, next) {
                  var customIndexQuery = _this5._create_custom_index_query(tableName, idx);
                  _this5._execute_definition_query(customIndexQuery, [], function (err5, result) {
                    if (err5) next(err5);else next(null, result);
                  });
                }, function (err5) {
                  if (err5) {
                    callback(buildError('model.tablecreation.dbindexcreate', err5));
                    return;
                  }

                  // add altered materialized_views
                  async.eachSeries(addedMaterializedViews, function (viewName, next) {
                    var matViewQuery = _this5._create_materialized_view_query(tableName, viewName, modelSchema.materialized_views[viewName]);
                    _this5._execute_definition_query(matViewQuery, [], function (err6, result) {
                      if (err6) next(buildError('model.tablecreation.matviewcreate', err6));else next(null, result);
                    });
                  }, callback);
                });
              });
            });
          });
        };

        var alterDBTable = function alterDBTable() {
          var differences = deepDiff(normalizedDBSchema.fields, normalizedModelSchema.fields);
          async.eachSeries(differences, function (diff, next) {
            var fieldName = diff.path[0];
            var alterFieldType = function alterFieldType() {
              var permission = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has new type for field "%s", ' + 'alter table to update column type? (y/n): ', tableName, fieldName));
              if (permission.toLowerCase() === 'y') {
                _this5.alter_table('ALTER', fieldName, diff.rhs, function (err1, result) {
                  if (err1) next(buildError('model.tablecreation.dbalter', err1));else next(null, result);
                });
              } else {
                next(buildError('model.tablecreation.schemamismatch', tableName));
              }
            };

            var alterAddField = function alterAddField() {
              var type = '';
              if (diff.path.length > 1) {
                if (diff.path[1] === 'type') {
                  type = diff.rhs;
                  if (normalizedModelSchema.fields[fieldName].typeDef) {
                    type += normalizedModelSchema.fields[fieldName].typeDef;
                  }
                } else {
                  type = normalizedModelSchema.fields[fieldName].type;
                  type += diff.rhs;
                }
              } else {
                type = diff.rhs.type;
                if (diff.rhs.typeDef) type += diff.rhs.typeDef;
              }

              _this5.alter_table('ADD', fieldName, type, function (err1, result) {
                if (err1) next(buildError('model.tablecreation.dbalter', err1));else next(null, result);
              });
            };

            var alterRemoveField = function alterRemoveField(nextCallback) {
              // remove dependent indexes/custom_indexes/materialized_views,
              // update them in normalizedDBSchema, then alter
              var dependentIndexes = [];
              var pullIndexes = [];
              normalizedDBSchema.indexes.forEach(function (dbIndex) {
                var indexSplit = dbIndex.split(/[()]/g);
                var indexFieldName = '';
                if (indexSplit.length > 1) indexFieldName = indexSplit[1];else indexFieldName = indexSplit[0];
                if (indexFieldName === fieldName) {
                  dependentIndexes.push(dbSchema.index_names[dbIndex]);
                  pullIndexes.push(dbIndex);
                }
              });
              _.pullAll(normalizedDBSchema.indexes, pullIndexes);

              var pullCustomIndexes = [];
              normalizedDBSchema.custom_indexes.forEach(function (dbIndex) {
                if (dbIndex.on === fieldName) {
                  dependentIndexes.push(dbSchema.index_names[objectHash(dbIndex)]);
                  pullCustomIndexes.push(dbIndex);
                }
              });
              _.pullAll(normalizedDBSchema.custom_indexes, pullCustomIndexes);

              var dependentViews = [];
              Object.keys(normalizedDBSchema.materialized_views).forEach(function (dbViewName) {
                if (normalizedDBSchema.materialized_views[dbViewName].select.indexOf(fieldName) > -1) {
                  dependentViews.push(dbViewName);
                } else if (normalizedDBSchema.materialized_views[dbViewName].select[0] === '*') {
                  dependentViews.push(dbViewName);
                } else if (normalizedDBSchema.materialized_views[dbViewName].key.indexOf(fieldName) > -1) {
                  dependentViews.push(dbViewName);
                } else if (normalizedDBSchema.materialized_views[dbViewName].key[0] instanceof Array && normalizedDBSchema.materialized_views[dbViewName].key[0].indexOf(fieldName) > -1) {
                  dependentViews.push(dbViewName);
                }
              });
              dependentViews.forEach(function (viewName) {
                delete normalizedDBSchema.materialized_views[viewName];
              });

              _this5.drop_mviews(dependentViews, function (err1) {
                if (err1) {
                  nextCallback(buildError('model.tablecreation.matviewdrop', err1));
                  return;
                }

                _this5.drop_indexes(dependentIndexes, function (err2) {
                  if (err2) {
                    nextCallback(buildError('model.tablecreation.dbindexdrop', err2));
                    return;
                  }

                  _this5.alter_table('DROP', fieldName, '', function (err3, result) {
                    if (err3) nextCallback(buildError('model.tablecreation.dbalter', err3));else nextCallback(null, result);
                  });
                });
              });
            };

            if (diff.kind === 'N') {
              var permission = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has added field "%s", alter table to add column? (y/n): ', tableName, fieldName));
              if (permission.toLowerCase() === 'y') {
                alterAddField();
              } else {
                next(buildError('model.tablecreation.schemamismatch', tableName));
              }
            } else if (diff.kind === 'D') {
              var _permission2 = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has removed field "%s", alter table to drop column? ' + '(column data will be lost & dependent indexes/views will be recreated!) (y/n): ', tableName, fieldName));
              if (_permission2.toLowerCase() === 'y') {
                alterRemoveField(next);
              } else {
                next(buildError('model.tablecreation.schemamismatch', tableName));
              }
            } else if (diff.kind === 'E') {
              // check if the alter field type is possible, otherwise try D and then N
              if (diff.path[1] === 'type') {
                if (diff.lhs === 'int' && diff.rhs === 'varint') {
                  // alter field type possible
                  alterFieldType();
                } else if (normalizedDBSchema.key.indexOf(fieldName) > 0) {
                  // check if field part of clustering key
                  // alter field type impossible
                  var _permission3 = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has new incompatible type for primary key field "%s", ' + 'proceed to recreate table? (y/n): ', tableName, fieldName));
                  if (_permission3.toLowerCase() === 'y') {
                    dropRecreateTable();
                    next(new Error('break'));
                  } else {
                    next(buildError('model.tablecreation.schemamismatch', tableName));
                  }
                } else if (['text', 'ascii', 'bigint', 'boolean', 'decimal', 'double', 'float', 'inet', 'int', 'timestamp', 'timeuuid', 'uuid', 'varchar', 'varint'].indexOf(diff.lhs) > -1 && diff.rhs === 'blob') {
                  // alter field type possible
                  alterFieldType();
                } else if (diff.lhs === 'timeuuid' && diff.rhs === 'uuid') {
                  // alter field type possible
                  alterFieldType();
                } else if (normalizedDBSchema.key[0].indexOf(fieldName) > -1) {
                  // check if field part of partition key
                  // alter field type impossible
                  var _permission4 = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has new incompatible type for primary key field "%s", ' + 'proceed to recreate table? (y/n): ', tableName, fieldName));
                  if (_permission4.toLowerCase() === 'y') {
                    dropRecreateTable();
                    next(new Error('break'));
                  } else {
                    next(buildError('model.tablecreation.schemamismatch', tableName));
                  }
                } else {
                  // alter type impossible
                  var _permission5 = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has new incompatible type for field "%s", drop column ' + 'and recreate? (column data will be lost & dependent indexes/views will be recreated!) (y/n): ', tableName, fieldName));
                  if (_permission5.toLowerCase() === 'y') {
                    alterRemoveField(function (err1) {
                      if (err1) next(err1);else alterAddField();
                    });
                  } else {
                    next(buildError('model.tablecreation.schemamismatch', tableName));
                  }
                }
              } else {
                // alter type impossible
                var _permission6 = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has new incompatible type for field "%s", drop column ' + 'and recreate? (column data will be lost & dependent indexes/views will be recreated!) (y/n): ', tableName, fieldName));
                if (_permission6.toLowerCase() === 'y') {
                  alterRemoveField(function (err1) {
                    if (err1) next(err1);else alterAddField();
                  });
                } else {
                  next(buildError('model.tablecreation.schemamismatch', tableName));
                }
              }
            } else {
              next();
            }
          }, afterDBAlter);
        };

        if (migration === 'alter') {
          // check if table can be altered to match schema
          if (_.isEqual(normalizedModelSchema.key, normalizedDBSchema.key) && _.isEqual(normalizedModelSchema.clustering_order, normalizedDBSchema.clustering_order)) {
            alterDBTable();
          } else {
            dropRecreateTable();
          }
        } else if (migration === 'drop') {
          dropRecreateTable();
        } else {
          callback(buildError('model.tablecreation.schemamismatch', tableName));
        }
      }
    } else {
      // if not existing, it's created
      var createTableQuery = _this5._create_table_query(tableName, modelSchema);
      _this5._execute_definition_query(createTableQuery, [], afterDBCreate);
    }
  });
};

BaseModel._create_table_query = function f(tableName, schema) {
  var rows = [];
  var fieldType = void 0;
  Object.keys(schema.fields).forEach(function (k) {
    if (schema.fields[k].virtual) {
      return;
    }
    var segment = '';
    fieldType = schemer.get_field_type(schema, k);
    if (schema.fields[k].typeDef) {
      segment = util.format('"%s" %s%s', k, fieldType, schema.fields[k].typeDef);
    } else {
      segment = util.format('"%s" %s', k, fieldType);
    }

    if (schema.fields[k].static) {
      segment += ' STATIC';
    }

    rows.push(segment);
  });

  var partitionKey = schema.key[0];
  var clusteringKey = schema.key.slice(1, schema.key.length);
  var clusteringOrder = [];

  for (var field = 0; field < clusteringKey.length; field++) {
    if (schema.clustering_order && schema.clustering_order[clusteringKey[field]] && schema.clustering_order[clusteringKey[field]].toLowerCase() === 'desc') {
      clusteringOrder.push(util.format('"%s" DESC', clusteringKey[field]));
    } else {
      clusteringOrder.push(util.format('"%s" ASC', clusteringKey[field]));
    }
  }

  var clusteringOrderQuery = '';
  if (clusteringOrder.length > 0) {
    clusteringOrderQuery = util.format(' WITH CLUSTERING ORDER BY (%s)', clusteringOrder.toString());
  }

  if (partitionKey instanceof Array) {
    partitionKey = partitionKey.map(function (v) {
      return util.format('"%s"', v);
    }).join(',');
  } else {
    partitionKey = util.format('"%s"', partitionKey);
  }

  if (clusteringKey.length) {
    clusteringKey = clusteringKey.map(function (v) {
      return util.format('"%s"', v);
    }).join(',');
    clusteringKey = util.format(',%s', clusteringKey);
  } else {
    clusteringKey = '';
  }

  var query = util.format('CREATE TABLE IF NOT EXISTS "%s" (%s , PRIMARY KEY((%s)%s))%s;', tableName, rows.join(' , '), partitionKey, clusteringKey, clusteringOrderQuery);

  return query;
};

BaseModel._create_materialized_view_query = function f(tableName, viewName, viewSchema) {
  var rows = [];

  for (var k = 0; k < viewSchema.select.length; k++) {
    if (viewSchema.select[k] === '*') rows.push(util.format('%s', viewSchema.select[k]));else rows.push(util.format('"%s"', viewSchema.select[k]));
  }

  var partitionKey = viewSchema.key[0];
  var clusteringKey = viewSchema.key.slice(1, viewSchema.key.length);
  var clusteringOrder = [];

  for (var field = 0; field < clusteringKey.length; field++) {
    if (viewSchema.clustering_order && viewSchema.clustering_order[clusteringKey[field]] && viewSchema.clustering_order[clusteringKey[field]].toLowerCase() === 'desc') {
      clusteringOrder.push(util.format('"%s" DESC', clusteringKey[field]));
    } else {
      clusteringOrder.push(util.format('"%s" ASC', clusteringKey[field]));
    }
  }

  var clusteringOrderQuery = '';
  if (clusteringOrder.length > 0) {
    clusteringOrderQuery = util.format(' WITH CLUSTERING ORDER BY (%s)', clusteringOrder.toString());
  }

  if (partitionKey instanceof Array) {
    partitionKey = partitionKey.map(function (v) {
      return util.format('"%s"', v);
    }).join(',');
  } else {
    partitionKey = util.format('"%s"', partitionKey);
  }

  if (clusteringKey.length) {
    clusteringKey = clusteringKey.map(function (v) {
      return util.format('"%s"', v);
    }).join(',');
    clusteringKey = util.format(',%s', clusteringKey);
  } else {
    clusteringKey = '';
  }

  var whereClause = partitionKey.split(',').join(' IS NOT NULL AND ');
  if (clusteringKey) whereClause += clusteringKey.split(',').join(' IS NOT NULL AND ');
  whereClause += ' IS NOT NULL';

  var query = util.format('CREATE MATERIALIZED VIEW IF NOT EXISTS "%s" AS SELECT %s FROM "%s" WHERE %s PRIMARY KEY((%s)%s)%s;', viewName, rows.join(' , '), tableName, whereClause, partitionKey, clusteringKey, clusteringOrderQuery);

  return query;
};

BaseModel._create_index_query = function f(tableName, indexName) {
  var query = void 0;
  var indexExpression = indexName.replace(/["\s]/g, '').split(/[()]/g);
  if (indexExpression.length > 1) {
    indexExpression[0] = indexExpression[0].toLowerCase();
    query = util.format('CREATE INDEX IF NOT EXISTS ON "%s" (%s("%s"));', tableName, indexExpression[0], indexExpression[1]);
  } else {
    query = util.format('CREATE INDEX IF NOT EXISTS ON "%s" ("%s");', tableName, indexExpression[0]);
  }

  return query;
};

BaseModel._create_custom_index_query = function f(tableName, customIndex) {
  var query = util.format('CREATE CUSTOM INDEX IF NOT EXISTS ON "%s" ("%s") USING \'%s\'', tableName, customIndex.on, customIndex.using);

  if (Object.keys(customIndex.options).length > 0) {
    query += ' WITH OPTIONS = {';
    Object.keys(customIndex.options).forEach(function (key) {
      query += util.format("'%s': '%s', ", key, customIndex.options[key]);
    });
    query = query.slice(0, -2);
    query += '}';
  }

  query += ';';

  return query;
};

BaseModel._get_db_table_schema = function f(callback) {
  var self = this;

  var tableName = this._properties.table_name;
  var keyspace = this._properties.keyspace;

  var query = 'SELECT * FROM system_schema.columns WHERE table_name = ? AND keyspace_name = ?;';

  self.execute_query(query, [tableName, keyspace], function (err, resultColumns) {
    if (err) {
      callback(buildError('model.tablecreation.dbschemaquery', err));
      return;
    }

    if (!resultColumns.rows || resultColumns.rows.length === 0) {
      callback(null, null);
      return;
    }

    var dbSchema = { fields: {}, typeMaps: {}, staticMaps: {} };

    for (var r = 0; r < resultColumns.rows.length; r++) {
      var row = resultColumns.rows[r];

      dbSchema.fields[row.column_name] = TYPE_MAP.extract_type(row.type);

      var typeMapDef = TYPE_MAP.extract_typeDef(row.type);
      if (typeMapDef.length > 0) {
        dbSchema.typeMaps[row.column_name] = typeMapDef;
      }

      if (row.kind === 'partition_key') {
        if (!dbSchema.key) dbSchema.key = [[]];
        dbSchema.key[0][row.position] = row.column_name;
      } else if (row.kind === 'clustering') {
        if (!dbSchema.key) dbSchema.key = [[]];
        if (!dbSchema.clustering_order) dbSchema.clustering_order = {};

        dbSchema.key[row.position + 1] = row.column_name;
        if (row.clustering_order && row.clustering_order.toLowerCase() === 'desc') {
          dbSchema.clustering_order[row.column_name] = 'DESC';
        } else {
          dbSchema.clustering_order[row.column_name] = 'ASC';
        }
      } else if (row.kind === 'static') {
        dbSchema.staticMaps[row.column_name] = true;
      }
    }

    query = 'SELECT * FROM system_schema.indexes WHERE table_name = ? AND keyspace_name = ?;';

    self.execute_query(query, [tableName, keyspace], function (err1, resultIndexes) {
      if (err1) {
        callback(buildError('model.tablecreation.dbschemaquery', err1));
        return;
      }

      for (var _r = 0; _r < resultIndexes.rows.length; _r++) {
        var _row = resultIndexes.rows[_r];

        if (_row.index_name) {
          var indexOptions = _row.options;
          var target = indexOptions.target;
          target = target.replace(/["\s]/g, '');
          delete indexOptions.target;

          // keeping track of index names to drop index when needed
          if (!dbSchema.index_names) dbSchema.index_names = {};

          if (_row.kind === 'CUSTOM') {
            var using = indexOptions.class_name;
            delete indexOptions.class_name;

            if (!dbSchema.custom_indexes) dbSchema.custom_indexes = [];
            var customIndexObject = {
              on: target,
              using: using,
              options: indexOptions
            };
            dbSchema.custom_indexes.push(customIndexObject);
            dbSchema.index_names[objectHash(customIndexObject)] = _row.index_name;
          } else {
            if (!dbSchema.indexes) dbSchema.indexes = [];
            dbSchema.indexes.push(target);
            dbSchema.index_names[target] = _row.index_name;
          }
        }
      }

      query = 'SELECT view_name,base_table_name FROM system_schema.views WHERE keyspace_name=?;';

      self.execute_query(query, [keyspace], function (err2, resultViews) {
        if (err2) {
          callback(buildError('model.tablecreation.dbschemaquery', err2));
          return;
        }

        for (var _r2 = 0; _r2 < resultViews.rows.length; _r2++) {
          var _row2 = resultViews.rows[_r2];

          if (_row2.base_table_name === tableName) {
            if (!dbSchema.materialized_views) dbSchema.materialized_views = {};
            dbSchema.materialized_views[_row2.view_name] = {};
          }
        }

        if (dbSchema.materialized_views) {
          query = 'SELECT * FROM system_schema.columns WHERE keyspace_name=? and table_name IN ?;';

          self.execute_query(query, [keyspace, Object.keys(dbSchema.materialized_views)], function (err3, resultMatViews) {
            if (err3) {
              callback(buildError('model.tablecreation.dbschemaquery', err3));
              return;
            }

            for (var _r3 = 0; _r3 < resultMatViews.rows.length; _r3++) {
              var _row3 = resultMatViews.rows[_r3];

              if (!dbSchema.materialized_views[_row3.table_name].select) {
                dbSchema.materialized_views[_row3.table_name].select = [];
              }

              dbSchema.materialized_views[_row3.table_name].select.push(_row3.column_name);

              if (_row3.kind === 'partition_key') {
                if (!dbSchema.materialized_views[_row3.table_name].key) {
                  dbSchema.materialized_views[_row3.table_name].key = [[]];
                }

                dbSchema.materialized_views[_row3.table_name].key[0][_row3.position] = _row3.column_name;
              } else if (_row3.kind === 'clustering') {
                if (!dbSchema.materialized_views[_row3.table_name].key) {
                  dbSchema.materialized_views[_row3.table_name].key = [[]];
                }
                if (!dbSchema.materialized_views[_row3.table_name].clustering_order) {
                  dbSchema.materialized_views[_row3.table_name].clustering_order = {};
                }

                dbSchema.materialized_views[_row3.table_name].key[_row3.position + 1] = _row3.column_name;
                if (_row3.clustering_order && _row3.clustering_order.toLowerCase() === 'desc') {
                  dbSchema.materialized_views[_row3.table_name].clustering_order[_row3.column_name] = 'DESC';
                } else {
                  dbSchema.materialized_views[_row3.table_name].clustering_order[_row3.column_name] = 'ASC';
                }
              }
            }

            callback(null, dbSchema);
          });
        } else {
          callback(null, dbSchema);
        }
      });
    });
  });
};

BaseModel._execute_table_query = function f(query, params, options, callback) {
  if (arguments.length === 3) {
    callback = options;
    options = {};
  }

  var defaults = {
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  var doExecuteQuery = function f1(doquery, docallback) {
    this.execute_query(doquery, params, options, docallback);
  }.bind(this, query);

  if (this.is_table_ready()) {
    doExecuteQuery(callback);
  } else {
    this.init(function (err) {
      if (err) {
        callback(err);
        return;
      }
      doExecuteQuery(callback);
    });
  }
};

BaseModel._get_db_value_expression = function f(fieldname, fieldvalue) {
  var _this6 = this;

  if (fieldvalue == null || fieldvalue === cql.types.unset) {
    return { query_segment: '?', parameter: fieldvalue };
  }

  if (_.isPlainObject(fieldvalue) && fieldvalue.$db_function) {
    return fieldvalue.$db_function;
  }

  var fieldtype = schemer.get_field_type(this._properties.schema, fieldname);
  var validators = this._get_validators(fieldname);

  if (fieldvalue instanceof Array && fieldtype !== 'list' && fieldtype !== 'set' && fieldtype !== 'frozen') {
    var val = fieldvalue.map(function (v) {
      var dbVal = _this6._get_db_value_expression(fieldname, v);

      if (_.isPlainObject(dbVal) && dbVal.query_segment) return dbVal.parameter;
      return dbVal;
    });

    return { query_segment: '?', parameter: val };
  }

  var validationMessage = this._validate(validators, fieldvalue);
  if (validationMessage !== true) {
    throw buildError('model.validator.invalidvalue', validationMessage(fieldvalue, fieldname, fieldtype));
  }

  if (fieldtype === 'counter') {
    var counterQuerySegment = util.format('"%s"', fieldname);
    if (fieldvalue >= 0) counterQuerySegment += ' + ?';else counterQuerySegment += ' - ?';
    fieldvalue = Math.abs(fieldvalue);
    return { query_segment: counterQuerySegment, parameter: fieldvalue };
  }

  return { query_segment: '?', parameter: fieldvalue };
};

BaseModel._create_where_clause = function f(queryObject) {
  var _this7 = this;

  var queryRelations = [];
  var queryParams = [];

  Object.keys(queryObject).forEach(function (k) {
    if (k.indexOf('$') === 0) {
      // search queries based on lucene index or solr
      // escape all single quotes for queries in cassandra
      if (k === '$expr') {
        if (typeof queryObject[k].index === 'string' && typeof queryObject[k].query === 'string') {
          queryRelations.push(util.format("expr(%s,'%s')", queryObject[k].index, queryObject[k].query.replace(/'/g, "''")));
        } else {
          throw buildError('model.find.invalidexpr');
        }
      } else if (k === '$solr_query') {
        if (typeof queryObject[k] === 'string') {
          queryRelations.push(util.format("solr_query='%s'", queryObject[k].replace(/'/g, "''")));
        } else {
          throw buildError('model.find.invalidsolrquery');
        }
      }
      return;
    }

    var whereObject = queryObject[k];
    // Array of operators
    if (!(whereObject instanceof Array)) whereObject = [whereObject];

    for (var fk = 0; fk < whereObject.length; fk++) {
      var fieldRelation = whereObject[fk];

      var cqlOperators = {
        $eq: '=',
        $gt: '>',
        $lt: '<',
        $gte: '>=',
        $lte: '<=',
        $in: 'IN',
        $like: 'LIKE',
        $token: 'token',
        $contains: 'CONTAINS',
        $contains_key: 'CONTAINS KEY'
      };

      if (_.isPlainObject(fieldRelation)) {
        var validKeys = Object.keys(cqlOperators);
        var fieldRelationKeys = Object.keys(fieldRelation);
        for (var i = 0; i < fieldRelationKeys.length; i++) {
          if (validKeys.indexOf(fieldRelationKeys[i]) < 0) {
            // field relation key invalid
            fieldRelation = { $eq: fieldRelation };
            break;
          }
        }
      } else {
        fieldRelation = { $eq: fieldRelation };
      }

      var relKeys = Object.keys(fieldRelation);
      for (var rk = 0; rk < relKeys.length; rk++) {
        var firstKey = relKeys[rk];
        var firstValue = fieldRelation[firstKey];
        if (firstKey.toLowerCase() in cqlOperators) {
          firstKey = firstKey.toLowerCase();
          var op = cqlOperators[firstKey];

          if (firstKey === '$in' && !(firstValue instanceof Array)) throw buildError('model.find.invalidinop');
          if (firstKey === '$token' && !(firstValue instanceof Object)) throw buildError('model.find.invalidtoken');

          var whereTemplate = '"%s" %s %s';
          if (firstKey === '$token') {
            whereTemplate = 'token("%s") %s token(%s)';

            var tokenRelKeys = Object.keys(firstValue);
            for (var tokenRK = 0; tokenRK < tokenRelKeys.length; tokenRK++) {
              var tokenFirstKey = tokenRelKeys[tokenRK];
              var tokenFirstValue = firstValue[tokenFirstKey];
              tokenFirstKey = tokenFirstKey.toLowerCase();
              if (tokenFirstKey in cqlOperators && tokenFirstKey !== '$token' && tokenFirstKey !== '$in') {
                op = cqlOperators[tokenFirstKey];
              } else {
                throw buildError('model.find.invalidtokenop', tokenFirstKey);
              }

              if (tokenFirstValue instanceof Array) {
                var tokenKeys = k.split(',');
                for (var tokenIndex = 0; tokenIndex < tokenFirstValue.length; tokenIndex++) {
                  tokenKeys[tokenIndex] = tokenKeys[tokenIndex].trim();
                  var dbVal = _this7._get_db_value_expression(tokenKeys[tokenIndex], tokenFirstValue[tokenIndex]);
                  if (_.isPlainObject(dbVal) && dbVal.query_segment) {
                    tokenFirstValue[tokenIndex] = dbVal.query_segment;
                    queryParams.push(dbVal.parameter);
                  } else {
                    tokenFirstValue[tokenIndex] = dbVal;
                  }
                }
                queryRelations.push(util.format(whereTemplate, tokenKeys.join('","'), op, tokenFirstValue.toString()));
              } else {
                var _dbVal = _this7._get_db_value_expression(k, tokenFirstValue);
                if (_.isPlainObject(_dbVal) && _dbVal.query_segment) {
                  queryRelations.push(util.format(whereTemplate, k, op, _dbVal.query_segment));
                  queryParams.push(_dbVal.parameter);
                } else {
                  queryRelations.push(util.format(whereTemplate, k, op, _dbVal));
                }
              }
            }
          } else if (firstKey === '$contains') {
            var fieldtype1 = schemer.get_field_type(_this7._properties.schema, k);
            if (['map', 'list', 'set', 'frozen'].indexOf(fieldtype1) >= 0) {
              if (fieldtype1 === 'map' && _.isPlainObject(firstValue) && Object.keys(firstValue).length === 1) {
                queryRelations.push(util.format('"%s"[%s] %s %s', k, '?', '=', '?'));
                queryParams.push(Object.keys(firstValue)[0]);
                queryParams.push(firstValue[Object.keys(firstValue)[0]]);
              } else {
                queryRelations.push(util.format(whereTemplate, k, op, '?'));
                queryParams.push(firstValue);
              }
            } else {
              throw buildError('model.find.invalidcontainsop');
            }
          } else if (firstKey === '$contains_key') {
            var fieldtype2 = schemer.get_field_type(_this7._properties.schema, k);
            if (['map'].indexOf(fieldtype2) >= 0) {
              queryRelations.push(util.format(whereTemplate, k, op, '?'));
              queryParams.push(firstValue);
            } else {
              throw buildError('model.find.invalidcontainskeyop');
            }
          } else {
            var _dbVal2 = _this7._get_db_value_expression(k, firstValue);
            if (_.isPlainObject(_dbVal2) && _dbVal2.query_segment) {
              queryRelations.push(util.format(whereTemplate, k, op, _dbVal2.query_segment));
              queryParams.push(_dbVal2.parameter);
            } else {
              queryRelations.push(util.format(whereTemplate, k, op, _dbVal2));
            }
          }
        } else {
          throw buildError('model.find.invalidop', firstKey);
        }
      }
    }
  });

  return {
    query: queryRelations.length > 0 ? util.format('WHERE %s', queryRelations.join(' AND ')) : '',
    params: queryParams
  };
};

BaseModel._create_find_query = function f(queryObject, options) {
  var orderKeys = [];
  var limit = null;

  Object.keys(queryObject).forEach(function (k) {
    var queryItem = queryObject[k];
    if (k.toLowerCase() === '$orderby') {
      if (!(queryItem instanceof Object)) {
        throw buildError('model.find.invalidorder');
      }
      var orderItemKeys = Object.keys(queryItem);

      for (var i = 0; i < orderItemKeys.length; i++) {
        var cqlOrderDirection = { $asc: 'ASC', $desc: 'DESC' };
        if (orderItemKeys[i].toLowerCase() in cqlOrderDirection) {
          var orderFields = queryItem[orderItemKeys[i]];

          if (!(orderFields instanceof Array)) orderFields = [orderFields];

          for (var j = 0; j < orderFields.length; j++) {
            orderKeys.push(util.format('"%s" %s', orderFields[j], cqlOrderDirection[orderItemKeys[i]]));
          }
        } else {
          throw buildError('model.find.invalidordertype', orderItemKeys[i]);
        }
      }
    } else if (k.toLowerCase() === '$limit') {
      if (typeof queryItem !== 'number') throw buildError('model.find.limittype');
      limit = queryItem;
    }
  });

  var whereClause = this._create_where_clause(queryObject);

  var select = '*';
  if (options.select && _.isArray(options.select) && options.select.length > 0) {
    var selectArray = [];
    for (var i = 0; i < options.select.length; i++) {
      // separate the aggregate function and the column name if select is an aggregate function
      var selection = options.select[i].split(/[( )]/g).filter(function (e) {
        return e;
      });
      if (selection.length === 1) {
        selectArray.push(util.format('"%s"', selection[0]));
      } else if (selection.length === 2 || selection.length === 4) {
        var functionClause = util.format('%s("%s")', selection[0], selection[1]);
        if (selection[2]) functionClause += util.format(' %s', selection[2]);
        if (selection[3]) functionClause += util.format(' %s', selection[3]);

        selectArray.push(functionClause);
      } else if (selection.length === 3) {
        selectArray.push(util.format('"%s" %s %s', selection[0], selection[1], selection[2]));
      } else {
        selectArray.push('*');
      }
    }
    select = selectArray.join(',');
  }

  var query = util.format('SELECT %s %s FROM "%s" %s %s %s', options.distinct ? 'DISTINCT' : '', select, options.materialized_view ? options.materialized_view : this._properties.table_name, whereClause.query, orderKeys.length ? util.format('ORDER BY %s', orderKeys.join(', ')) : ' ', limit ? util.format('LIMIT %s', limit) : ' ');

  if (options.allow_filtering) query += ' ALLOW FILTERING;';else query += ';';

  return { query: query, params: whereClause.params };
};

BaseModel.get_table_name = function f() {
  return this._properties.table_name;
};

BaseModel.is_table_ready = function f() {
  return this._ready === true;
};

BaseModel.init = function f(options, callback) {
  if (!callback) {
    callback = options;
    options = undefined;
  }

  this._ready = true;
  callback();
};

BaseModel.syncDefinition = function f(callback) {
  var _this8 = this;

  var afterCreate = function afterCreate(err, result) {
    if (err) callback(err);else {
      _this8._ready = true;
      callback(null, result);
    }
  };

  this._create_table(afterCreate);
};

BaseModel.execute_query = function f(query, params, options, callback) {
  var _this9 = this;

  if (arguments.length === 3) {
    callback = options;
    options = {};
  }

  var defaults = {
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  this._ensure_connected(function (err) {
    if (err) {
      callback(err);
      return;
    }
    debug('executing query: %s with params: %j', query, params);
    _this9._properties.cql.execute(query, params, options, function (err1, result) {
      if (err1 && err1.code === 8704) {
        _this9._execute_definition_query(query, params, callback);
      } else {
        callback(err1, result);
      }
    });
  });
};

BaseModel.execute_eachRow = function f(query, params, options, onReadable, callback) {
  var _this10 = this;

  this._ensure_connected(function (err) {
    if (err) {
      callback(err);
      return;
    }
    debug('executing eachRow query: %s with params: %j', query, params);
    _this10._properties.cql.eachRow(query, params, options, onReadable, callback);
  });
};

BaseModel._execute_table_eachRow = function f(query, params, options, onReadable, callback) {
  var _this11 = this;

  if (this.is_table_ready()) {
    this.execute_eachRow(query, params, options, onReadable, callback);
  } else {
    this.init(function (err) {
      if (err) {
        callback(err);
        return;
      }
      _this11.execute_eachRow(query, params, options, onReadable, callback);
    });
  }
};

BaseModel.eachRow = function f(queryObject, options, onReadable, callback) {
  var _this12 = this;

  if (arguments.length === 3) {
    var cb = onReadable;
    onReadable = options;
    callback = cb;
    options = {};
  }
  if (typeof onReadable !== 'function') {
    throw buildError('model.find.eachrowerror', 'no valid onReadable function was provided');
  }
  if (typeof callback !== 'function') {
    throw buildError('model.find.cberror');
  }

  var defaults = {
    raw: false,
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  options.return_query = true;
  var selectQuery = this.find(queryObject, options);

  var queryOptions = { prepare: options.prepare };
  if (options.consistency) queryOptions.consistency = options.consistency;
  if (options.fetchSize) queryOptions.fetchSize = options.fetchSize;
  if (options.autoPage) queryOptions.autoPage = options.autoPage;
  if (options.hints) queryOptions.hints = options.hints;
  if (options.pageState) queryOptions.pageState = options.pageState;
  if (options.retry) queryOptions.retry = options.retry;
  if (options.serialConsistency) queryOptions.serialConsistency = options.serialConsistency;

  this._execute_table_eachRow(selectQuery.query, selectQuery.params, queryOptions, function (n, row) {
    if (!options.raw) {
      var ModelConstructor = _this12._properties.get_constructor();
      row = new ModelConstructor(row);
      row._modified = {};
    }
    onReadable(n, row);
  }, function (err, result) {
    if (err) {
      callback(buildError('model.find.dberror', err));
      return;
    }
    callback(err, result);
  });
};

BaseModel.execute_stream = function f(query, params, options, onReadable, callback) {
  var _this13 = this;

  this._ensure_connected(function (err) {
    if (err) {
      callback(err);
      return;
    }
    debug('executing stream query: %s with params: %j', query, params);
    _this13._properties.cql.stream(query, params, options).on('readable', onReadable).on('end', callback);
  });
};

BaseModel._execute_table_stream = function f(query, params, options, onReadable, callback) {
  var _this14 = this;

  if (this.is_table_ready()) {
    this.execute_stream(query, params, options, onReadable, callback);
  } else {
    this.init(function (err) {
      if (err) {
        callback(err);
        return;
      }
      _this14.execute_stream(query, params, options, onReadable, callback);
    });
  }
};

BaseModel.stream = function f(queryObject, options, onReadable, callback) {
  if (arguments.length === 3) {
    var cb = onReadable;
    onReadable = options;
    callback = cb;
    options = {};
  }

  if (typeof onReadable !== 'function') {
    throw buildError('model.find.streamerror', 'no valid onReadable function was provided');
  }
  if (typeof callback !== 'function') {
    throw buildError('model.find.cberror');
  }

  var defaults = {
    raw: false,
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  options.return_query = true;
  var selectQuery = this.find(queryObject, options);

  var queryOptions = { prepare: options.prepare };
  if (options.consistency) queryOptions.consistency = options.consistency;
  if (options.fetchSize) queryOptions.fetchSize = options.fetchSize;
  if (options.autoPage) queryOptions.autoPage = options.autoPage;
  if (options.hints) queryOptions.hints = options.hints;
  if (options.pageState) queryOptions.pageState = options.pageState;
  if (options.retry) queryOptions.retry = options.retry;
  if (options.serialConsistency) queryOptions.serialConsistency = options.serialConsistency;

  var self = this;

  this._execute_table_stream(selectQuery.query, selectQuery.params, queryOptions, function f1() {
    var reader = this;
    reader.readRow = function () {
      var row = reader.read();
      if (!row) return row;
      if (!options.raw) {
        var ModelConstructor = self._properties.get_constructor();
        var o = new ModelConstructor(row);
        o._modified = {};
        return o;
      }
      return row;
    };
    onReadable(reader);
  }, function (err) {
    if (err) {
      callback(buildError('model.find.dberror', err));
      return;
    }
    callback();
  });
};

BaseModel.find = function f(queryObject, options, callback) {
  var _this15 = this;

  if (arguments.length === 2 && typeof options === 'function') {
    callback = options;
    options = {};
  }
  if (typeof callback !== 'function' && !options.return_query) {
    throw buildError('model.find.cberror');
  }

  var defaults = {
    raw: false,
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  // set raw true if select is used,
  // because casting to model instances may lead to problems
  if (options.select) options.raw = true;

  var queryParams = [];

  var query = void 0;
  try {
    var findQuery = this._create_find_query(queryObject, options);
    query = findQuery.query;
    queryParams = queryParams.concat(findQuery.params);
  } catch (e) {
    if (typeof callback === 'function') {
      callback(e);
      return {};
    }
    throw e;
  }

  if (options.return_query) {
    return { query: query, params: queryParams };
  }

  var queryOptions = { prepare: options.prepare };
  if (options.consistency) queryOptions.consistency = options.consistency;
  if (options.fetchSize) queryOptions.fetchSize = options.fetchSize;
  if (options.autoPage) queryOptions.autoPage = options.autoPage;
  if (options.hints) queryOptions.hints = options.hints;
  if (options.pageState) queryOptions.pageState = options.pageState;
  if (options.retry) queryOptions.retry = options.retry;
  if (options.serialConsistency) queryOptions.serialConsistency = options.serialConsistency;

  this._execute_table_query(query, queryParams, queryOptions, function (err, results) {
    if (err) {
      callback(buildError('model.find.dberror', err));
      return;
    }
    if (!options.raw) {
      var ModelConstructor = _this15._properties.get_constructor();
      results = results.rows.map(function (res) {
        delete res.columns;
        var o = new ModelConstructor(res);
        o._modified = {};
        return o;
      });
      callback(null, results);
    } else {
      results = results.rows.map(function (res) {
        delete res.columns;
        return res;
      });
      callback(null, results);
    }
  });

  return {};
};

BaseModel.findOne = function f(queryObject, options, callback) {
  if (arguments.length === 2 && typeof options === 'function') {
    callback = options;
    options = {};
  }
  if (typeof callback !== 'function' && !options.return_query) {
    throw buildError('model.find.cberror');
  }

  queryObject.$limit = 1;

  return this.find(queryObject, options, function (err, results) {
    if (err) {
      callback(err);
      return;
    }
    if (results.length > 0) {
      callback(null, results[0]);
      return;
    }
    callback();
  });
};

BaseModel.update = function f(queryObject, updateValues, options, callback) {
  var _this16 = this;

  if (arguments.length === 3 && typeof options === 'function') {
    callback = options;
    options = {};
  }

  var schema = this._properties.schema;

  var defaults = {
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  var queryParams = [];

  var updateClauseArray = [];

  var errorHappened = Object.keys(updateValues).some(function (key) {
    if (schema.fields[key] === undefined || schema.fields[key].virtual) return false;

    // check field value
    var fieldtype = schemer.get_field_type(schema, key);
    var fieldvalue = updateValues[key];

    if (fieldvalue === undefined) {
      fieldvalue = _this16._get_default_value(key);
      if (fieldvalue === undefined) {
        if (schema.key.indexOf(key) >= 0 || schema.key[0].indexOf(key) >= 0) {
          if (typeof callback === 'function') {
            callback(buildError('model.update.unsetkey', key));
            return true;
          }
          throw buildError('model.update.unsetkey', key);
        } else if (schema.fields[key].rule && schema.fields[key].rule.required) {
          if (typeof callback === 'function') {
            callback(buildError('model.update.unsetrequired', key));
            return true;
          }
          throw buildError('model.update.unsetrequired', key);
        } else return false;
      } else if (!schema.fields[key].rule || !schema.fields[key].rule.ignore_default) {
        // did set a default value, ignore default is not set
        if (_this16.validate(key, fieldvalue) !== true) {
          if (typeof callback === 'function') {
            callback(buildError('model.update.invaliddefaultvalue', fieldvalue, key, fieldtype));
            return true;
          }
          throw buildError('model.update.invaliddefaultvalue', fieldvalue, key, fieldtype);
        }
      }
    }

    if (fieldvalue === null || fieldvalue === cql.types.unset) {
      if (schema.key.indexOf(key) >= 0 || schema.key[0].indexOf(key) >= 0) {
        if (typeof callback === 'function') {
          callback(buildError('model.update.unsetkey', key));
          return true;
        }
        throw buildError('model.update.unsetkey', key);
      } else if (schema.fields[key].rule && schema.fields[key].rule.required) {
        if (typeof callback === 'function') {
          callback(buildError('model.update.unsetrequired', key));
          return true;
        }
        throw buildError('model.update.unsetrequired', key);
      }
    }

    try {
      var $add = false;
      var $append = false;
      var $prepend = false;
      var $replace = false;
      var $remove = false;
      if (_.isPlainObject(fieldvalue)) {
        if (fieldvalue.$add) {
          fieldvalue = fieldvalue.$add;
          $add = true;
        } else if (fieldvalue.$append) {
          fieldvalue = fieldvalue.$append;
          $append = true;
        } else if (fieldvalue.$prepend) {
          fieldvalue = fieldvalue.$prepend;
          $prepend = true;
        } else if (fieldvalue.$replace) {
          fieldvalue = fieldvalue.$replace;
          $replace = true;
        } else if (fieldvalue.$remove) {
          fieldvalue = fieldvalue.$remove;
          $remove = true;
        }
      }

      var dbVal = _this16._get_db_value_expression(key, fieldvalue);

      if (_.isPlainObject(dbVal) && dbVal.query_segment) {
        if (['map', 'list', 'set'].indexOf(fieldtype) > -1) {
          if ($add || $append) {
            dbVal.query_segment = util.format('"%s" + %s', key, dbVal.query_segment);
          } else if ($prepend) {
            if (fieldtype === 'list') {
              dbVal.query_segment = util.format('%s + "%s"', dbVal.query_segment, key);
            } else {
              throw buildError('model.update.invalidprependop', util.format('%s datatypes does not support $prepend, use $add instead', fieldtype));
            }
          } else if ($remove) {
            dbVal.query_segment = util.format('"%s" - %s', key, dbVal.query_segment);
            if (fieldtype === 'map') dbVal.parameter = Object.keys(dbVal.parameter);
          }
        }

        if ($replace) {
          if (fieldtype === 'map') {
            updateClauseArray.push(util.format('"%s"[?]=%s', key, dbVal.query_segment));
            var replaceKeys = Object.keys(dbVal.parameter);
            var replaceValues = _.values(dbVal.parameter);
            if (replaceKeys.length === 1) {
              queryParams.push(replaceKeys[0]);
              queryParams.push(replaceValues[0]);
            } else {
              throw buildError('model.update.invalidreplaceop', '$replace in map does not support more than one item');
            }
          } else if (fieldtype === 'list') {
            updateClauseArray.push(util.format('"%s"[?]=%s', key, dbVal.query_segment));
            if (dbVal.parameter.length === 2) {
              queryParams.push(dbVal.parameter[0]);
              queryParams.push(dbVal.parameter[1]);
            } else {
              throw buildError('model.update.invalidreplaceop', '$replace in list should have exactly 2 items, first one as the index and the second one as the value');
            }
          } else {
            throw buildError('model.update.invalidreplaceop', util.format('%s datatypes does not support $replace', fieldtype));
          }
        } else {
          updateClauseArray.push(util.format('"%s"=%s', key, dbVal.query_segment));
          queryParams.push(dbVal.parameter);
        }
      } else {
        updateClauseArray.push(util.format('"%s"=%s', key, dbVal));
      }
    } catch (e) {
      if (typeof callback === 'function') {
        callback(e);
        return true;
      }
      throw e;
    }
    return false;
  });

  if (errorHappened) return {};

  var query = 'UPDATE "%s"';
  var where = '';
  if (options.ttl) query += util.format(' USING TTL %s', options.ttl);
  query += ' SET %s %s';
  try {
    var whereClause = this._create_where_clause(queryObject);
    where = whereClause.query;
    queryParams = queryParams.concat(whereClause.params);
  } catch (e) {
    if (typeof callback === 'function') {
      callback(e);
      return {};
    }
    throw e;
  }
  query = util.format(query, this._properties.table_name, updateClauseArray.join(', '), where);

  if (options.conditions) {
    var updateConditionsArray = [];

    errorHappened = Object.keys(options.conditions).some(function (key) {
      try {
        var dbVal = _this16._get_db_value_expression(key, options.conditions[key]);
        if (_.isPlainObject(dbVal) && dbVal.query_segment) {
          updateConditionsArray.push(util.format('"%s"=%s', key, dbVal.query_segment));
          queryParams.push(dbVal.parameter);
        } else {
          updateConditionsArray.push(util.format('"%s"=%s', key, dbVal));
        }
      } catch (e) {
        if (typeof callback === 'function') {
          callback(e);
          return true;
        }
        throw e;
      }
      return false;
    });

    if (errorHappened) return {};

    query += util.format(' IF %s', updateConditionsArray.join(' AND '));
  }
  if (options.if_exists) query += ' IF EXISTS';

  query += ';';

  // set dummy hook function if not present in schema
  if (typeof schema.before_update !== 'function') {
    schema.before_update = function f1(queryObj, updateVal, optionsObj, next) {
      next();
    };
  }

  if (typeof schema.after_update !== 'function') {
    schema.after_update = function f1(queryObj, updateVal, optionsObj, next) {
      next();
    };
  }

  function hookRunner(fn, errorCode) {
    return function (hookCallback) {
      fn(queryObject, updateValues, options, function (error) {
        if (error) {
          hookCallback(buildError(errorCode, error));
          return;
        }
        hookCallback();
      });
    };
  }

  if (options.return_query) {
    return {
      query: query,
      params: queryParams,
      before_hook: hookRunner(schema.before_update, 'model.update.before.error'),
      after_hook: hookRunner(schema.after_update, 'model.update.after.error')
    };
  }

  var queryOptions = { prepare: options.prepare };
  if (options.consistency) queryOptions.consistency = options.consistency;
  if (options.fetchSize) queryOptions.fetchSize = options.fetchSize;
  if (options.autoPage) queryOptions.autoPage = options.autoPage;
  if (options.hints) queryOptions.hints = options.hints;
  if (options.pageState) queryOptions.pageState = options.pageState;
  if (options.retry) queryOptions.retry = options.retry;
  if (options.serialConsistency) queryOptions.serialConsistency = options.serialConsistency;

  schema.before_update(queryObject, updateValues, options, function (error) {
    if (error) {
      if (typeof callback === 'function') {
        callback(buildError('model.update.before.error', error));
        return;
      }
      throw buildError('model.update.before.error', error);
    }

    _this16._execute_table_query(query, queryParams, queryOptions, function (err, results) {
      if (typeof callback === 'function') {
        if (err) {
          callback(buildError('model.update.dberror', err));
          return;
        }
        schema.after_update(queryObject, updateValues, options, function (error1) {
          if (error1) {
            callback(buildError('model.update.after.error', error1));
            return;
          }
          callback(null, results);
        });
      } else if (err) {
        throw buildError('model.update.dberror', err);
      } else {
        schema.after_update(queryObject, updateValues, options, function (error1) {
          if (error1) {
            throw buildError('model.update.after.error', error1);
          }
        });
      }
    });
  });

  return {};
};

BaseModel.delete = function f(queryObject, options, callback) {
  var _this17 = this;

  if (arguments.length === 2 && typeof options === 'function') {
    callback = options;
    options = {};
  }

  var schema = this._properties.schema;

  var defaults = {
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  var queryParams = [];

  var query = 'DELETE FROM "%s" %s;';
  var where = '';
  try {
    var whereClause = this._create_where_clause(queryObject);
    where = whereClause.query;
    queryParams = queryParams.concat(whereClause.params);
  } catch (e) {
    if (typeof callback === 'function') {
      callback(e);
      return {};
    }
    throw e;
  }

  query = util.format(query, this._properties.table_name, where);

  // set dummy hook function if not present in schema
  if (typeof schema.before_delete !== 'function') {
    schema.before_delete = function f1(queryObj, optionsObj, next) {
      next();
    };
  }

  if (typeof schema.after_delete !== 'function') {
    schema.after_delete = function f1(queryObj, optionsObj, next) {
      next();
    };
  }

  if (options.return_query) {
    return {
      query: query,
      params: queryParams,
      before_hook: function before_hook(hookCallback) {
        schema.before_delete(queryObject, options, function (error) {
          if (error) {
            hookCallback(buildError('model.delete.before.error', error));
            return;
          }
          hookCallback();
        });
      },
      after_hook: function after_hook(hookCallback) {
        schema.after_delete(queryObject, options, function (error) {
          if (error) {
            hookCallback(buildError('model.delete.after.error', error));
            return;
          }
          hookCallback();
        });
      }
    };
  }

  var queryOptions = { prepare: options.prepare };
  if (options.consistency) queryOptions.consistency = options.consistency;
  if (options.fetchSize) queryOptions.fetchSize = options.fetchSize;
  if (options.autoPage) queryOptions.autoPage = options.autoPage;
  if (options.hints) queryOptions.hints = options.hints;
  if (options.pageState) queryOptions.pageState = options.pageState;
  if (options.retry) queryOptions.retry = options.retry;
  if (options.serialConsistency) queryOptions.serialConsistency = options.serialConsistency;

  schema.before_delete(queryObject, options, function (error) {
    if (error) {
      if (typeof callback === 'function') {
        callback(buildError('model.delete.before.error', error));
        return;
      }
      throw buildError('model.delete.before.error', error);
    }

    _this17._execute_table_query(query, queryParams, queryOptions, function (err, results) {
      if (typeof callback === 'function') {
        if (err) {
          callback(buildError('model.delete.dberror', err));
          return;
        }
        schema.after_delete(queryObject, options, function (error1) {
          if (error1) {
            callback(buildError('model.delete.after.error', error1));
            return;
          }
          callback(null, results);
        });
      } else if (err) {
        throw buildError('model.delete.dberror', err);
      } else {
        schema.after_delete(queryObject, options, function (error1) {
          if (error1) {
            throw buildError('model.delete.after.error', error1);
          }
        });
      }
    });
  });

  return {};
};

BaseModel.truncate = function f(callback) {
  var properties = this._properties;
  var tableName = properties.table_name;

  var query = util.format('TRUNCATE TABLE "%s";', tableName);
  this._execute_definition_query(query, [], callback);
};

BaseModel.drop_mviews = function f(mviews, callback) {
  var _this18 = this;

  async.each(mviews, function (view, viewCallback) {
    var query = util.format('DROP MATERIALIZED VIEW IF EXISTS "%s";', view);
    _this18._execute_definition_query(query, [], viewCallback);
  }, function (err) {
    if (err) callback(err);else callback();
  });
};

BaseModel.drop_indexes = function f(indexes, callback) {
  var _this19 = this;

  async.each(indexes, function (index, indexCallback) {
    var query = util.format('DROP INDEX IF EXISTS "%s";', index);
    _this19._execute_definition_query(query, [], indexCallback);
  }, function (err) {
    if (err) callback(err);else callback();
  });
};

BaseModel.alter_table = function f(operation, fieldname, type, callback) {
  var properties = this._properties;
  var tableName = properties.table_name;

  if (operation === 'ALTER') type = util.format('TYPE %s', type);else if (operation === 'DROP') type = '';

  var query = util.format('ALTER TABLE "%s" %s "%s" %s;', tableName, operation, fieldname, type);
  this._execute_definition_query(query, [], callback);
};

BaseModel.drop_table = function f(callback) {
  var properties = this._properties;
  var tableName = properties.table_name;

  var query = util.format('DROP TABLE IF EXISTS "%s";', tableName);
  this._execute_definition_query(query, [], callback);
};

BaseModel.prototype._get_data_types = function f() {
  return cql.types;
};

BaseModel.prototype._get_default_value = function f(fieldname) {
  var properties = this.constructor._properties;
  var schema = properties.schema;

  if (_.isPlainObject(schema.fields[fieldname]) && schema.fields[fieldname].default !== undefined) {
    if (typeof schema.fields[fieldname].default === 'function') {
      return schema.fields[fieldname].default.call(this);
    }
    return schema.fields[fieldname].default;
  }
  return undefined;
};

BaseModel.prototype.validate = function f(propertyName, value) {
  value = value || this[propertyName];
  this._validators = this._validators || {};
  return this.constructor._validate(this._validators[propertyName] || [], value);
};

BaseModel.prototype.save = function fn(options, callback) {
  var _this20 = this;

  if (arguments.length === 1 && typeof options === 'function') {
    callback = options;
    options = {};
  }

  var identifiers = [];
  var values = [];
  var properties = this.constructor._properties;
  var schema = properties.schema;

  var defaults = {
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  var queryParams = [];

  var errorHappened = Object.keys(schema.fields).some(function (f) {
    if (schema.fields[f].virtual) return false;

    // check field value
    var fieldtype = schemer.get_field_type(schema, f);
    var fieldvalue = _this20[f];

    if (fieldvalue === undefined) {
      fieldvalue = _this20._get_default_value(f);
      if (fieldvalue === undefined) {
        if (schema.key.indexOf(f) >= 0 || schema.key[0].indexOf(f) >= 0) {
          if (typeof callback === 'function') {
            callback(buildError('model.save.unsetkey', f));
            return true;
          }
          throw buildError('model.save.unsetkey', f);
        } else if (schema.fields[f].rule && schema.fields[f].rule.required) {
          if (typeof callback === 'function') {
            callback(buildError('model.save.unsetrequired', f));
            return true;
          }
          throw buildError('model.save.unsetrequired', f);
        } else return false;
      } else if (!schema.fields[f].rule || !schema.fields[f].rule.ignore_default) {
        // did set a default value, ignore default is not set
        if (_this20.validate(f, fieldvalue) !== true) {
          if (typeof callback === 'function') {
            callback(buildError('model.save.invaliddefaultvalue', fieldvalue, f, fieldtype));
            return true;
          }
          throw buildError('model.save.invaliddefaultvalue', fieldvalue, f, fieldtype);
        }
      }
    }

    if (fieldvalue === null || fieldvalue === cql.types.unset) {
      if (schema.key.indexOf(f) >= 0 || schema.key[0].indexOf(f) >= 0) {
        if (typeof callback === 'function') {
          callback(buildError('model.save.unsetkey', f));
          return true;
        }
        throw buildError('model.save.unsetkey', f);
      } else if (schema.fields[f].rule && schema.fields[f].rule.required) {
        if (typeof callback === 'function') {
          callback(buildError('model.save.unsetrequired', f));
          return true;
        }
        throw buildError('model.save.unsetrequired', f);
      }
    }

    identifiers.push(util.format('"%s"', f));

    try {
      var dbVal = _this20.constructor._get_db_value_expression(f, fieldvalue);
      if (_.isPlainObject(dbVal) && dbVal.query_segment) {
        values.push(dbVal.query_segment);
        queryParams.push(dbVal.parameter);
      } else {
        values.push(dbVal);
      }
    } catch (e) {
      if (typeof callback === 'function') {
        callback(e);
        return true;
      }
      throw e;
    }
    return false;
  });

  if (errorHappened) return {};

  var query = util.format('INSERT INTO "%s" ( %s ) VALUES ( %s )', properties.table_name, identifiers.join(' , '), values.join(' , '));

  if (options.if_not_exist) query += ' IF NOT EXISTS';
  if (options.ttl) query += util.format(' USING TTL %s', options.ttl);

  query += ';';

  // set dummy hook function if not present in schema
  if (typeof schema.before_save !== 'function') {
    schema.before_save = function f(instance, option, next) {
      next();
    };
  }

  if (typeof schema.after_save !== 'function') {
    schema.after_save = function f(instance, option, next) {
      next();
    };
  }

  if (options.return_query) {
    return {
      query: query,
      params: queryParams,
      before_hook: function before_hook(hookCallback) {
        schema.before_save(_this20, options, function (error) {
          if (error) {
            hookCallback(buildError('model.save.before.error', error));
            return;
          }
          hookCallback();
        });
      },
      after_hook: function after_hook(hookCallback) {
        schema.after_save(_this20, options, function (error) {
          if (error) {
            hookCallback(buildError('model.save.after.error', error));
            return;
          }
          hookCallback();
        });
      }
    };
  }

  var queryOptions = { prepare: options.prepare };
  if (options.consistency) queryOptions.consistency = options.consistency;
  if (options.fetchSize) queryOptions.fetchSize = options.fetchSize;
  if (options.autoPage) queryOptions.autoPage = options.autoPage;
  if (options.hints) queryOptions.hints = options.hints;
  if (options.pageState) queryOptions.pageState = options.pageState;
  if (options.retry) queryOptions.retry = options.retry;
  if (options.serialConsistency) queryOptions.serialConsistency = options.serialConsistency;

  schema.before_save(this, options, function (error) {
    if (error) {
      if (typeof callback === 'function') {
        callback(buildError('model.save.before.error', error));
        return;
      }
      throw buildError('model.save.before.error', error);
    }

    _this20.constructor._execute_table_query(query, queryParams, queryOptions, function (err, result) {
      if (typeof callback === 'function') {
        if (err) {
          callback(buildError('model.save.dberror', err));
          return;
        }
        if (!options.if_not_exist || result.rows && result.rows[0] && result.rows[0]['[applied]']) {
          _this20._modified = {};
        }
        schema.after_save(_this20, options, function (error1) {
          if (error1) {
            callback(buildError('model.save.after.error', error1));
            return;
          }
          callback(null, result);
        });
      } else if (err) {
        throw buildError('model.save.dberror', err);
      } else {
        schema.after_save(_this20, options, function (error1) {
          if (error1) {
            throw buildError('model.save.after.error', error1);
          }
        });
      }
    });
  });

  return {};
};

BaseModel.prototype.delete = function f(options, callback) {
  if (arguments.length === 1 && typeof options === 'function') {
    callback = options;
    options = {};
  }

  var schema = this.constructor._properties.schema;
  var deleteQuery = {};

  for (var i = 0; i < schema.key.length; i++) {
    var fieldKey = schema.key[i];
    if (fieldKey instanceof Array) {
      for (var j = 0; j < fieldKey.length; j++) {
        deleteQuery[fieldKey[j]] = this[fieldKey[j]];
      }
    } else {
      deleteQuery[fieldKey] = this[fieldKey];
    }
  }

  return this.constructor.delete(deleteQuery, options, callback);
};

BaseModel.prototype.toJSON = function toJSON() {
  var _this21 = this;

  var object = {};
  var schema = this.constructor._properties.schema;

  Object.keys(schema.fields).forEach(function (field) {
    object[field] = _this21[field];
  });

  return object;
};

BaseModel.prototype.isModified = function isModified(propName) {
  if (propName) {
    return Object.prototype.hasOwnProperty.call(this._modified, propName);
  }
  return Object.keys(this._modified).length !== 0;
};

module.exports = BaseModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,