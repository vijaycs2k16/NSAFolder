'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var util = require('util');
var cql = require('dse-driver');
var async = require('async');
var _ = require('lodash');
var deepDiff = require('deep-diff').diff;
var readlineSync = require('readline-sync');
var objectHash = require('object-hash');
var debug = require('debug')('express-cassandra');

var buildError = require('./apollo_error.js');
var schemer = require('./apollo_schemer');

var TYPE_MAP = require('./cassandra_types');

var checkDBTableName = function checkDBTableName(obj) {
  return typeof obj === 'string' && /^[a-zA-Z]+[a-zA-Z0-9_]*/.test(obj);
};

var BaseModel = function f(instanceValues) {
  instanceValues = instanceValues || {};
  var fieldValues = {};
  var fields = this.constructor._properties.schema.fields;

  var defaultSetter = function f1(propName, newValue) {
    this[propName] = newValue;
  };

  var defaultGetter = function f1(propName) {
    return this[propName];
  };

  this._validators = {};

  for (var fieldsKeys = Object.keys(fields), i = 0, len = fieldsKeys.length; i < len; i++) {
    var propertyName = fieldsKeys[i];
    var field = fields[fieldsKeys[i]];

    this._validators[propertyName] = this.constructor._get_validators(propertyName);

    var setter = defaultSetter.bind(fieldValues, propertyName);
    var getter = defaultGetter.bind(fieldValues, propertyName);

    if (field.virtual && typeof field.virtual.set === 'function') {
      setter = field.virtual.set.bind(fieldValues);
    }

    if (field.virtual && typeof field.virtual.get === 'function') {
      getter = field.virtual.get.bind(fieldValues);
    }

    var descriptor = {
      enumerable: true,
      set: setter,
      get: getter
    };

    Object.defineProperty(this, propertyName, descriptor);
    if (!field.virtual) {
      this[propertyName] = instanceValues[propertyName];
    }
  }
};

BaseModel._properties = {
  name: null,
  schema: null
};

BaseModel._set_properties = function f(properties) {
  var schema = properties.schema;
  var tableName = schema.table_name || properties.name;

  if (!checkDBTableName(tableName)) {
    throw buildError('model.tablecreation.invalidname', tableName);
  }

  var qualifiedTableName = util.format('"%s"."%s"', properties.keyspace, tableName);

  this._properties = properties;
  this._properties.table_name = tableName;
  this._properties.qualified_table_name = qualifiedTableName;
};

BaseModel._validate = function f(validators, value) {
  if (value == null || _.isPlainObject(value) && value.$db_function) return true;

  for (var v = 0; v < validators.length; v++) {
    if (typeof validators[v].validator === 'function') {
      if (!validators[v].validator(value)) {
        return validators[v].message;
      }
    }
  }
  return true;
};

BaseModel._get_generic_validator_message = function f(value, propName, fieldtype) {
  return util.format('Invalid Value: "%s" for Field: %s (Type: %s)', value, propName, fieldtype);
};

BaseModel._format_validator_rule = function f(rule) {
  if (typeof rule.validator !== 'function') {
    throw buildError('model.validator.invalidrule', 'Rule validator must be a valid function');
  }
  if (!rule.message) {
    rule.message = this._get_generic_validator_message;
  } else if (typeof rule.message === 'string') {
    rule.message = function f1(message) {
      return util.format(message);
    }.bind(null, rule.message);
  } else if (typeof rule.message !== 'function') {
    throw buildError('model.validator.invalidrule', 'Invalid validator message, must be string or a function');
  }

  return rule;
};

BaseModel._get_validators = function f(fieldname) {
  var _this = this;

  var fieldtype = void 0;
  try {
    fieldtype = schemer.get_field_type(this._properties.schema, fieldname);
  } catch (e) {
    throw buildError('model.validator.invalidschema', e.message);
  }

  var validators = [];
  var typeFieldValidator = TYPE_MAP.generic_type_validator(fieldtype);

  if (typeFieldValidator) validators.push(typeFieldValidator);

  var field = this._properties.schema.fields[fieldname];
  if (typeof field.rule !== 'undefined') {
    if (typeof field.rule === 'function') {
      field.rule = {
        validator: field.rule,
        message: this._get_generic_validator_message
      };
      validators.push(field.rule);
    } else {
      if (!_.isPlainObject(field.rule)) {
        throw buildError('model.validator.invalidrule', 'Validation rule must be a function or an object');
      }
      if (field.rule.validator) {
        validators.push(this._format_validator_rule(field.rule));
      } else if (Array.isArray(field.rule.validators)) {
        field.rule.validators.forEach(function (fieldrule) {
          validators.push(_this._format_validator_rule(fieldrule));
        });
      }
    }
  }

  return validators;
};

BaseModel._ask_confirmation = function f(message) {
  var permission = 'y';
  if (!this._properties.disableTTYConfirmation) {
    permission = readlineSync.question(message);
  }
  return permission;
};

BaseModel._ensure_connected = function f(callback) {
  if (!this._properties.cql) {
    this._properties.connect(callback);
  } else {
    callback();
  }
};

BaseModel._execute_definition_query = function f(query, params, callback) {
  var _this2 = this;

  this._ensure_connected(function (err) {
    if (err) {
      callback(err);
      return;
    }
    debug('executing definition query: %s with params: %j', query, params);
    var properties = _this2._properties;
    var conn = properties.define_connection;
    conn.execute(query, params, { prepare: false, fetchSize: 0 }, callback);
  });
};

BaseModel._execute_batch = function f(queries, options, callback) {
  var _this3 = this;

  this._ensure_connected(function (err) {
    if (err) {
      callback(err);
      return;
    }
    debug('executing batch queries: %j', queries);
    _this3._properties.cql.batch(queries, options, callback);
  });
};

BaseModel.execute_batch = function f(queries, options, callback) {
  if (arguments.length === 2) {
    callback = options;
    options = {};
  }

  var defaults = {
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  this._execute_batch(queries, options, callback);
};

BaseModel.get_cql_client = function f(callback) {
  var _this4 = this;

  this._ensure_connected(function (err) {
    if (err) {
      callback(err);
      return;
    }
    callback(null, _this4._properties.cql);
  });
};

BaseModel._create_table = function f(callback) {
  var _this5 = this;

  var properties = this._properties;
  var tableName = properties.table_name;
  var modelSchema = properties.schema;
  var dropTableOnSchemaChange = properties.dropTableOnSchemaChange;
  var migration = properties.migration;

  // backwards compatible change, dropTableOnSchemaChange will work like migration: 'drop'
  if (!migration) {
    if (dropTableOnSchemaChange) migration = 'drop';else migration = 'safe';
  }
  // always safe migrate if NODE_ENV==='production'
  if (process.env.NODE_ENV === 'production') migration = 'safe';

  // check for existence of table on DB and if it matches this model's schema
  this._get_db_table_schema(function (err, dbSchema) {
    if (err) {
      callback(err);
      return;
    }

    var afterCustomIndex = function afterCustomIndex(err1) {
      if (err1) {
        callback(buildError('model.tablecreation.dbindexcreate', err1));
        return;
      }
      // materialized view creation
      if (modelSchema.materialized_views) {
        async.eachSeries(Object.keys(modelSchema.materialized_views), function (viewName, next) {
          var matViewQuery = _this5._create_materialized_view_query(tableName, viewName, modelSchema.materialized_views[viewName]);
          _this5._execute_definition_query(matViewQuery, [], function (err2, result) {
            if (err2) next(buildError('model.tablecreation.matviewcreate', err2));else next(null, result);
          });
        }, callback);
      } else callback();
    };

    var afterDBIndex = function afterDBIndex(err1) {
      if (err1) {
        callback(buildError('model.tablecreation.dbindexcreate', err1));
        return;
      }
      // custom index creation
      if (modelSchema.custom_indexes) {
        async.eachSeries(modelSchema.custom_indexes, function (idx, next) {
          _this5._execute_definition_query(_this5._create_custom_index_query(tableName, idx), [], function (err2, result) {
            if (err2) next(err2);else next(null, result);
          });
        }, afterCustomIndex);
      } else if (modelSchema.custom_index) {
        var customIndexQuery = _this5._create_custom_index_query(tableName, modelSchema.custom_index);
        _this5._execute_definition_query(customIndexQuery, [], function (err2, result) {
          if (err2) afterCustomIndex(err2);else afterCustomIndex(null, result);
        });
      } else afterCustomIndex();
    };

    var afterDBCreate = function afterDBCreate(err1) {
      if (err1) {
        callback(buildError('model.tablecreation.dbcreate', err1));
        return;
      }
      // index creation
      if (modelSchema.indexes instanceof Array) {
        async.eachSeries(modelSchema.indexes, function (idx, next) {
          _this5._execute_definition_query(_this5._create_index_query(tableName, idx), [], function (err2, result) {
            if (err2) next(err2);else next(null, result);
          });
        }, afterDBIndex);
      } else afterDBIndex();
    };

    if (dbSchema) {
      (function () {
        var normalizedModelSchema = void 0;
        var normalizedDBSchema = void 0;

        try {
          normalizedModelSchema = schemer.normalize_model_schema(modelSchema);
          normalizedDBSchema = schemer.normalize_model_schema(dbSchema);
        } catch (e) {
          throw buildError('model.validator.invalidschema', e.message);
        }

        if (_.isEqual(normalizedModelSchema, normalizedDBSchema)) {
          callback();
        } else {
          (function () {
            var dropRecreateTable = function dropRecreateTable() {
              var permission = _this5._ask_confirmation(util.format('Migration: model schema changed for table "%s", drop table & recreate? (data will be lost!) (y/n): ', tableName));
              if (permission.toLowerCase() === 'y') {
                if (normalizedDBSchema.materialized_views) {
                  var mviews = Object.keys(normalizedDBSchema.materialized_views);

                  _this5.drop_mviews(mviews, function (err1) {
                    if (err1) {
                      callback(buildError('model.tablecreation.matviewdrop', err1));
                      return;
                    }

                    _this5.drop_table(function (err2) {
                      if (err2) {
                        callback(buildError('model.tablecreation.dbdrop', err2));
                        return;
                      }
                      var createTableQuery = _this5._create_table_query(tableName, modelSchema);
                      _this5._execute_definition_query(createTableQuery, [], afterDBCreate);
                    });
                  });
                } else {
                  _this5.drop_table(function (err1) {
                    if (err1) {
                      callback(buildError('model.tablecreation.dbdrop', err1));
                      return;
                    }
                    var createTableQuery = _this5._create_table_query(tableName, modelSchema);
                    _this5._execute_definition_query(createTableQuery, [], afterDBCreate);
                  });
                }
              } else {
                callback(buildError('model.tablecreation.schemamismatch', tableName));
              }
            };

            var afterDBAlter = function afterDBAlter(err1) {
              if (err1) {
                if (err1.message !== 'break') callback(err1);
                return;
              }
              // it should create/drop indexes/custom_indexes/materialized_views that are added/removed in model schema
              // remove common indexes/custom_indexes/materialized_views from normalizedModelSchema and normalizedDBSchema
              // then drop all remaining indexes/custom_indexes/materialized_views from normalizedDBSchema
              // and add all remaining indexes/custom_indexes/materialized_views from normalizedModelSchema
              var addedIndexes = _.difference(normalizedModelSchema.indexes, normalizedDBSchema.indexes);
              var removedIndexes = _.difference(normalizedDBSchema.indexes, normalizedModelSchema.indexes);
              var removedIndexNames = [];
              removedIndexes.forEach(function (removedIndex) {
                removedIndexNames.push(dbSchema.index_names[removedIndex]);
              });

              var addedCustomIndexes = _.filter(normalizedModelSchema.custom_indexes, function (obj) {
                return !_.find(normalizedDBSchema.custom_indexes, obj);
              });
              var removedCustomIndexes = _.filter(normalizedDBSchema.custom_indexes, function (obj) {
                return !_.find(normalizedModelSchema.custom_indexes, obj);
              });
              removedCustomIndexes.forEach(function (removedIndex) {
                removedIndexNames.push(dbSchema.index_names[objectHash(removedIndex)]);
              });

              var addedMaterializedViews = _.filter(Object.keys(normalizedModelSchema.materialized_views), function (viewName) {
                return !_.find(normalizedDBSchema.materialized_views, normalizedModelSchema.materialized_views[viewName]);
              });
              var removedMaterializedViews = _.filter(Object.keys(normalizedDBSchema.materialized_views), function (viewName) {
                return !_.find(normalizedModelSchema.materialized_views, normalizedDBSchema.materialized_views[viewName]);
              });

              // remove altered materialized views
              if (removedMaterializedViews.length > 0) {
                var permission = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has removed materialized_views: %j, drop them? (y/n): ', tableName, removedMaterializedViews));
                if (permission.toLowerCase() !== 'y') {
                  callback(buildError('model.tablecreation.schemamismatch', tableName));
                  return;
                }
              }
              if (removedIndexNames.length > 0) {
                var _permission = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has removed indexes: %j, drop them? (y/n): ', tableName, removedIndexNames));
                if (_permission.toLowerCase() !== 'y') {
                  callback(buildError('model.tablecreation.schemamismatch', tableName));
                  return;
                }
              }

              _this5.drop_mviews(removedMaterializedViews, function (err2) {
                if (err2) {
                  callback(buildError('model.tablecreation.matviewdrop', err2));
                  return;
                }

                // remove altered indexes by index name
                _this5.drop_indexes(removedIndexNames, function (err3) {
                  if (err3) {
                    callback(buildError('model.tablecreation.dbindexdrop', err3));
                    return;
                  }

                  // add altered indexes
                  async.eachSeries(addedIndexes, function (idx, next) {
                    _this5._execute_definition_query(_this5._create_index_query(tableName, idx), [], function (err4, result) {
                      if (err4) next(err4);else next(null, result);
                    });
                  }, function (err4) {
                    if (err4) {
                      callback(buildError('model.tablecreation.dbindexcreate', err4));
                      return;
                    }

                    // add altered custom indexes
                    async.eachSeries(addedCustomIndexes, function (idx, next) {
                      var customIndexQuery = _this5._create_custom_index_query(tableName, idx);
                      _this5._execute_definition_query(customIndexQuery, [], function (err5, result) {
                        if (err5) next(err5);else next(null, result);
                      });
                    }, function (err5) {
                      if (err5) {
                        callback(buildError('model.tablecreation.dbindexcreate', err5));
                        return;
                      }

                      // add altered materialized_views
                      async.eachSeries(addedMaterializedViews, function (viewName, next) {
                        var matViewQuery = _this5._create_materialized_view_query(tableName, viewName, modelSchema.materialized_views[viewName]);
                        _this5._execute_definition_query(matViewQuery, [], function (err6, result) {
                          if (err6) next(buildError('model.tablecreation.matviewcreate', err6));else next(null, result);
                        });
                      }, callback);
                    });
                  });
                });
              });
            };

            var alterDBTable = function alterDBTable() {
              var differences = deepDiff(normalizedDBSchema.fields, normalizedModelSchema.fields);
              async.eachSeries(differences, function (diff, next) {
                var fieldName = diff.path[0];
                var alterFieldType = function alterFieldType() {
                  var permission = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has new type for field "%s", ' + 'alter table to update column type? (y/n): ', tableName, fieldName));
                  if (permission.toLowerCase() === 'y') {
                    _this5.alter_table('ALTER', fieldName, diff.rhs, function (err1, result) {
                      if (err1) next(buildError('model.tablecreation.dbalter', err1));else next(null, result);
                    });
                  } else {
                    next(buildError('model.tablecreation.schemamismatch', tableName));
                  }
                };

                var alterAddField = function alterAddField() {
                  var type = '';
                  if (diff.path.length > 1) {
                    if (diff.path[1] === 'type') {
                      type = diff.rhs;
                      if (normalizedModelSchema.fields[fieldName].typeDef) {
                        type += normalizedModelSchema.fields[fieldName].typeDef;
                      }
                    } else {
                      type = normalizedModelSchema.fields[fieldName].type;
                      type += diff.rhs;
                    }
                  } else {
                    type = diff.rhs.type;
                    if (diff.rhs.typeDef) type += diff.rhs.typeDef;
                  }

                  _this5.alter_table('ADD', fieldName, type, function (err1, result) {
                    if (err1) next(buildError('model.tablecreation.dbalter', err1));else next(null, result);
                  });
                };

                var alterRemoveField = function alterRemoveField(nextCallback) {
                  // remove dependent indexes/custom_indexes/materialized_views,
                  // update them in normalizedDBSchema, then alter
                  var dependentIndexes = [];
                  var pullIndexes = [];
                  normalizedDBSchema.indexes.forEach(function (dbIndex) {
                    var indexSplit = dbIndex.split(/[()]/g);
                    var indexFieldName = '';
                    if (indexSplit.length > 1) indexFieldName = indexSplit[1];else indexFieldName = indexSplit[0];
                    if (indexFieldName === fieldName) {
                      dependentIndexes.push(dbSchema.index_names[dbIndex]);
                      pullIndexes.push(dbIndex);
                    }
                  });
                  _.pullAll(normalizedDBSchema.indexes, pullIndexes);

                  var pullCustomIndexes = [];
                  normalizedDBSchema.custom_indexes.forEach(function (dbIndex) {
                    if (dbIndex.on === fieldName) {
                      dependentIndexes.push(dbSchema.index_names[objectHash(dbIndex)]);
                      pullCustomIndexes.push(dbIndex);
                    }
                  });
                  _.pullAll(normalizedDBSchema.custom_indexes, pullCustomIndexes);

                  var dependentViews = [];
                  Object.keys(normalizedDBSchema.materialized_views).forEach(function (dbViewName) {
                    if (normalizedDBSchema.materialized_views[dbViewName].select.indexOf(fieldName) > -1) {
                      dependentViews.push(dbViewName);
                    } else if (normalizedDBSchema.materialized_views[dbViewName].select[0] === '*') {
                      dependentViews.push(dbViewName);
                    } else if (normalizedDBSchema.materialized_views[dbViewName].key.indexOf(fieldName) > -1) {
                      dependentViews.push(dbViewName);
                    } else if (normalizedDBSchema.materialized_views[dbViewName].key[0] instanceof Array && normalizedDBSchema.materialized_views[dbViewName].key[0].indexOf(fieldName) > -1) {
                      dependentViews.push(dbViewName);
                    }
                  });
                  dependentViews.forEach(function (viewName) {
                    delete normalizedDBSchema.materialized_views[viewName];
                  });

                  _this5.drop_mviews(dependentViews, function (err1) {
                    if (err1) {
                      nextCallback(buildError('model.tablecreation.matviewdrop', err1));
                      return;
                    }

                    _this5.drop_indexes(dependentIndexes, function (err2) {
                      if (err2) {
                        nextCallback(buildError('model.tablecreation.dbindexdrop', err2));
                        return;
                      }

                      _this5.alter_table('DROP', fieldName, '', function (err3, result) {
                        if (err3) nextCallback(buildError('model.tablecreation.dbalter', err3));else nextCallback(null, result);
                      });
                    });
                  });
                };

                if (diff.kind === 'N') {
                  var permission = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has added field "%s", alter table to add column? (y/n): ', tableName, fieldName));
                  if (permission.toLowerCase() === 'y') {
                    alterAddField();
                  } else {
                    next(buildError('model.tablecreation.schemamismatch', tableName));
                  }
                } else if (diff.kind === 'D') {
                  var _permission2 = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has removed field "%s", alter table to drop column? ' + '(column data will be lost & dependent indexes/views will be recreated!) (y/n): ', tableName, fieldName));
                  if (_permission2.toLowerCase() === 'y') {
                    alterRemoveField(next);
                  } else {
                    next(buildError('model.tablecreation.schemamismatch', tableName));
                  }
                } else if (diff.kind === 'E') {
                  // check if the alter field type is possible, otherwise try D and then N
                  if (diff.path[1] === 'type') {
                    if (diff.lhs === 'int' && diff.rhs === 'varint') {
                      // alter field type possible
                      alterFieldType();
                    } else if (normalizedDBSchema.key.indexOf(fieldName) > 0) {
                      // check if field part of clustering key
                      // alter field type impossible
                      var _permission3 = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has new incompatible type for primary key field "%s", ' + 'proceed to recreate table? (y/n): ', tableName, fieldName));
                      if (_permission3.toLowerCase() === 'y') {
                        dropRecreateTable();
                        next(new Error('break'));
                      } else {
                        next(buildError('model.tablecreation.schemamismatch', tableName));
                      }
                    } else if (['text', 'ascii', 'bigint', 'boolean', 'decimal', 'double', 'float', 'inet', 'int', 'timestamp', 'timeuuid', 'uuid', 'varchar', 'varint'].indexOf(diff.lhs) > -1 && diff.rhs === 'blob') {
                      // alter field type possible
                      alterFieldType();
                    } else if (diff.lhs === 'timeuuid' && diff.rhs === 'uuid') {
                      // alter field type possible
                      alterFieldType();
                    } else if (normalizedDBSchema.key[0].indexOf(fieldName) > -1) {
                      // check if field part of partition key
                      // alter field type impossible
                      var _permission4 = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has new incompatible type for primary key field "%s", ' + 'proceed to recreate table? (y/n): ', tableName, fieldName));
                      if (_permission4.toLowerCase() === 'y') {
                        dropRecreateTable();
                        next(new Error('break'));
                      } else {
                        next(buildError('model.tablecreation.schemamismatch', tableName));
                      }
                    } else {
                      // alter type impossible
                      var _permission5 = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has new incompatible type for field "%s", drop column ' + 'and recreate? (column data will be lost & dependent indexes/views will be recreated!) (y/n): ', tableName, fieldName));
                      if (_permission5.toLowerCase() === 'y') {
                        alterRemoveField(function (err1) {
                          if (err1) next(err1);else alterAddField();
                        });
                      } else {
                        next(buildError('model.tablecreation.schemamismatch', tableName));
                      }
                    }
                  } else {
                    // alter type impossible
                    var _permission6 = _this5._ask_confirmation(util.format('Migration: model schema for table "%s" has new incompatible type for field "%s", drop column ' + 'and recreate? (column data will be lost & dependent indexes/views will be recreated!) (y/n): ', tableName, fieldName));
                    if (_permission6.toLowerCase() === 'y') {
                      alterRemoveField(function (err1) {
                        if (err1) next(err1);else alterAddField();
                      });
                    } else {
                      next(buildError('model.tablecreation.schemamismatch', tableName));
                    }
                  }
                } else {
                  next();
                }
              }, afterDBAlter);
            };

            if (migration === 'alter') {
              // check if table can be altered to match schema
              if (_.isEqual(normalizedModelSchema.key, normalizedDBSchema.key) && _.isEqual(normalizedModelSchema.clustering_order, normalizedDBSchema.clustering_order)) {
                alterDBTable();
              } else {
                dropRecreateTable();
              }
            } else if (migration === 'drop') {
              dropRecreateTable();
            } else {
              callback(buildError('model.tablecreation.schemamismatch', tableName));
            }
          })();
        }
      })();
    } else {
      // if not existing, it's created
      var createTableQuery = _this5._create_table_query(tableName, modelSchema);
      _this5._execute_definition_query(createTableQuery, [], afterDBCreate);
    }
  });
};

BaseModel._create_table_query = function f(tableName, schema) {
  var rows = [];
  var fieldType = void 0;
  Object.keys(schema.fields).forEach(function (k) {
    if (schema.fields[k].virtual) {
      return;
    }
    var segment = '';
    fieldType = schemer.get_field_type(schema, k);
    if (schema.fields[k].typeDef) {
      segment = util.format('"%s" %s%s', k, fieldType, schema.fields[k].typeDef);
    } else {
      segment = util.format('"%s" %s', k, fieldType);
    }

    if (schema.fields[k].static) {
      segment += ' STATIC';
    }

    rows.push(segment);
  });

  var partitionKey = schema.key[0];
  var clusteringKey = schema.key.slice(1, schema.key.length);
  var clusteringOrder = [];

  for (var field = 0; field < clusteringKey.length; field++) {
    if (schema.clustering_order && schema.clustering_order[clusteringKey[field]] && schema.clustering_order[clusteringKey[field]].toLowerCase() === 'desc') {
      clusteringOrder.push(util.format('"%s" DESC', clusteringKey[field]));
    } else {
      clusteringOrder.push(util.format('"%s" ASC', clusteringKey[field]));
    }
  }

  var clusteringOrderQuery = '';
  if (clusteringOrder.length > 0) {
    clusteringOrderQuery = util.format(' WITH CLUSTERING ORDER BY (%s)', clusteringOrder.toString());
  }

  if (partitionKey instanceof Array) {
    partitionKey = partitionKey.map(function (v) {
      return util.format('"%s"', v);
    }).join(',');
  } else {
    partitionKey = util.format('"%s"', partitionKey);
  }

  if (clusteringKey.length) {
    clusteringKey = clusteringKey.map(function (v) {
      return util.format('"%s"', v);
    }).join(',');
    clusteringKey = util.format(',%s', clusteringKey);
  } else {
    clusteringKey = '';
  }

  var query = util.format('CREATE TABLE IF NOT EXISTS "%s" (%s , PRIMARY KEY((%s)%s))%s;', tableName, rows.join(' , '), partitionKey, clusteringKey, clusteringOrderQuery);

  return query;
};

BaseModel._create_materialized_view_query = function f(tableName, viewName, viewSchema) {
  var rows = [];

  for (var k = 0; k < viewSchema.select.length; k++) {
    if (viewSchema.select[k] === '*') rows.push(util.format('%s', viewSchema.select[k]));else rows.push(util.format('"%s"', viewSchema.select[k]));
  }

  var partitionKey = viewSchema.key[0];
  var clusteringKey = viewSchema.key.slice(1, viewSchema.key.length);
  var clusteringOrder = [];

  for (var field = 0; field < clusteringKey.length; field++) {
    if (viewSchema.clustering_order && viewSchema.clustering_order[clusteringKey[field]] && viewSchema.clustering_order[clusteringKey[field]].toLowerCase() === 'desc') {
      clusteringOrder.push(util.format('"%s" DESC', clusteringKey[field]));
    } else {
      clusteringOrder.push(util.format('"%s" ASC', clusteringKey[field]));
    }
  }

  var clusteringOrderQuery = '';
  if (clusteringOrder.length > 0) {
    clusteringOrderQuery = util.format(' WITH CLUSTERING ORDER BY (%s)', clusteringOrder.toString());
  }

  if (partitionKey instanceof Array) {
    partitionKey = partitionKey.map(function (v) {
      return util.format('"%s"', v);
    }).join(',');
  } else {
    partitionKey = util.format('"%s"', partitionKey);
  }

  if (clusteringKey.length) {
    clusteringKey = clusteringKey.map(function (v) {
      return util.format('"%s"', v);
    }).join(',');
    clusteringKey = util.format(',%s', clusteringKey);
  } else {
    clusteringKey = '';
  }

  var whereClause = partitionKey.split(',').join(' IS NOT NULL AND ');
  if (clusteringKey) whereClause += clusteringKey.split(',').join(' IS NOT NULL AND ');
  whereClause += ' IS NOT NULL';

  var query = util.format('CREATE MATERIALIZED VIEW IF NOT EXISTS "%s" AS SELECT %s FROM "%s" WHERE %s PRIMARY KEY((%s)%s)%s;', viewName, rows.join(' , '), tableName, whereClause, partitionKey, clusteringKey, clusteringOrderQuery);

  return query;
};

BaseModel._create_index_query = function f(tableName, indexName) {
  var query = void 0;
  var indexExpression = indexName.replace(/["\s]/g, '').split(/[()]/g);
  if (indexExpression.length > 1) {
    indexExpression[0] = indexExpression[0].toLowerCase();
    query = util.format('CREATE INDEX IF NOT EXISTS ON "%s" (%s("%s"));', tableName, indexExpression[0], indexExpression[1]);
  } else {
    query = util.format('CREATE INDEX IF NOT EXISTS ON "%s" ("%s");', tableName, indexExpression[0]);
  }

  return query;
};

BaseModel._create_custom_index_query = function f(tableName, customIndex) {
  var query = util.format('CREATE CUSTOM INDEX IF NOT EXISTS ON "%s" ("%s") USING \'%s\'', tableName, customIndex.on, customIndex.using);

  if (Object.keys(customIndex.options).length > 0) {
    query += ' WITH OPTIONS = {';
    Object.keys(customIndex.options).forEach(function (key) {
      query += util.format("'%s': '%s', ", key, customIndex.options[key]);
    });
    query = query.slice(0, -2);
    query += '}';
  }

  query += ';';

  return query;
};

BaseModel._get_db_table_schema = function f(callback) {
  var self = this;

  var tableName = this._properties.table_name;
  var keyspace = this._properties.keyspace;

  var query = 'SELECT * FROM system_schema.columns WHERE table_name = ? AND keyspace_name = ?;';

  self.execute_query(query, [tableName, keyspace], function (err, resultColumns) {
    if (err) {
      callback(buildError('model.tablecreation.dbschemaquery', err));
      return;
    }

    if (!resultColumns.rows || resultColumns.rows.length === 0) {
      callback(null, null);
      return;
    }

    var dbSchema = { fields: {}, typeMaps: {}, staticMaps: {} };

    for (var r = 0; r < resultColumns.rows.length; r++) {
      var row = resultColumns.rows[r];

      dbSchema.fields[row.column_name] = TYPE_MAP.extract_type(row.type);

      var typeMapDef = TYPE_MAP.extract_typeDef(row.type);
      if (typeMapDef.length > 0) {
        dbSchema.typeMaps[row.column_name] = typeMapDef;
      }

      if (row.kind === 'partition_key') {
        if (!dbSchema.key) dbSchema.key = [[]];
        dbSchema.key[0][row.position] = row.column_name;
      } else if (row.kind === 'clustering') {
        if (!dbSchema.key) dbSchema.key = [[]];
        if (!dbSchema.clustering_order) dbSchema.clustering_order = {};

        dbSchema.key[row.position + 1] = row.column_name;
        if (row.clustering_order && row.clustering_order.toLowerCase() === 'desc') {
          dbSchema.clustering_order[row.column_name] = 'DESC';
        } else {
          dbSchema.clustering_order[row.column_name] = 'ASC';
        }
      } else if (row.kind === 'static') {
        dbSchema.staticMaps[row.column_name] = true;
      }
    }

    query = 'SELECT * FROM system_schema.indexes WHERE table_name = ? AND keyspace_name = ?;';

    self.execute_query(query, [tableName, keyspace], function (err1, resultIndexes) {
      if (err1) {
        callback(buildError('model.tablecreation.dbschemaquery', err1));
        return;
      }

      for (var _r = 0; _r < resultIndexes.rows.length; _r++) {
        var _row = resultIndexes.rows[_r];

        if (_row.index_name) {
          var indexOptions = _row.options;
          var target = indexOptions.target;
          target = target.replace(/["\s]/g, '');
          delete indexOptions.target;

          // keeping track of index names to drop index when needed
          if (!dbSchema.index_names) dbSchema.index_names = {};

          if (_row.kind === 'CUSTOM') {
            var using = indexOptions.class_name;
            delete indexOptions.class_name;

            if (!dbSchema.custom_indexes) dbSchema.custom_indexes = [];
            var customIndexObject = {
              on: target,
              using: using,
              options: indexOptions
            };
            dbSchema.custom_indexes.push(customIndexObject);
            dbSchema.index_names[objectHash(customIndexObject)] = _row.index_name;
          } else {
            if (!dbSchema.indexes) dbSchema.indexes = [];
            dbSchema.indexes.push(target);
            dbSchema.index_names[target] = _row.index_name;
          }
        }
      }

      query = 'SELECT view_name,base_table_name FROM system_schema.views WHERE keyspace_name=?;';

      self.execute_query(query, [keyspace], function (err2, resultViews) {
        if (err2) {
          callback(buildError('model.tablecreation.dbschemaquery', err2));
          return;
        }

        for (var _r2 = 0; _r2 < resultViews.rows.length; _r2++) {
          var _row2 = resultViews.rows[_r2];

          if (_row2.base_table_name === tableName) {
            if (!dbSchema.materialized_views) dbSchema.materialized_views = {};
            dbSchema.materialized_views[_row2.view_name] = {};
          }
        }

        if (dbSchema.materialized_views) {
          query = 'SELECT * FROM system_schema.columns WHERE keyspace_name=? and table_name IN ?;';

          self.execute_query(query, [keyspace, Object.keys(dbSchema.materialized_views)], function (err3, resultMatViews) {
            if (err3) {
              callback(buildError('model.tablecreation.dbschemaquery', err3));
              return;
            }

            for (var _r3 = 0; _r3 < resultMatViews.rows.length; _r3++) {
              var _row3 = resultMatViews.rows[_r3];

              if (!dbSchema.materialized_views[_row3.table_name].select) {
                dbSchema.materialized_views[_row3.table_name].select = [];
              }

              dbSchema.materialized_views[_row3.table_name].select.push(_row3.column_name);

              if (_row3.kind === 'partition_key') {
                if (!dbSchema.materialized_views[_row3.table_name].key) {
                  dbSchema.materialized_views[_row3.table_name].key = [[]];
                }

                dbSchema.materialized_views[_row3.table_name].key[0][_row3.position] = _row3.column_name;
              } else if (_row3.kind === 'clustering') {
                if (!dbSchema.materialized_views[_row3.table_name].key) {
                  dbSchema.materialized_views[_row3.table_name].key = [[]];
                }
                if (!dbSchema.materialized_views[_row3.table_name].clustering_order) {
                  dbSchema.materialized_views[_row3.table_name].clustering_order = {};
                }

                dbSchema.materialized_views[_row3.table_name].key[_row3.position + 1] = _row3.column_name;
                if (_row3.clustering_order && _row3.clustering_order.toLowerCase() === 'desc') {
                  dbSchema.materialized_views[_row3.table_name].clustering_order[_row3.column_name] = 'DESC';
                } else {
                  dbSchema.materialized_views[_row3.table_name].clustering_order[_row3.column_name] = 'ASC';
                }
              }
            }

            callback(null, dbSchema);
          });
        } else {
          callback(null, dbSchema);
        }
      });
    });
  });
};

BaseModel._execute_table_query = function f(query, params, options, callback) {
  if (arguments.length === 3) {
    callback = options;
    options = {};
  }

  var defaults = {
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  var doExecuteQuery = function f1(doquery, docallback) {
    this.execute_query(doquery, params, options, docallback);
  }.bind(this, query);

  if (this.is_table_ready()) {
    doExecuteQuery(callback);
  } else {
    this.init(function (err) {
      if (err) {
        callback(err);
        return;
      }
      doExecuteQuery(callback);
    });
  }
};

BaseModel._get_db_value_expression = function f(fieldname, fieldvalue) {
  var _this6 = this;

  if (fieldvalue == null || fieldvalue === cql.types.unset) {
    return { query_segment: '?', parameter: fieldvalue };
  }

  if (_.isPlainObject(fieldvalue) && fieldvalue.$db_function) {
    return fieldvalue.$db_function;
  }

  var fieldtype = schemer.get_field_type(this._properties.schema, fieldname);
  var validators = this._get_validators(fieldname);

  if (fieldvalue instanceof Array && fieldtype !== 'list' && fieldtype !== 'set' && fieldtype !== 'frozen') {
    var val = fieldvalue.map(function (v) {
      var dbVal = _this6._get_db_value_expression(fieldname, v);

      if (_.isPlainObject(dbVal) && dbVal.query_segment) return dbVal.parameter;
      return dbVal;
    });

    return { query_segment: '?', parameter: val };
  }

  var validationMessage = this._validate(validators, fieldvalue);
  if (validationMessage !== true) {
    throw buildError('model.validator.invalidvalue', validationMessage(fieldvalue, fieldname, fieldtype));
  }

  if (fieldtype === 'counter') {
    var counterQuerySegment = util.format('"%s"', fieldname);
    if (fieldvalue >= 0) counterQuerySegment += ' + ?';else counterQuerySegment += ' - ?';
    fieldvalue = Math.abs(fieldvalue);
    return { query_segment: counterQuerySegment, parameter: fieldvalue };
  }

  return { query_segment: '?', parameter: fieldvalue };
};

BaseModel._create_where_clause = function f(queryObject) {
  var _this7 = this;

  var queryRelations = [];
  var queryParams = [];

  Object.keys(queryObject).forEach(function (k) {
    if (k.indexOf('$') === 0) {
      // search queries based on lucene index or solr
      // escape all single quotes for queries in cassandra
      if (k === '$expr') {
        if (typeof queryObject[k].index === 'string' && typeof queryObject[k].query === 'string') {
          queryRelations.push(util.format("expr(%s,'%s')", queryObject[k].index, queryObject[k].query.replace(/'/g, "''")));
        } else {
          throw buildError('model.find.invalidexpr');
        }
      } else if (k === '$solr_query') {
        if (typeof queryObject[k] === 'string') {
          queryRelations.push(util.format("solr_query='%s'", queryObject[k].replace(/'/g, "''")));
        } else {
          throw buildError('model.find.invalidsolrquery');
        }
      }
      return;
    }

    var whereObject = queryObject[k];
    // Array of operators
    if (!(whereObject instanceof Array)) whereObject = [whereObject];

    for (var fk = 0; fk < whereObject.length; fk++) {
      var fieldRelation = whereObject[fk];

      var cqlOperators = {
        $eq: '=',
        $gt: '>',
        $lt: '<',
        $gte: '>=',
        $lte: '<=',
        $in: 'IN',
        $like: 'LIKE',
        $token: 'token',
        $contains: 'CONTAINS',
        $contains_key: 'CONTAINS KEY'
      };

      if (_.isPlainObject(fieldRelation)) {
        var validKeys = Object.keys(cqlOperators);
        var fieldRelationKeys = Object.keys(fieldRelation);
        for (var i = 0; i < fieldRelationKeys.length; i++) {
          if (validKeys.indexOf(fieldRelationKeys[i]) < 0) {
            // field relation key invalid
            fieldRelation = { $eq: fieldRelation };
            break;
          }
        }
      } else {
        fieldRelation = { $eq: fieldRelation };
      }

      var relKeys = Object.keys(fieldRelation);
      for (var rk = 0; rk < relKeys.length; rk++) {
        var firstKey = relKeys[rk];
        var firstValue = fieldRelation[firstKey];
        if (firstKey.toLowerCase() in cqlOperators) {
          firstKey = firstKey.toLowerCase();
          var op = cqlOperators[firstKey];

          if (firstKey === '$in' && !(firstValue instanceof Array)) throw buildError('model.find.invalidinop');
          if (firstKey === '$token' && !(firstValue instanceof Object)) throw buildError('model.find.invalidtoken');

          var whereTemplate = '"%s" %s %s';
          if (firstKey === '$token') {
            whereTemplate = 'token("%s") %s token(%s)';

            var tokenRelKeys = Object.keys(firstValue);
            for (var tokenRK = 0; tokenRK < tokenRelKeys.length; tokenRK++) {
              var tokenFirstKey = tokenRelKeys[tokenRK];
              var tokenFirstValue = firstValue[tokenFirstKey];
              tokenFirstKey = tokenFirstKey.toLowerCase();
              if (tokenFirstKey in cqlOperators && tokenFirstKey !== '$token' && tokenFirstKey !== '$in') {
                op = cqlOperators[tokenFirstKey];
              } else {
                throw buildError('model.find.invalidtokenop', tokenFirstKey);
              }

              if (tokenFirstValue instanceof Array) {
                var tokenKeys = k.split(',');
                for (var tokenIndex = 0; tokenIndex < tokenFirstValue.length; tokenIndex++) {
                  tokenKeys[tokenIndex] = tokenKeys[tokenIndex].trim();
                  var dbVal = _this7._get_db_value_expression(tokenKeys[tokenIndex], tokenFirstValue[tokenIndex]);
                  if (_.isPlainObject(dbVal) && dbVal.query_segment) {
                    tokenFirstValue[tokenIndex] = dbVal.query_segment;
                    queryParams.push(dbVal.parameter);
                  } else {
                    tokenFirstValue[tokenIndex] = dbVal;
                  }
                }
                queryRelations.push(util.format(whereTemplate, tokenKeys.join('","'), op, tokenFirstValue.toString()));
              } else {
                var _dbVal = _this7._get_db_value_expression(k, tokenFirstValue);
                if (_.isPlainObject(_dbVal) && _dbVal.query_segment) {
                  queryRelations.push(util.format(whereTemplate, k, op, _dbVal.query_segment));
                  queryParams.push(_dbVal.parameter);
                } else {
                  queryRelations.push(util.format(whereTemplate, k, op, _dbVal));
                }
              }
            }
          } else if (firstKey === '$contains') {
            var fieldtype1 = schemer.get_field_type(_this7._properties.schema, k);
            if (['map', 'list', 'set', 'frozen'].indexOf(fieldtype1) >= 0) {
              if (fieldtype1 === 'map' && _.isPlainObject(firstValue) && Object.keys(firstValue).length === 1) {
                queryRelations.push(util.format('"%s"[%s] %s %s', k, '?', '=', '?'));
                queryParams.push(Object.keys(firstValue)[0]);
                queryParams.push(firstValue[Object.keys(firstValue)[0]]);
              } else {
                queryRelations.push(util.format(whereTemplate, k, op, '?'));
                queryParams.push(firstValue);
              }
            } else {
              throw buildError('model.find.invalidcontainsop');
            }
          } else if (firstKey === '$contains_key') {
            var fieldtype2 = schemer.get_field_type(_this7._properties.schema, k);
            if (['map'].indexOf(fieldtype2) >= 0) {
              queryRelations.push(util.format(whereTemplate, k, op, '?'));
              queryParams.push(firstValue);
            } else {
              throw buildError('model.find.invalidcontainskeyop');
            }
          } else {
            var _dbVal2 = _this7._get_db_value_expression(k, firstValue);
            if (_.isPlainObject(_dbVal2) && _dbVal2.query_segment) {
              queryRelations.push(util.format(whereTemplate, k, op, _dbVal2.query_segment));
              queryParams.push(_dbVal2.parameter);
            } else {
              queryRelations.push(util.format(whereTemplate, k, op, _dbVal2));
            }
          }
        } else {
          throw buildError('model.find.invalidop', firstKey);
        }
      }
    }
  });

  return {
    query: queryRelations.length > 0 ? util.format('WHERE %s', queryRelations.join(' AND ')) : '',
    params: queryParams
  };
};

BaseModel._create_find_query = function f(queryObject, options) {
  var orderKeys = [];
  var limit = null;

  Object.keys(queryObject).forEach(function (k) {
    var queryItem = queryObject[k];
    if (k.toLowerCase() === '$orderby') {
      if (!(queryItem instanceof Object)) {
        throw buildError('model.find.invalidorder');
      }
      var orderItemKeys = Object.keys(queryItem);
      if (orderItemKeys.length > 1) throw buildError('model.find.multiorder');

      var cqlOrderDirection = { $asc: 'ASC', $desc: 'DESC' };
      if (orderItemKeys[0].toLowerCase() in cqlOrderDirection) {
        var orderFields = queryItem[orderItemKeys[0]];

        if (!(orderFields instanceof Array)) orderFields = [orderFields];

        for (var i = 0; i < orderFields.length; i++) {
          orderKeys.push(util.format('"%s" %s', orderFields[i], cqlOrderDirection[orderItemKeys[0]]));
        }
      } else {
        throw buildError('model.find.invalidordertype', orderItemKeys[0]);
      }
    } else if (k.toLowerCase() === '$limit') {
      if (typeof queryItem !== 'number') throw buildError('model.find.limittype');
      limit = queryItem;
    }
  });

  var whereClause = this._create_where_clause(queryObject);

  var select = '*';
  if (options.select && _.isArray(options.select) && options.select.length > 0) {
    var selectArray = [];
    for (var i = 0; i < options.select.length; i++) {
      // separate the aggregate function and the column name if select is an aggregate function
      var selection = options.select[i].split(/[( )]/g).filter(function (e) {
        return e;
      });
      if (selection.length === 1) {
        selectArray.push(util.format('"%s"', selection[0]));
      } else if (selection.length === 2 || selection.length === 4) {
        var functionClause = util.format('%s("%s")', selection[0], selection[1]);
        if (selection[2]) functionClause += util.format(' %s', selection[2]);
        if (selection[3]) functionClause += util.format(' %s', selection[3]);

        selectArray.push(functionClause);
      } else if (selection.length === 3) {
        selectArray.push(util.format('"%s" %s %s', selection[0], selection[1], selection[2]));
      } else {
        selectArray.push('*');
      }
    }
    select = selectArray.join(',');
  }

  var query = util.format('SELECT %s %s FROM "%s" %s %s %s', options.distinct ? 'DISTINCT' : '', select, options.materialized_view ? options.materialized_view : this._properties.table_name, whereClause.query, orderKeys.length ? util.format('ORDER BY %s', orderKeys.join(', ')) : ' ', limit ? util.format('LIMIT %s', limit) : ' ');

  if (options.allow_filtering) query += ' ALLOW FILTERING;';else query += ';';

  return { query: query, params: whereClause.params };
};

BaseModel.get_table_name = function f() {
  return this._properties.table_name;
};

BaseModel.is_table_ready = function f() {
  return this._ready === true;
};

BaseModel.init = function f(options, callback) {
  if (!callback) {
    callback = options;
    options = undefined;
  }

  this._ready = true;
  callback();
};

BaseModel.syncDefinition = function f(callback) {
  var _this8 = this;

  var afterCreate = function afterCreate(err, result) {
    if (err) callback(err);else {
      _this8._ready = true;
      callback(null, result);
    }
  };

  this._create_table(afterCreate);
};

BaseModel.execute_query = function f(query, params, options, callback) {
  var _this9 = this;

  if (arguments.length === 3) {
    callback = options;
    options = {};
  }

  var defaults = {
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  this._ensure_connected(function (err) {
    if (err) {
      callback(err);
      return;
    }
    debug('executing query: %s with params: %j', query, params);
    _this9._properties.cql.execute(query, params, options, function (err1, result) {
      if (err1 && err1.code === 8704) {
        _this9._execute_definition_query(query, params, callback);
      } else {
        callback(err1, result);
      }
    });
  });
};

BaseModel.execute_eachRow = function f(query, params, options, onReadable, callback) {
  var _this10 = this;

  this._ensure_connected(function (err) {
    if (err) {
      callback(err);
      return;
    }
    debug('executing eachRow query: %s with params: %j', query, params);
    _this10._properties.cql.eachRow(query, params, options, onReadable, callback);
  });
};

BaseModel._execute_table_eachRow = function f(query, params, options, onReadable, callback) {
  var _this11 = this;

  if (this.is_table_ready()) {
    this.execute_eachRow(query, params, options, onReadable, callback);
  } else {
    this.init(function (err) {
      if (err) {
        callback(err);
        return;
      }
      _this11.execute_eachRow(query, params, options, onReadable, callback);
    });
  }
};

BaseModel.eachRow = function f(queryObject, options, onReadable, callback) {
  var _this12 = this;

  if (arguments.length === 3) {
    var cb = onReadable;
    onReadable = options;
    callback = cb;
    options = {};
  }
  if (typeof onReadable !== 'function') {
    throw buildError('model.find.eachrowerror', 'no valid onReadable function was provided');
  }
  if (typeof callback !== 'function') {
    throw buildError('model.find.cberror');
  }

  var defaults = {
    raw: false,
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  options.return_query = true;
  var selectQuery = this.find(queryObject, options);

  var queryOptions = { prepare: options.prepare };
  if (options.consistency) queryOptions.consistency = options.consistency;
  if (options.fetchSize) queryOptions.fetchSize = options.fetchSize;
  if (options.autoPage) queryOptions.autoPage = options.autoPage;
  if (options.hints) queryOptions.hints = options.hints;
  if (options.pageState) queryOptions.pageState = options.pageState;
  if (options.retry) queryOptions.retry = options.retry;
  if (options.serialConsistency) queryOptions.serialConsistency = options.serialConsistency;

  this._execute_table_eachRow(selectQuery.query, selectQuery.params, queryOptions, function (n, row) {
    if (!options.raw) {
      var ModelConstructor = _this12._properties.get_constructor();
      row = new ModelConstructor(row);
    }
    onReadable(n, row);
  }, function (err, result) {
    if (err) {
      callback(buildError('model.find.dberror', err));
      return;
    }
    callback(err, result);
  });
};

BaseModel.execute_stream = function f(query, params, options, onReadable, callback) {
  var _this13 = this;

  this._ensure_connected(function (err) {
    if (err) {
      callback(err);
      return;
    }
    debug('executing stream query: %s with params: %j', query, params);
    _this13._properties.cql.stream(query, params, options).on('readable', onReadable).on('end', callback);
  });
};

BaseModel._execute_table_stream = function f(query, params, options, onReadable, callback) {
  var _this14 = this;

  if (this.is_table_ready()) {
    this.execute_stream(query, params, options, onReadable, callback);
  } else {
    this.init(function (err) {
      if (err) {
        callback(err);
        return;
      }
      _this14.execute_stream(query, params, options, onReadable, callback);
    });
  }
};

BaseModel.stream = function f(queryObject, options, onReadable, callback) {
  if (arguments.length === 3) {
    var cb = onReadable;
    onReadable = options;
    callback = cb;
    options = {};
  }

  if (typeof onReadable !== 'function') {
    throw buildError('model.find.streamerror', 'no valid onReadable function was provided');
  }
  if (typeof callback !== 'function') {
    throw buildError('model.find.cberror');
  }

  var defaults = {
    raw: false,
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  options.return_query = true;
  var selectQuery = this.find(queryObject, options);

  var queryOptions = { prepare: options.prepare };
  if (options.consistency) queryOptions.consistency = options.consistency;
  if (options.fetchSize) queryOptions.fetchSize = options.fetchSize;
  if (options.autoPage) queryOptions.autoPage = options.autoPage;
  if (options.hints) queryOptions.hints = options.hints;
  if (options.pageState) queryOptions.pageState = options.pageState;
  if (options.retry) queryOptions.retry = options.retry;
  if (options.serialConsistency) queryOptions.serialConsistency = options.serialConsistency;

  var self = this;

  this._execute_table_stream(selectQuery.query, selectQuery.params, queryOptions, function f1() {
    var reader = this;
    reader.readRow = function () {
      var row = reader.read();
      if (!row) return row;
      if (!options.raw) {
        var ModelConstructor = self._properties.get_constructor();
        return new ModelConstructor(row);
      }
      return row;
    };
    onReadable(reader);
  }, function (err) {
    if (err) {
      callback(buildError('model.find.dberror', err));
      return;
    }
    callback();
  });
};

BaseModel.find = function f(queryObject, options, callback) {
  var _this15 = this;

  if (arguments.length === 2 && typeof options === 'function') {
    callback = options;
    options = {};
  }
  if (typeof callback !== 'function' && !options.return_query) {
    throw buildError('model.find.cberror');
  }

  var defaults = {
    raw: false,
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  // set raw true if select is used,
  // because casting to model instances may lead to problems
  if (options.select) options.raw = true;

  var queryParams = [];

  var query = void 0;
  try {
    var findQuery = this._create_find_query(queryObject, options);
    query = findQuery.query;
    queryParams = queryParams.concat(findQuery.params);
  } catch (e) {
    if (typeof callback === 'function') {
      callback(e);
      return {};
    }
    throw e;
  }

  if (options.return_query) {
    return { query: query, params: queryParams };
  }

  var queryOptions = { prepare: options.prepare };
  if (options.consistency) queryOptions.consistency = options.consistency;
  if (options.fetchSize) queryOptions.fetchSize = options.fetchSize;
  if (options.autoPage) queryOptions.autoPage = options.autoPage;
  if (options.hints) queryOptions.hints = options.hints;
  if (options.pageState) queryOptions.pageState = options.pageState;
  if (options.retry) queryOptions.retry = options.retry;
  if (options.serialConsistency) queryOptions.serialConsistency = options.serialConsistency;

  this._execute_table_query(query, queryParams, queryOptions, function (err, results) {
    if (err) {
      callback(buildError('model.find.dberror', err));
      return;
    }
    if (!options.raw) {
      (function () {
        var ModelConstructor = _this15._properties.get_constructor();
        results = results.rows.map(function (res) {
          delete res.columns;
          return new ModelConstructor(res);
        });
        callback(null, results);
      })();
    } else {
      results = results.rows.map(function (res) {
        delete res.columns;
        return res;
      });
      callback(null, results);
    }
  });

  return {};
};

BaseModel.findOne = function f(queryObject, options, callback) {
  if (arguments.length === 2 && typeof options === 'function') {
    callback = options;
    options = {};
  }
  if (typeof callback !== 'function' && !options.return_query) {
    throw buildError('model.find.cberror');
  }

  queryObject.$limit = 1;

  return this.find(queryObject, options, function (err, results) {
    if (err) {
      callback(err);
      return;
    }
    if (results.length > 0) {
      callback(null, results[0]);
      return;
    }
    callback();
  });
};

BaseModel.update = function f(queryObject, updateValues, options, callback) {
  var _this16 = this;

  if (arguments.length === 3 && typeof options === 'function') {
    callback = options;
    options = {};
  }

  var schema = this._properties.schema;

  var defaults = {
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  var queryParams = [];

  var updateClauseArray = [];

  var errorHappened = Object.keys(updateValues).some(function (key) {
    if (schema.fields[key] === undefined || schema.fields[key].virtual) return false;

    // check field value
    var fieldtype = schemer.get_field_type(schema, key);
    var fieldvalue = updateValues[key];

    if (fieldvalue === undefined) {
      fieldvalue = _this16._get_default_value(key);
      if (fieldvalue === undefined) {
        if (schema.key.indexOf(key) >= 0 || schema.key[0].indexOf(key) >= 0) {
          if (typeof callback === 'function') {
            callback(buildError('model.update.unsetkey', key));
            return true;
          }
          throw buildError('model.update.unsetkey', key);
        } else if (schema.fields[key].rule && schema.fields[key].rule.required) {
          if (typeof callback === 'function') {
            callback(buildError('model.update.unsetrequired', key));
            return true;
          }
          throw buildError('model.update.unsetrequired', key);
        } else return false;
      } else if (!schema.fields[key].rule || !schema.fields[key].rule.ignore_default) {
        // did set a default value, ignore default is not set
        if (_this16.validate(key, fieldvalue) !== true) {
          if (typeof callback === 'function') {
            callback(buildError('model.update.invaliddefaultvalue', fieldvalue, key, fieldtype));
            return true;
          }
          throw buildError('model.update.invaliddefaultvalue', fieldvalue, key, fieldtype);
        }
      }
    }

    if (fieldvalue === null || fieldvalue === cql.types.unset) {
      if (schema.key.indexOf(key) >= 0 || schema.key[0].indexOf(key) >= 0) {
        if (typeof callback === 'function') {
          callback(buildError('model.update.unsetkey', key));
          return true;
        }
        throw buildError('model.update.unsetkey', key);
      } else if (schema.fields[key].rule && schema.fields[key].rule.required) {
        if (typeof callback === 'function') {
          callback(buildError('model.update.unsetrequired', key));
          return true;
        }
        throw buildError('model.update.unsetrequired', key);
      }
    }

    try {
      var $add = false;
      var $append = false;
      var $prepend = false;
      var $replace = false;
      var $remove = false;
      if (_.isPlainObject(fieldvalue)) {
        if (fieldvalue.$add) {
          fieldvalue = fieldvalue.$add;
          $add = true;
        } else if (fieldvalue.$append) {
          fieldvalue = fieldvalue.$append;
          $append = true;
        } else if (fieldvalue.$prepend) {
          fieldvalue = fieldvalue.$prepend;
          $prepend = true;
        } else if (fieldvalue.$replace) {
          fieldvalue = fieldvalue.$replace;
          $replace = true;
        } else if (fieldvalue.$remove) {
          fieldvalue = fieldvalue.$remove;
          $remove = true;
        }
      }

      var dbVal = _this16._get_db_value_expression(key, fieldvalue);

      if (_.isPlainObject(dbVal) && dbVal.query_segment) {
        if (['map', 'list', 'set'].indexOf(fieldtype) > -1) {
          if ($add || $append) {
            dbVal.query_segment = util.format('"%s" + %s', key, dbVal.query_segment);
          } else if ($prepend) {
            if (fieldtype === 'list') {
              dbVal.query_segment = util.format('%s + "%s"', dbVal.query_segment, key);
            } else {
              throw buildError('model.update.invalidprependop', util.format('%s datatypes does not support $prepend, use $add instead', fieldtype));
            }
          } else if ($remove) {
            dbVal.query_segment = util.format('"%s" - %s', key, dbVal.query_segment);
            if (fieldtype === 'map') dbVal.parameter = Object.keys(dbVal.parameter);
          }
        }

        if ($replace) {
          if (fieldtype === 'map') {
            updateClauseArray.push(util.format('"%s"[?]=%s', key, dbVal.query_segment));
            var replaceKeys = Object.keys(dbVal.parameter);
            var replaceValues = _.values(dbVal.parameter);
            if (replaceKeys.length === 1) {
              queryParams.push(replaceKeys[0]);
              queryParams.push(replaceValues[0]);
            } else {
              throw buildError('model.update.invalidreplaceop', '$replace in map does not support more than one item');
            }
          } else if (fieldtype === 'list') {
            updateClauseArray.push(util.format('"%s"[?]=%s', key, dbVal.query_segment));
            if (dbVal.parameter.length === 2) {
              queryParams.push(dbVal.parameter[0]);
              queryParams.push(dbVal.parameter[1]);
            } else {
              throw buildError('model.update.invalidreplaceop', '$replace in list should have exactly 2 items, first one as the index and the second one as the value');
            }
          } else {
            throw buildError('model.update.invalidreplaceop', util.format('%s datatypes does not support $replace', fieldtype));
          }
        } else {
          updateClauseArray.push(util.format('"%s"=%s', key, dbVal.query_segment));
          queryParams.push(dbVal.parameter);
        }
      } else {
        updateClauseArray.push(util.format('"%s"=%s', key, dbVal));
      }
    } catch (e) {
      if (typeof callback === 'function') {
        callback(e);
        return true;
      }
      throw e;
    }
    return false;
  });

  if (errorHappened) return {};

  var query = 'UPDATE "%s"';
  var where = '';
  if (options.ttl) query += util.format(' USING TTL %s', options.ttl);
  query += ' SET %s %s';
  try {
    var whereClause = this._create_where_clause(queryObject);
    where = whereClause.query;
    queryParams = queryParams.concat(whereClause.params);
  } catch (e) {
    if (typeof callback === 'function') {
      callback(e);
      return {};
    }
    throw e;
  }
  query = util.format(query, this._properties.table_name, updateClauseArray.join(', '), where);

  if (options.conditions) {
    var _ret4 = function () {
      var updateConditionsArray = [];

      errorHappened = Object.keys(options.conditions).some(function (key) {
        try {
          var dbVal = _this16._get_db_value_expression(key, options.conditions[key]);
          if (_.isPlainObject(dbVal) && dbVal.query_segment) {
            updateConditionsArray.push(util.format('"%s"=%s', key, dbVal.query_segment));
            queryParams.push(dbVal.parameter);
          } else {
            updateConditionsArray.push(util.format('"%s"=%s', key, dbVal));
          }
        } catch (e) {
          if (typeof callback === 'function') {
            callback(e);
            return true;
          }
          throw e;
        }
        return false;
      });

      if (errorHappened) return {
          v: {}
        };

      query += util.format(' IF %s', updateConditionsArray.join(' AND '));
    }();

    if ((typeof _ret4 === 'undefined' ? 'undefined' : _typeof(_ret4)) === "object") return _ret4.v;
  }
  if (options.if_exists) query += ' IF EXISTS';

  query += ';';

  if (options.return_query) {
    return { query: query, params: queryParams };
  }

  var queryOptions = { prepare: options.prepare };
  if (options.consistency) queryOptions.consistency = options.consistency;
  if (options.fetchSize) queryOptions.fetchSize = options.fetchSize;
  if (options.autoPage) queryOptions.autoPage = options.autoPage;
  if (options.hints) queryOptions.hints = options.hints;
  if (options.pageState) queryOptions.pageState = options.pageState;
  if (options.retry) queryOptions.retry = options.retry;
  if (options.serialConsistency) queryOptions.serialConsistency = options.serialConsistency;

  // set dummy hook function if not present in schema
  if (typeof schema.before_update !== 'function') {
    schema.before_update = function f1(queryObj, updateVal, optionsObj, next) {
      next();
    };
  }

  if (typeof schema.after_update !== 'function') {
    schema.after_update = function f1(queryObj, updateVal, optionsObj, next) {
      next();
    };
  }

  schema.before_update(queryObject, updateValues, options, function (error) {
    if (error) {
      if (typeof callback === 'function') {
        callback(buildError('model.update.before.error', error));
        return;
      }
      throw buildError('model.update.before.error', error);
    }

    _this16._execute_table_query(query, queryParams, queryOptions, function (err, results) {
      if (typeof callback === 'function') {
        if (err) {
          callback(buildError('model.update.dberror', err));
          return;
        }
        schema.after_update(queryObject, updateValues, options, function (error1) {
          if (error1) {
            callback(buildError('model.update.after.error', error1));
            return;
          }
          callback(null, results);
        });
      } else if (err) {
        throw buildError('model.update.dberror', err);
      } else {
        schema.after_update(queryObject, updateValues, options, function (error1) {
          if (error1) {
            throw buildError('model.update.after.error', error1);
          }
        });
      }
    });
  });

  return {};
};

BaseModel.delete = function f(queryObject, options, callback) {
  var _this17 = this;

  if (arguments.length === 2 && typeof options === 'function') {
    callback = options;
    options = {};
  }

  var defaults = {
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  var queryParams = [];

  var query = 'DELETE FROM "%s" %s;';
  var where = '';
  try {
    var whereClause = this._create_where_clause(queryObject);
    where = whereClause.query;
    queryParams = queryParams.concat(whereClause.params);
  } catch (e) {
    if (typeof callback === 'function') {
      callback(e);
      return {};
    }
    throw e;
  }

  query = util.format(query, this._properties.table_name, where);

  if (options.return_query) {
    return { query: query, params: queryParams };
  }

  var queryOptions = { prepare: options.prepare };
  if (options.consistency) queryOptions.consistency = options.consistency;
  if (options.fetchSize) queryOptions.fetchSize = options.fetchSize;
  if (options.autoPage) queryOptions.autoPage = options.autoPage;
  if (options.hints) queryOptions.hints = options.hints;
  if (options.pageState) queryOptions.pageState = options.pageState;
  if (options.retry) queryOptions.retry = options.retry;
  if (options.serialConsistency) queryOptions.serialConsistency = options.serialConsistency;

  // set dummy hook function if not present in schema
  var schema = this._properties.schema;
  if (typeof schema.before_delete !== 'function') {
    schema.before_delete = function f1(queryObj, optionsObj, next) {
      next();
    };
  }

  if (typeof schema.after_delete !== 'function') {
    schema.after_delete = function f1(queryObj, optionsObj, next) {
      next();
    };
  }

  schema.before_delete(queryObject, options, function (error) {
    if (error) {
      if (typeof callback === 'function') {
        callback(buildError('model.delete.before.error', error));
        return;
      }
      throw buildError('model.delete.before.error', error);
    }

    _this17._execute_table_query(query, queryParams, queryOptions, function (err, results) {
      if (typeof callback === 'function') {
        if (err) {
          callback(buildError('model.delete.dberror', err));
          return;
        }
        schema.after_delete(queryObject, options, function (error1) {
          if (error1) {
            callback(buildError('model.delete.after.error', error1));
            return;
          }
          callback(null, results);
        });
      } else if (err) {
        throw buildError('model.delete.dberror', err);
      } else {
        schema.after_delete(queryObject, options, function (error1) {
          if (error1) {
            throw buildError('model.delete.after.error', error1);
          }
        });
      }
    });
  });

  return {};
};

BaseModel.truncate = function f(callback) {
  var properties = this._properties;
  var tableName = properties.table_name;

  var query = util.format('TRUNCATE TABLE "%s";', tableName);
  this._execute_definition_query(query, [], callback);
};

BaseModel.drop_mviews = function f(mviews, callback) {
  var _this18 = this;

  async.each(mviews, function (view, viewCallback) {
    var query = util.format('DROP MATERIALIZED VIEW IF EXISTS "%s";', view);
    _this18._execute_definition_query(query, [], viewCallback);
  }, function (err) {
    if (err) callback(err);else callback();
  });
};

BaseModel.drop_indexes = function f(indexes, callback) {
  var _this19 = this;

  async.each(indexes, function (index, indexCallback) {
    var query = util.format('DROP INDEX IF EXISTS "%s";', index);
    _this19._execute_definition_query(query, [], indexCallback);
  }, function (err) {
    if (err) callback(err);else callback();
  });
};

BaseModel.alter_table = function f(operation, fieldname, type, callback) {
  var properties = this._properties;
  var tableName = properties.table_name;

  if (operation === 'ALTER') type = util.format('TYPE %s', type);else if (operation === 'DROP') type = '';

  var query = util.format('ALTER TABLE "%s" %s "%s" %s;', tableName, operation, fieldname, type);
  this._execute_definition_query(query, [], callback);
};

BaseModel.drop_table = function f(callback) {
  var properties = this._properties;
  var tableName = properties.table_name;

  var query = util.format('DROP TABLE IF EXISTS "%s";', tableName);
  this._execute_definition_query(query, [], callback);
};

BaseModel.prototype._get_data_types = function f() {
  return cql.types;
};

BaseModel.prototype._get_default_value = function f(fieldname) {
  var properties = this.constructor._properties;
  var schema = properties.schema;

  if (_.isPlainObject(schema.fields[fieldname]) && schema.fields[fieldname].default !== undefined) {
    if (typeof schema.fields[fieldname].default === 'function') {
      return schema.fields[fieldname].default.call(this);
    }
    return schema.fields[fieldname].default;
  }
  return undefined;
};

BaseModel.prototype.validate = function f(propertyName, value) {
  value = value || this[propertyName];
  this._validators = this._validators || {};
  return this.constructor._validate(this._validators[propertyName] || [], value);
};

BaseModel.prototype.save = function fn(options, callback) {
  var _this20 = this;

  if (arguments.length === 1 && typeof options === 'function') {
    callback = options;
    options = {};
  }

  var identifiers = [];
  var values = [];
  var properties = this.constructor._properties;
  var schema = properties.schema;

  var defaults = {
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  var queryParams = [];

  var errorHappened = Object.keys(schema.fields).some(function (f) {
    if (schema.fields[f].virtual) return false;

    // check field value
    var fieldtype = schemer.get_field_type(schema, f);
    var fieldvalue = _this20[f];

    if (fieldvalue === undefined) {
      fieldvalue = _this20._get_default_value(f);
      if (fieldvalue === undefined) {
        if (schema.key.indexOf(f) >= 0 || schema.key[0].indexOf(f) >= 0) {
          if (typeof callback === 'function') {
            callback(buildError('model.save.unsetkey', f));
            return true;
          }
          throw buildError('model.save.unsetkey', f);
        } else if (schema.fields[f].rule && schema.fields[f].rule.required) {
          if (typeof callback === 'function') {
            callback(buildError('model.save.unsetrequired', f));
            return true;
          }
          throw buildError('model.save.unsetrequired', f);
        } else return false;
      } else if (!schema.fields[f].rule || !schema.fields[f].rule.ignore_default) {
        // did set a default value, ignore default is not set
        if (_this20.validate(f, fieldvalue) !== true) {
          if (typeof callback === 'function') {
            callback(buildError('model.save.invaliddefaultvalue', fieldvalue, f, fieldtype));
            return true;
          }
          throw buildError('model.save.invaliddefaultvalue', fieldvalue, f, fieldtype);
        }
      }
    }

    if (fieldvalue === null || fieldvalue === cql.types.unset) {
      if (schema.key.indexOf(f) >= 0 || schema.key[0].indexOf(f) >= 0) {
        if (typeof callback === 'function') {
          callback(buildError('model.save.unsetkey', f));
          return true;
        }
        throw buildError('model.save.unsetkey', f);
      } else if (schema.fields[f].rule && schema.fields[f].rule.required) {
        if (typeof callback === 'function') {
          callback(buildError('model.save.unsetrequired', f));
          return true;
        }
        throw buildError('model.save.unsetrequired', f);
      }
    }

    identifiers.push(util.format('"%s"', f));

    try {
      var dbVal = _this20.constructor._get_db_value_expression(f, fieldvalue);
      if (_.isPlainObject(dbVal) && dbVal.query_segment) {
        values.push(dbVal.query_segment);
        queryParams.push(dbVal.parameter);
      } else {
        values.push(dbVal);
      }
    } catch (e) {
      if (typeof callback === 'function') {
        callback(e);
        return true;
      }
      throw e;
    }
    return false;
  });

  if (errorHappened) return {};

  var query = util.format('INSERT INTO "%s" ( %s ) VALUES ( %s )', properties.table_name, identifiers.join(' , '), values.join(' , '));

  if (options.if_not_exist) query += ' IF NOT EXISTS';
  if (options.ttl) query += util.format(' USING TTL %s', options.ttl);

  query += ';';

  if (options.return_query) {
    return { query: query, params: queryParams };
  }

  var queryOptions = { prepare: options.prepare };
  if (options.consistency) queryOptions.consistency = options.consistency;
  if (options.fetchSize) queryOptions.fetchSize = options.fetchSize;
  if (options.autoPage) queryOptions.autoPage = options.autoPage;
  if (options.hints) queryOptions.hints = options.hints;
  if (options.pageState) queryOptions.pageState = options.pageState;
  if (options.retry) queryOptions.retry = options.retry;
  if (options.serialConsistency) queryOptions.serialConsistency = options.serialConsistency;

  // set dummy hook function if not present in schema
  if (typeof schema.before_save !== 'function') {
    schema.before_save = function f(instance, option, next) {
      next();
    };
  }

  if (typeof schema.after_save !== 'function') {
    schema.after_save = function f(instance, option, next) {
      next();
    };
  }

  schema.before_save(this, options, function (error) {
    if (error) {
      if (typeof callback === 'function') {
        callback(buildError('model.save.before.error', error));
        return;
      }
      throw buildError('model.save.before.error', error);
    }

    _this20.constructor._execute_table_query(query, queryParams, queryOptions, function (err, result) {
      if (typeof callback === 'function') {
        if (err) {
          callback(buildError('model.save.dberror', err));
          return;
        }
        schema.after_save(_this20, options, function (error1) {
          if (error1) {
            callback(buildError('model.save.after.error', error1));
            return;
          }
          callback(null, result);
        });
      } else if (err) {
        throw buildError('model.save.dberror', err);
      } else {
        schema.after_save(_this20, options, function (error1) {
          if (error1) {
            throw buildError('model.save.after.error', error1);
          }
        });
      }
    });
  });

  return {};
};

BaseModel.prototype.delete = function f(options, callback) {
  if (arguments.length === 1 && typeof options === 'function') {
    callback = options;
    options = {};
  }

  var schema = this.constructor._properties.schema;
  var deleteQuery = {};

  for (var i = 0; i < schema.key.length; i++) {
    var fieldKey = schema.key[i];
    if (fieldKey instanceof Array) {
      for (var j = 0; j < fieldKey.length; j++) {
        deleteQuery[fieldKey[j]] = this[fieldKey[j]];
      }
    } else {
      deleteQuery[fieldKey] = this[fieldKey];
    }
  }

  return this.constructor.delete(deleteQuery, options, callback);
};

BaseModel.prototype.toJSON = function toJSON() {
  var _this21 = this;

  var object = {};
  var schema = this.constructor._properties.schema;

  Object.keys(schema.fields).forEach(function (field) {
    object[field] = _this21[field];
  });

  return object;
};

module.exports = BaseModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vcm0vYmFzZV9tb2RlbC5qcyJdLCJuYW1lcyI6WyJ1dGlsIiwicmVxdWlyZSIsImNxbCIsImFzeW5jIiwiXyIsImRlZXBEaWZmIiwiZGlmZiIsInJlYWRsaW5lU3luYyIsIm9iamVjdEhhc2giLCJkZWJ1ZyIsImJ1aWxkRXJyb3IiLCJzY2hlbWVyIiwiVFlQRV9NQVAiLCJjaGVja0RCVGFibGVOYW1lIiwib2JqIiwidGVzdCIsIkJhc2VNb2RlbCIsImYiLCJpbnN0YW5jZVZhbHVlcyIsImZpZWxkVmFsdWVzIiwiZmllbGRzIiwiY29uc3RydWN0b3IiLCJfcHJvcGVydGllcyIsInNjaGVtYSIsImRlZmF1bHRTZXR0ZXIiLCJmMSIsInByb3BOYW1lIiwibmV3VmFsdWUiLCJkZWZhdWx0R2V0dGVyIiwiX3ZhbGlkYXRvcnMiLCJmaWVsZHNLZXlzIiwiT2JqZWN0Iiwia2V5cyIsImkiLCJsZW4iLCJsZW5ndGgiLCJwcm9wZXJ0eU5hbWUiLCJmaWVsZCIsIl9nZXRfdmFsaWRhdG9ycyIsInNldHRlciIsImJpbmQiLCJnZXR0ZXIiLCJ2aXJ0dWFsIiwic2V0IiwiZ2V0IiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJkZWZpbmVQcm9wZXJ0eSIsIm5hbWUiLCJfc2V0X3Byb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwidGFibGVOYW1lIiwidGFibGVfbmFtZSIsInF1YWxpZmllZFRhYmxlTmFtZSIsImZvcm1hdCIsImtleXNwYWNlIiwicXVhbGlmaWVkX3RhYmxlX25hbWUiLCJfdmFsaWRhdGUiLCJ2YWxpZGF0b3JzIiwidmFsdWUiLCJpc1BsYWluT2JqZWN0IiwiJGRiX2Z1bmN0aW9uIiwidiIsInZhbGlkYXRvciIsIm1lc3NhZ2UiLCJfZ2V0X2dlbmVyaWNfdmFsaWRhdG9yX21lc3NhZ2UiLCJmaWVsZHR5cGUiLCJfZm9ybWF0X3ZhbGlkYXRvcl9ydWxlIiwicnVsZSIsImZpZWxkbmFtZSIsImdldF9maWVsZF90eXBlIiwiZSIsInR5cGVGaWVsZFZhbGlkYXRvciIsImdlbmVyaWNfdHlwZV92YWxpZGF0b3IiLCJwdXNoIiwiQXJyYXkiLCJpc0FycmF5IiwiZm9yRWFjaCIsImZpZWxkcnVsZSIsIl9hc2tfY29uZmlybWF0aW9uIiwicGVybWlzc2lvbiIsImRpc2FibGVUVFlDb25maXJtYXRpb24iLCJxdWVzdGlvbiIsIl9lbnN1cmVfY29ubmVjdGVkIiwiY2FsbGJhY2siLCJjb25uZWN0IiwiX2V4ZWN1dGVfZGVmaW5pdGlvbl9xdWVyeSIsInF1ZXJ5IiwicGFyYW1zIiwiZXJyIiwiY29ubiIsImRlZmluZV9jb25uZWN0aW9uIiwiZXhlY3V0ZSIsInByZXBhcmUiLCJmZXRjaFNpemUiLCJfZXhlY3V0ZV9iYXRjaCIsInF1ZXJpZXMiLCJvcHRpb25zIiwiYmF0Y2giLCJleGVjdXRlX2JhdGNoIiwiYXJndW1lbnRzIiwiZGVmYXVsdHMiLCJkZWZhdWx0c0RlZXAiLCJnZXRfY3FsX2NsaWVudCIsIl9jcmVhdGVfdGFibGUiLCJtb2RlbFNjaGVtYSIsImRyb3BUYWJsZU9uU2NoZW1hQ2hhbmdlIiwibWlncmF0aW9uIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiX2dldF9kYl90YWJsZV9zY2hlbWEiLCJkYlNjaGVtYSIsImFmdGVyQ3VzdG9tSW5kZXgiLCJlcnIxIiwibWF0ZXJpYWxpemVkX3ZpZXdzIiwiZWFjaFNlcmllcyIsInZpZXdOYW1lIiwibmV4dCIsIm1hdFZpZXdRdWVyeSIsIl9jcmVhdGVfbWF0ZXJpYWxpemVkX3ZpZXdfcXVlcnkiLCJlcnIyIiwicmVzdWx0IiwiYWZ0ZXJEQkluZGV4IiwiY3VzdG9tX2luZGV4ZXMiLCJpZHgiLCJfY3JlYXRlX2N1c3RvbV9pbmRleF9xdWVyeSIsImN1c3RvbV9pbmRleCIsImN1c3RvbUluZGV4UXVlcnkiLCJhZnRlckRCQ3JlYXRlIiwiaW5kZXhlcyIsIl9jcmVhdGVfaW5kZXhfcXVlcnkiLCJub3JtYWxpemVkTW9kZWxTY2hlbWEiLCJub3JtYWxpemVkREJTY2hlbWEiLCJub3JtYWxpemVfbW9kZWxfc2NoZW1hIiwiaXNFcXVhbCIsImRyb3BSZWNyZWF0ZVRhYmxlIiwidG9Mb3dlckNhc2UiLCJtdmlld3MiLCJkcm9wX212aWV3cyIsImRyb3BfdGFibGUiLCJjcmVhdGVUYWJsZVF1ZXJ5IiwiX2NyZWF0ZV90YWJsZV9xdWVyeSIsImFmdGVyREJBbHRlciIsImFkZGVkSW5kZXhlcyIsImRpZmZlcmVuY2UiLCJyZW1vdmVkSW5kZXhlcyIsInJlbW92ZWRJbmRleE5hbWVzIiwicmVtb3ZlZEluZGV4IiwiaW5kZXhfbmFtZXMiLCJhZGRlZEN1c3RvbUluZGV4ZXMiLCJmaWx0ZXIiLCJmaW5kIiwicmVtb3ZlZEN1c3RvbUluZGV4ZXMiLCJhZGRlZE1hdGVyaWFsaXplZFZpZXdzIiwicmVtb3ZlZE1hdGVyaWFsaXplZFZpZXdzIiwiZHJvcF9pbmRleGVzIiwiZXJyMyIsImVycjQiLCJlcnI1IiwiZXJyNiIsImFsdGVyREJUYWJsZSIsImRpZmZlcmVuY2VzIiwiZmllbGROYW1lIiwicGF0aCIsImFsdGVyRmllbGRUeXBlIiwiYWx0ZXJfdGFibGUiLCJyaHMiLCJhbHRlckFkZEZpZWxkIiwidHlwZSIsInR5cGVEZWYiLCJhbHRlclJlbW92ZUZpZWxkIiwibmV4dENhbGxiYWNrIiwiZGVwZW5kZW50SW5kZXhlcyIsInB1bGxJbmRleGVzIiwiZGJJbmRleCIsImluZGV4U3BsaXQiLCJzcGxpdCIsImluZGV4RmllbGROYW1lIiwicHVsbEFsbCIsInB1bGxDdXN0b21JbmRleGVzIiwib24iLCJkZXBlbmRlbnRWaWV3cyIsImRiVmlld05hbWUiLCJzZWxlY3QiLCJpbmRleE9mIiwia2V5Iiwia2luZCIsImxocyIsIkVycm9yIiwiY2x1c3RlcmluZ19vcmRlciIsInJvd3MiLCJmaWVsZFR5cGUiLCJrIiwic2VnbWVudCIsInN0YXRpYyIsInBhcnRpdGlvbktleSIsImNsdXN0ZXJpbmdLZXkiLCJzbGljZSIsImNsdXN0ZXJpbmdPcmRlciIsImNsdXN0ZXJpbmdPcmRlclF1ZXJ5IiwidG9TdHJpbmciLCJtYXAiLCJqb2luIiwidmlld1NjaGVtYSIsIndoZXJlQ2xhdXNlIiwiaW5kZXhOYW1lIiwiaW5kZXhFeHByZXNzaW9uIiwicmVwbGFjZSIsImN1c3RvbUluZGV4IiwidXNpbmciLCJzZWxmIiwiZXhlY3V0ZV9xdWVyeSIsInJlc3VsdENvbHVtbnMiLCJ0eXBlTWFwcyIsInN0YXRpY01hcHMiLCJyIiwicm93IiwiY29sdW1uX25hbWUiLCJleHRyYWN0X3R5cGUiLCJ0eXBlTWFwRGVmIiwiZXh0cmFjdF90eXBlRGVmIiwicG9zaXRpb24iLCJyZXN1bHRJbmRleGVzIiwiaW5kZXhfbmFtZSIsImluZGV4T3B0aW9ucyIsInRhcmdldCIsImNsYXNzX25hbWUiLCJjdXN0b21JbmRleE9iamVjdCIsInJlc3VsdFZpZXdzIiwiYmFzZV90YWJsZV9uYW1lIiwidmlld19uYW1lIiwicmVzdWx0TWF0Vmlld3MiLCJfZXhlY3V0ZV90YWJsZV9xdWVyeSIsImRvRXhlY3V0ZVF1ZXJ5IiwiZG9xdWVyeSIsImRvY2FsbGJhY2siLCJpc190YWJsZV9yZWFkeSIsImluaXQiLCJfZ2V0X2RiX3ZhbHVlX2V4cHJlc3Npb24iLCJmaWVsZHZhbHVlIiwidHlwZXMiLCJ1bnNldCIsInF1ZXJ5X3NlZ21lbnQiLCJwYXJhbWV0ZXIiLCJ2YWwiLCJkYlZhbCIsInZhbGlkYXRpb25NZXNzYWdlIiwiY291bnRlclF1ZXJ5U2VnbWVudCIsIk1hdGgiLCJhYnMiLCJfY3JlYXRlX3doZXJlX2NsYXVzZSIsInF1ZXJ5T2JqZWN0IiwicXVlcnlSZWxhdGlvbnMiLCJxdWVyeVBhcmFtcyIsImluZGV4Iiwid2hlcmVPYmplY3QiLCJmayIsImZpZWxkUmVsYXRpb24iLCJjcWxPcGVyYXRvcnMiLCIkZXEiLCIkZ3QiLCIkbHQiLCIkZ3RlIiwiJGx0ZSIsIiRpbiIsIiRsaWtlIiwiJHRva2VuIiwiJGNvbnRhaW5zIiwiJGNvbnRhaW5zX2tleSIsInZhbGlkS2V5cyIsImZpZWxkUmVsYXRpb25LZXlzIiwicmVsS2V5cyIsInJrIiwiZmlyc3RLZXkiLCJmaXJzdFZhbHVlIiwib3AiLCJ3aGVyZVRlbXBsYXRlIiwidG9rZW5SZWxLZXlzIiwidG9rZW5SSyIsInRva2VuRmlyc3RLZXkiLCJ0b2tlbkZpcnN0VmFsdWUiLCJ0b2tlbktleXMiLCJ0b2tlbkluZGV4IiwidHJpbSIsImZpZWxkdHlwZTEiLCJmaWVsZHR5cGUyIiwiX2NyZWF0ZV9maW5kX3F1ZXJ5Iiwib3JkZXJLZXlzIiwibGltaXQiLCJxdWVyeUl0ZW0iLCJvcmRlckl0ZW1LZXlzIiwiY3FsT3JkZXJEaXJlY3Rpb24iLCIkYXNjIiwiJGRlc2MiLCJvcmRlckZpZWxkcyIsInNlbGVjdEFycmF5Iiwic2VsZWN0aW9uIiwiZnVuY3Rpb25DbGF1c2UiLCJkaXN0aW5jdCIsIm1hdGVyaWFsaXplZF92aWV3IiwiYWxsb3dfZmlsdGVyaW5nIiwiZ2V0X3RhYmxlX25hbWUiLCJfcmVhZHkiLCJ1bmRlZmluZWQiLCJzeW5jRGVmaW5pdGlvbiIsImFmdGVyQ3JlYXRlIiwiY29kZSIsImV4ZWN1dGVfZWFjaFJvdyIsIm9uUmVhZGFibGUiLCJlYWNoUm93IiwiX2V4ZWN1dGVfdGFibGVfZWFjaFJvdyIsImNiIiwicmF3IiwicmV0dXJuX3F1ZXJ5Iiwic2VsZWN0UXVlcnkiLCJxdWVyeU9wdGlvbnMiLCJjb25zaXN0ZW5jeSIsImF1dG9QYWdlIiwiaGludHMiLCJwYWdlU3RhdGUiLCJyZXRyeSIsInNlcmlhbENvbnNpc3RlbmN5IiwibiIsIk1vZGVsQ29uc3RydWN0b3IiLCJnZXRfY29uc3RydWN0b3IiLCJleGVjdXRlX3N0cmVhbSIsInN0cmVhbSIsIl9leGVjdXRlX3RhYmxlX3N0cmVhbSIsInJlYWRlciIsInJlYWRSb3ciLCJyZWFkIiwiZmluZFF1ZXJ5IiwiY29uY2F0IiwicmVzdWx0cyIsInJlcyIsImNvbHVtbnMiLCJmaW5kT25lIiwiJGxpbWl0IiwidXBkYXRlIiwidXBkYXRlVmFsdWVzIiwidXBkYXRlQ2xhdXNlQXJyYXkiLCJlcnJvckhhcHBlbmVkIiwic29tZSIsIl9nZXRfZGVmYXVsdF92YWx1ZSIsInJlcXVpcmVkIiwiaWdub3JlX2RlZmF1bHQiLCJ2YWxpZGF0ZSIsIiRhZGQiLCIkYXBwZW5kIiwiJHByZXBlbmQiLCIkcmVwbGFjZSIsIiRyZW1vdmUiLCJyZXBsYWNlS2V5cyIsInJlcGxhY2VWYWx1ZXMiLCJ2YWx1ZXMiLCJ3aGVyZSIsInR0bCIsImNvbmRpdGlvbnMiLCJ1cGRhdGVDb25kaXRpb25zQXJyYXkiLCJpZl9leGlzdHMiLCJiZWZvcmVfdXBkYXRlIiwicXVlcnlPYmoiLCJ1cGRhdGVWYWwiLCJvcHRpb25zT2JqIiwiYWZ0ZXJfdXBkYXRlIiwiZXJyb3IiLCJlcnJvcjEiLCJkZWxldGUiLCJiZWZvcmVfZGVsZXRlIiwiYWZ0ZXJfZGVsZXRlIiwidHJ1bmNhdGUiLCJlYWNoIiwidmlldyIsInZpZXdDYWxsYmFjayIsImluZGV4Q2FsbGJhY2siLCJvcGVyYXRpb24iLCJwcm90b3R5cGUiLCJfZ2V0X2RhdGFfdHlwZXMiLCJkZWZhdWx0IiwiY2FsbCIsInNhdmUiLCJmbiIsImlkZW50aWZpZXJzIiwiaWZfbm90X2V4aXN0IiwiYmVmb3JlX3NhdmUiLCJpbnN0YW5jZSIsIm9wdGlvbiIsImFmdGVyX3NhdmUiLCJkZWxldGVRdWVyeSIsImZpZWxkS2V5IiwiaiIsInRvSlNPTiIsIm9iamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFNQSxPQUFPQyxRQUFRLE1BQVIsQ0FBYjtBQUNBLElBQU1DLE1BQU1ELFFBQVEsWUFBUixDQUFaO0FBQ0EsSUFBTUUsUUFBUUYsUUFBUSxPQUFSLENBQWQ7QUFDQSxJQUFNRyxJQUFJSCxRQUFRLFFBQVIsQ0FBVjtBQUNBLElBQU1JLFdBQVdKLFFBQVEsV0FBUixFQUFxQkssSUFBdEM7QUFDQSxJQUFNQyxlQUFlTixRQUFRLGVBQVIsQ0FBckI7QUFDQSxJQUFNTyxhQUFhUCxRQUFRLGFBQVIsQ0FBbkI7QUFDQSxJQUFNUSxRQUFRUixRQUFRLE9BQVIsRUFBaUIsbUJBQWpCLENBQWQ7O0FBRUEsSUFBTVMsYUFBYVQsUUFBUSxtQkFB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bCA9IHJlcXVpcmUoJ3V0aWwnKTtcbmNvbnN0IGNxbCA9IHJlcXVpcmUoJ2RzZS1kcml2ZXInKTtcbmNvbnN0IGFzeW5jID0gcmVxdWlyZSgnYXN5bmMnKTtcbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmNvbnN0IGRlZXBEaWZmID0gcmVxdWlyZSgnZGVlcC1kaWZmJykuZGlmZjtcbmNvbnN0IHJlYWRsaW5lU3luYyA9IHJlcXVpcmUoJ3JlYWRsaW5lLXN5bmMnKTtcbmNvbnN0IG9iamVjdEhhc2ggPSByZXF1aXJlKCdvYmplY3QtaGFzaCcpO1xuY29uc3QgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdleHByZXNzLWNhc3NhbmRyYScpO1xuXG5jb25zdCBidWlsZEVycm9yID0gcmVxdWlyZSgnLi9hcG9sbG9fZXJyb3IuanMnKTtcbmNvbnN0IHNjaGVtZXIgPSByZXF1aXJlKCcuL2Fwb2xsb19zY2hlbWVyJyk7XG5cbmNvbnN0IFRZUEVfTUFQID0gcmVxdWlyZSgnLi9jYXNzYW5kcmFfdHlwZXMnKTtcblxuY29uc3QgY2hlY2tEQlRhYmxlTmFtZSA9IChvYmopID0+ICgodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycgJiYgL15bYS16QS1aXStbYS16QS1aMC05X10qLy50ZXN0KG9iaikpKTtcblxuY29uc3QgQmFzZU1vZGVsID0gZnVuY3Rpb24gZihpbnN0YW5jZVZhbHVlcykge1xuICBpbnN0YW5jZVZhbHVlcyA9IGluc3RhbmNlVmFsdWVzIHx8IHt9O1xuICBjb25zdCBmaWVsZFZhbHVlcyA9IHt9O1xuICBjb25zdCBmaWVsZHMgPSB0aGlzLmNvbnN0cnVjdG9yLl9wcm9wZXJ0aWVzLnNjaGVtYS5maWVsZHM7XG5cbiAgY29uc3QgZGVmYXVsdFNldHRlciA9IGZ1bmN0aW9uIGYxKHByb3BOYW1lLCBuZXdWYWx1ZSkge1xuICAgIHRoaXNbcHJvcE5hbWVdID0gbmV3VmFsdWU7XG4gIH07XG5cbiAgY29uc3QgZGVmYXVsdEdldHRlciA9IGZ1bmN0aW9uIGYxKHByb3BOYW1lKSB7XG4gICAgcmV0dXJuIHRoaXNbcHJvcE5hbWVdO1xuICB9O1xuXG4gIHRoaXMuX3ZhbGlkYXRvcnMgPSB7fTtcblxuICBmb3IgKGxldCBmaWVsZHNLZXlzID0gT2JqZWN0LmtleXMoZmllbGRzKSwgaSA9IDAsIGxlbiA9IGZpZWxkc0tleXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBmaWVsZHNLZXlzW2ldO1xuICAgIGNvbnN0IGZpZWxkID0gZmllbGRzW2ZpZWxkc0tleXNbaV1dO1xuXG4gICAgdGhpcy5fdmFsaWRhdG9yc1twcm9wZXJ0eU5hbWVdID0gdGhpcy5jb25zdHJ1Y3Rvci5fZ2V0X3ZhbGlkYXRvcnMocHJvcGVydHlOYW1lKTtcblxuICAgIGxldCBzZXR0ZXIgPSBkZWZhdWx0U2V0dGVyLmJpbmQoZmllbGRWYWx1ZXMsIHByb3BlcnR5TmFtZSk7XG4gICAgbGV0IGdldHRlciA9IGRlZmF1bHRHZXR0ZXIuYmluZChmaWVsZFZhbHVlcywgcHJvcGVydHlOYW1lKTtcblxuICAgIGlmIChmaWVsZC52aXJ0dWFsICYmIHR5cGVvZiBmaWVsZC52aXJ0dWFsLnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc2V0dGVyID0gZmllbGQudmlydHVhbC5zZXQuYmluZChmaWVsZFZhbHVlcyk7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLnZpcnR1YWwgJiYgdHlwZW9mIGZpZWxkLnZpcnR1YWwuZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBnZXR0ZXIgPSBmaWVsZC52aXJ0dWFsLmdldC5iaW5kKGZpZWxkVmFsdWVzKTtcbiAgICB9XG5cbiAgICBjb25zdCBkZXNjcmlwdG9yID0ge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHNldDogc2V0dGVyLFxuICAgICAgZ2V0OiBnZXR0ZXIsXG4gICAgfTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IpO1xuICAgIGlmICghZmllbGQudmlydHVhbCkge1xuICAgICAgdGhpc1twcm9wZXJ0eU5hbWVdID0gaW5zdGFuY2VWYWx1ZXNbcHJvcGVydHlOYW1lXTtcbiAgICB9XG4gIH1cbn07XG5cbkJhc2VNb2RlbC5fcHJvcGVydGllcyA9IHtcbiAgbmFtZTogbnVsbCxcbiAgc2NoZW1hOiBudWxsLFxufTtcblxuQmFzZU1vZGVsLl9zZXRfcHJvcGVydGllcyA9IGZ1bmN0aW9uIGYocHJvcGVydGllcykge1xuICBjb25zdCBzY2hlbWEgPSBwcm9wZXJ0aWVzLnNjaGVtYTtcbiAgY29uc3QgdGFibGVOYW1lID0gc2NoZW1hLnRhYmxlX25hbWUgfHwgcHJvcGVydGllcy5uYW1lO1xuXG4gIGlmICghY2hlY2tEQlRhYmxlTmFtZSh0YWJsZU5hbWUpKSB7XG4gICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLnRhYmxlY3JlYXRpb24uaW52YWxpZG5hbWUnLCB0YWJsZU5hbWUpKTtcbiAgfVxuXG4gIGNvbnN0IHF1YWxpZmllZFRhYmxlTmFtZSA9IHV0aWwuZm9ybWF0KCdcIiVzXCIuXCIlc1wiJywgcHJvcGVydGllcy5rZXlzcGFjZSwgdGFibGVOYW1lKTtcblxuICB0aGlzLl9wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcbiAgdGhpcy5fcHJvcGVydGllcy50YWJsZV9uYW1lID0gdGFibGVOYW1lO1xuICB0aGlzLl9wcm9wZXJ0aWVzLnF1YWxpZmllZF90YWJsZV9uYW1lID0gcXVhbGlmaWVkVGFibGVOYW1lO1xufTtcblxuQmFzZU1vZGVsLl92YWxpZGF0ZSA9IGZ1bmN0aW9uIGYodmFsaWRhdG9ycywgdmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwgfHwgKF8uaXNQbGFpbk9iamVjdCh2YWx1ZSkgJiYgdmFsdWUuJGRiX2Z1bmN0aW9uKSkgcmV0dXJuIHRydWU7XG5cbiAgZm9yIChsZXQgdiA9IDA7IHYgPCB2YWxpZGF0b3JzLmxlbmd0aDsgdisrKSB7XG4gICAgaWYgKHR5cGVvZiB2YWxpZGF0b3JzW3ZdLnZhbGlkYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKCF2YWxpZGF0b3JzW3ZdLnZhbGlkYXRvcih2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRvcnNbdl0ubWVzc2FnZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5CYXNlTW9kZWwuX2dldF9nZW5lcmljX3ZhbGlkYXRvcl9tZXNzYWdlID0gZnVuY3Rpb24gZih2YWx1ZSwgcHJvcE5hbWUsIGZpZWxkdHlwZSkge1xuICByZXR1cm4gdXRpbC5mb3JtYXQoJ0ludmFsaWQgVmFsdWU6IFwiJXNcIiBmb3IgRmllbGQ6ICVzIChUeXBlOiAlcyknLCB2YWx1ZSwgcHJvcE5hbWUsIGZpZWxkdHlwZSk7XG59O1xuXG5CYXNlTW9kZWwuX2Zvcm1hdF92YWxpZGF0b3JfcnVsZSA9IGZ1bmN0aW9uIGYocnVsZSkge1xuICBpZiAodHlwZW9mIHJ1bGUudmFsaWRhdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLnZhbGlkYXRvci5pbnZhbGlkcnVsZScsICdSdWxlIHZhbGlkYXRvciBtdXN0IGJlIGEgdmFsaWQgZnVuY3Rpb24nKSk7XG4gIH1cbiAgaWYgKCFydWxlLm1lc3NhZ2UpIHtcbiAgICBydWxlLm1lc3NhZ2UgPSB0aGlzLl9nZXRfZ2VuZXJpY192YWxpZGF0b3JfbWVzc2FnZTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcnVsZS5tZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgIHJ1bGUubWVzc2FnZSA9IGZ1bmN0aW9uIGYxKG1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiB1dGlsLmZvcm1hdChtZXNzYWdlKTtcbiAgICB9LmJpbmQobnVsbCwgcnVsZS5tZXNzYWdlKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcnVsZS5tZXNzYWdlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLnZhbGlkYXRvci5pbnZhbGlkcnVsZScsICdJbnZhbGlkIHZhbGlkYXRvciBtZXNzYWdlLCBtdXN0IGJlIHN0cmluZyBvciBhIGZ1bmN0aW9uJykpO1xuICB9XG5cbiAgcmV0dXJuIHJ1bGU7XG59O1xuXG5CYXNlTW9kZWwuX2dldF92YWxpZGF0b3JzID0gZnVuY3Rpb24gZihmaWVsZG5hbWUpIHtcbiAgbGV0IGZpZWxkdHlwZTtcbiAgdHJ5IHtcbiAgICBmaWVsZHR5cGUgPSBzY2hlbWVyLmdldF9maWVsZF90eXBlKHRoaXMuX3Byb3BlcnRpZXMuc2NoZW1hLCBmaWVsZG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLnZhbGlkYXRvci5pbnZhbGlkc2NoZW1hJywgZS5tZXNzYWdlKSk7XG4gIH1cblxuICBjb25zdCB2YWxpZGF0b3JzID0gW107XG4gIGNvbnN0IHR5cGVGaWVsZFZhbGlkYXRvciA9IFRZUEVfTUFQLmdlbmVyaWNfdHlwZV92YWxpZGF0b3IoZmllbGR0eXBlKTtcblxuICBpZiAodHlwZUZpZWxkVmFsaWRhdG9yKSB2YWxpZGF0b3JzLnB1c2godHlwZUZpZWxkVmFsaWRhdG9yKTtcblxuICBjb25zdCBmaWVsZCA9IHRoaXMuX3Byb3BlcnRpZXMuc2NoZW1hLmZpZWxkc1tmaWVsZG5hbWVdO1xuICBpZiAodHlwZW9mIGZpZWxkLnJ1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBmaWVsZC5ydWxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaWVsZC5ydWxlID0ge1xuICAgICAgICB2YWxpZGF0b3I6IGZpZWxkLnJ1bGUsXG4gICAgICAgIG1lc3NhZ2U6IHRoaXMuX2dldF9nZW5lcmljX3ZhbGlkYXRvcl9tZXNzYWdlLFxuICAgICAgfTtcbiAgICAgIHZhbGlkYXRvcnMucHVzaChmaWVsZC5ydWxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFfLmlzUGxhaW5PYmplY3QoZmllbGQucnVsZSkpIHtcbiAgICAgICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLnZhbGlkYXRvci5pbnZhbGlkcnVsZScsICdWYWxpZGF0aW9uIHJ1bGUgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdCcpKTtcbiAgICAgIH1cbiAgICAgIGlmIChmaWVsZC5ydWxlLnZhbGlkYXRvcikge1xuICAgICAgICB2YWxpZGF0b3JzLnB1c2godGhpcy5fZm9ybWF0X3ZhbGlkYXRvcl9ydWxlKGZpZWxkLnJ1bGUpKTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShmaWVsZC5ydWxlLnZhbGlkYXRvcnMpKSB7XG4gICAgICAgIGZpZWxkLnJ1bGUudmFsaWRhdG9ycy5mb3JFYWNoKChmaWVsZHJ1bGUpID0+IHtcbiAgICAgICAgICB2YWxpZGF0b3JzLnB1c2godGhpcy5fZm9ybWF0X3ZhbGlkYXRvcl9ydWxlKGZpZWxkcnVsZSkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsaWRhdG9ycztcbn07XG5cbkJhc2VNb2RlbC5fYXNrX2NvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uIGYobWVzc2FnZSkge1xuICBsZXQgcGVybWlzc2lvbiA9ICd5JztcbiAgaWYgKCF0aGlzLl9wcm9wZXJ0aWVzLmRpc2FibGVUVFlDb25maXJtYXRpb24pIHtcbiAgICBwZXJtaXNzaW9uID0gcmVhZGxpbmVTeW5jLnF1ZXN0aW9uKG1lc3NhZ2UpO1xuICB9XG4gIHJldHVybiBwZXJtaXNzaW9uO1xufTtcblxuQmFzZU1vZGVsLl9lbnN1cmVfY29ubmVjdGVkID0gZnVuY3Rpb24gZihjYWxsYmFjaykge1xuICBpZiAoIXRoaXMuX3Byb3BlcnRpZXMuY3FsKSB7XG4gICAgdGhpcy5fcHJvcGVydGllcy5jb25uZWN0KGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjaygpO1xuICB9XG59O1xuXG5CYXNlTW9kZWwuX2V4ZWN1dGVfZGVmaW5pdGlvbl9xdWVyeSA9IGZ1bmN0aW9uIGYocXVlcnksIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgdGhpcy5fZW5zdXJlX2Nvbm5lY3RlZCgoZXJyKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGVidWcoJ2V4ZWN1dGluZyBkZWZpbml0aW9uIHF1ZXJ5OiAlcyB3aXRoIHBhcmFtczogJWonLCBxdWVyeSwgcGFyYW1zKTtcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5fcHJvcGVydGllcztcbiAgICBjb25zdCBjb25uID0gcHJvcGVydGllcy5kZWZpbmVfY29ubmVjdGlvbjtcbiAgICBjb25uLmV4ZWN1dGUocXVlcnksIHBhcmFtcywgeyBwcmVwYXJlOiBmYWxzZSwgZmV0Y2hTaXplOiAwIH0sIGNhbGxiYWNrKTtcbiAgfSk7XG59O1xuXG5CYXNlTW9kZWwuX2V4ZWN1dGVfYmF0Y2ggPSBmdW5jdGlvbiBmKHF1ZXJpZXMsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHRoaXMuX2Vuc3VyZV9jb25uZWN0ZWQoKGVycikgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRlYnVnKCdleGVjdXRpbmcgYmF0Y2ggcXVlcmllczogJWonLCBxdWVyaWVzKTtcbiAgICB0aGlzLl9wcm9wZXJ0aWVzLmNxbC5iYXRjaChxdWVyaWVzLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gIH0pO1xufTtcblxuQmFzZU1vZGVsLmV4ZWN1dGVfYmF0Y2ggPSBmdW5jdGlvbiBmKHF1ZXJpZXMsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGNvbnN0IGRlZmF1bHRzID0ge1xuICAgIHByZXBhcmU6IHRydWUsXG4gIH07XG5cbiAgb3B0aW9ucyA9IF8uZGVmYXVsdHNEZWVwKG9wdGlvbnMsIGRlZmF1bHRzKTtcblxuICB0aGlzLl9leGVjdXRlX2JhdGNoKHF1ZXJpZXMsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbn07XG5cbkJhc2VNb2RlbC5nZXRfY3FsX2NsaWVudCA9IGZ1bmN0aW9uIGYoY2FsbGJhY2spIHtcbiAgdGhpcy5fZW5zdXJlX2Nvbm5lY3RlZCgoZXJyKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FsbGJhY2sobnVsbCwgdGhpcy5fcHJvcGVydGllcy5jcWwpO1xuICB9KTtcbn07XG5cbkJhc2VNb2RlbC5fY3JlYXRlX3RhYmxlID0gZnVuY3Rpb24gZihjYWxsYmFjaykge1xuICBjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5fcHJvcGVydGllcztcbiAgY29uc3QgdGFibGVOYW1lID0gcHJvcGVydGllcy50YWJsZV9uYW1lO1xuICBjb25zdCBtb2RlbFNjaGVtYSA9IHByb3BlcnRpZXMuc2NoZW1hO1xuICBjb25zdCBkcm9wVGFibGVPblNjaGVtYUNoYW5nZSA9IHByb3BlcnRpZXMuZHJvcFRhYmxlT25TY2hlbWFDaGFuZ2U7XG4gIGxldCBtaWdyYXRpb24gPSBwcm9wZXJ0aWVzLm1pZ3JhdGlvbjtcblxuICAvLyBiYWNrd2FyZHMgY29tcGF0aWJsZSBjaGFuZ2UsIGRyb3BUYWJsZU9uU2NoZW1hQ2hhbmdlIHdpbGwgd29yayBsaWtlIG1pZ3JhdGlvbjogJ2Ryb3AnXG4gIGlmICghbWlncmF0aW9uKSB7XG4gICAgaWYgKGRyb3BUYWJsZU9uU2NoZW1hQ2hhbmdlKSBtaWdyYXRpb24gPSAnZHJvcCc7XG4gICAgZWxzZSBtaWdyYXRpb24gPSAnc2FmZSc7XG4gIH1cbiAgLy8gYWx3YXlzIHNhZmUgbWlncmF0ZSBpZiBOT0RFX0VOVj09PSdwcm9kdWN0aW9uJ1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykgbWlncmF0aW9uID0gJ3NhZmUnO1xuXG4gIC8vIGNoZWNrIGZvciBleGlzdGVuY2Ugb2YgdGFibGUgb24gREIgYW5kIGlmIGl0IG1hdGNoZXMgdGhpcyBtb2RlbCdzIHNjaGVtYVxuICB0aGlzLl9nZXRfZGJfdGFibGVfc2NoZW1hKChlcnIsIGRiU2NoZW1hKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBhZnRlckN1c3RvbUluZGV4ID0gKGVycjEpID0+IHtcbiAgICAgIGlmIChlcnIxKSB7XG4gICAgICAgIGNhbGxiYWNrKGJ1aWxkRXJyb3IoJ21vZGVsLnRhYmxlY3JlYXRpb24uZGJpbmRleGNyZWF0ZScsIGVycjEpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gbWF0ZXJpYWxpemVkIHZpZXcgY3JlYXRpb25cbiAgICAgIGlmIChtb2RlbFNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3MpIHtcbiAgICAgICAgYXN5bmMuZWFjaFNlcmllcyhPYmplY3Qua2V5cyhtb2RlbFNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3MpLCAodmlld05hbWUsIG5leHQpID0+IHtcbiAgICAgICAgICBjb25zdCBtYXRWaWV3UXVlcnkgPSB0aGlzLl9jcmVhdGVfbWF0ZXJpYWxpemVkX3ZpZXdfcXVlcnkoXG4gICAgICAgICAgICB0YWJsZU5hbWUsXG4gICAgICAgICAgICB2aWV3TmFtZSxcbiAgICAgICAgICAgIG1vZGVsU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1t2aWV3TmFtZV0sXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLl9leGVjdXRlX2RlZmluaXRpb25fcXVlcnkobWF0Vmlld1F1ZXJ5LCBbXSwgKGVycjIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycjIpIG5leHQoYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5tYXR2aWV3Y3JlYXRlJywgZXJyMikpO1xuICAgICAgICAgICAgZWxzZSBuZXh0KG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICAgIH0gZWxzZSBjYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICBjb25zdCBhZnRlckRCSW5kZXggPSAoZXJyMSkgPT4ge1xuICAgICAgaWYgKGVycjEpIHtcbiAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5kYmluZGV4Y3JlYXRlJywgZXJyMSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBjdXN0b20gaW5kZXggY3JlYXRpb25cbiAgICAgIGlmIChtb2RlbFNjaGVtYS5jdXN0b21faW5kZXhlcykge1xuICAgICAgICBhc3luYy5lYWNoU2VyaWVzKG1vZGVsU2NoZW1hLmN1c3RvbV9pbmRleGVzLCAoaWR4LCBuZXh0KSA9PiB7XG4gICAgICAgICAgdGhpcy5fZXhlY3V0ZV9kZWZpbml0aW9uX3F1ZXJ5KHRoaXMuX2NyZWF0ZV9jdXN0b21faW5kZXhfcXVlcnkodGFibGVOYW1lLCBpZHgpLCBbXSwgKGVycjIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycjIpIG5leHQoZXJyMik7XG4gICAgICAgICAgICBlbHNlIG5leHQobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgYWZ0ZXJDdXN0b21JbmRleCk7XG4gICAgICB9IGVsc2UgaWYgKG1vZGVsU2NoZW1hLmN1c3RvbV9pbmRleCkge1xuICAgICAgICBjb25zdCBjdXN0b21JbmRleFF1ZXJ5ID0gdGhpcy5fY3JlYXRlX2N1c3RvbV9pbmRleF9xdWVyeSh0YWJsZU5hbWUsIG1vZGVsU2NoZW1hLmN1c3RvbV9pbmRleCk7XG4gICAgICAgIHRoaXMuX2V4ZWN1dGVfZGVmaW5pdGlvbl9xdWVyeShjdXN0b21JbmRleFF1ZXJ5LCBbXSwgKGVycjIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmIChlcnIyKSBhZnRlckN1c3RvbUluZGV4KGVycjIpO1xuICAgICAgICAgIGVsc2UgYWZ0ZXJDdXN0b21JbmRleChudWxsLCByZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBhZnRlckN1c3RvbUluZGV4KCk7XG4gICAgfTtcblxuICAgIGNvbnN0IGFmdGVyREJDcmVhdGUgPSAoZXJyMSkgPT4ge1xuICAgICAgaWYgKGVycjEpIHtcbiAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5kYmNyZWF0ZScsIGVycjEpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gaW5kZXggY3JlYXRpb25cbiAgICAgIGlmIChtb2RlbFNjaGVtYS5pbmRleGVzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgYXN5bmMuZWFjaFNlcmllcyhtb2RlbFNjaGVtYS5pbmRleGVzLCAoaWR4LCBuZXh0KSA9PiB7XG4gICAgICAgICAgdGhpcy5fZXhlY3V0ZV9kZWZpbml0aW9uX3F1ZXJ5KHRoaXMuX2NyZWF0ZV9pbmRleF9xdWVyeSh0YWJsZU5hbWUsIGlkeCksIFtdLCAoZXJyMiwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyMikgbmV4dChlcnIyKTtcbiAgICAgICAgICAgIGVsc2UgbmV4dChudWxsLCByZXN1bHQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBhZnRlckRCSW5kZXgpO1xuICAgICAgfSBlbHNlIGFmdGVyREJJbmRleCgpO1xuICAgIH07XG5cbiAgICBpZiAoZGJTY2hlbWEpIHtcbiAgICAgIGxldCBub3JtYWxpemVkTW9kZWxTY2hlbWE7XG4gICAgICBsZXQgbm9ybWFsaXplZERCU2NoZW1hO1xuXG4gICAgICB0cnkge1xuICAgICAgICBub3JtYWxpemVkTW9kZWxTY2hlbWEgPSBzY2hlbWVyLm5vcm1hbGl6ZV9tb2RlbF9zY2hlbWEobW9kZWxTY2hlbWEpO1xuICAgICAgICBub3JtYWxpemVkREJTY2hlbWEgPSBzY2hlbWVyLm5vcm1hbGl6ZV9tb2RlbF9zY2hlbWEoZGJTY2hlbWEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyAoYnVpbGRFcnJvcignbW9kZWwudmFsaWRhdG9yLmludmFsaWRzY2hlbWEnLCBlLm1lc3NhZ2UpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF8uaXNFcXVhbChub3JtYWxpemVkTW9kZWxTY2hlbWEsIG5vcm1hbGl6ZWREQlNjaGVtYSkpIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGRyb3BSZWNyZWF0ZVRhYmxlID0gKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHBlcm1pc3Npb24gPSB0aGlzLl9hc2tfY29uZmlybWF0aW9uKFxuICAgICAgICAgICAgdXRpbC5mb3JtYXQoXG4gICAgICAgICAgICAgICdNaWdyYXRpb246IG1vZGVsIHNjaGVtYSBjaGFuZ2VkIGZvciB0YWJsZSBcIiVzXCIsIGRyb3AgdGFibGUgJiByZWNyZWF0ZT8gKGRhdGEgd2lsbCBiZSBsb3N0ISkgKHkvbik6ICcsXG4gICAgICAgICAgICAgIHRhYmxlTmFtZSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAocGVybWlzc2lvbi50b0xvd2VyQ2FzZSgpID09PSAneScpIHtcbiAgICAgICAgICAgIGlmIChub3JtYWxpemVkREJTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG12aWV3cyA9IE9iamVjdC5rZXlzKG5vcm1hbGl6ZWREQlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3MpO1xuXG4gICAgICAgICAgICAgIHRoaXMuZHJvcF9tdmlld3MobXZpZXdzLCAoZXJyMSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIxKSB7XG4gICAgICAgICAgICAgICAgICBjYWxsYmFjayhidWlsZEVycm9yKCdtb2RlbC50YWJsZWNyZWF0aW9uLm1hdHZpZXdkcm9wJywgZXJyMSkpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuZHJvcF90YWJsZSgoZXJyMikgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGVycjIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5kYmRyb3AnLCBlcnIyKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZVRhYmxlUXVlcnkgPSB0aGlzLl9jcmVhdGVfdGFibGVfcXVlcnkodGFibGVOYW1lLCBtb2RlbFNjaGVtYSk7XG4gICAgICAgICAgICAgICAgICB0aGlzLl9leGVjdXRlX2RlZmluaXRpb25fcXVlcnkoY3JlYXRlVGFibGVRdWVyeSwgW10sIGFmdGVyREJDcmVhdGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuZHJvcF90YWJsZSgoZXJyMSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIxKSB7XG4gICAgICAgICAgICAgICAgICBjYWxsYmFjayhidWlsZEVycm9yKCdtb2RlbC50YWJsZWNyZWF0aW9uLmRiZHJvcCcsIGVycjEpKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgY3JlYXRlVGFibGVRdWVyeSA9IHRoaXMuX2NyZWF0ZV90YWJsZV9xdWVyeSh0YWJsZU5hbWUsIG1vZGVsU2NoZW1hKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9leGVjdXRlX2RlZmluaXRpb25fcXVlcnkoY3JlYXRlVGFibGVRdWVyeSwgW10sIGFmdGVyREJDcmVhdGUpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5zY2hlbWFtaXNtYXRjaCcsIHRhYmxlTmFtZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBhZnRlckRCQWx0ZXIgPSAoZXJyMSkgPT4ge1xuICAgICAgICAgIGlmIChlcnIxKSB7XG4gICAgICAgICAgICBpZiAoZXJyMS5tZXNzYWdlICE9PSAnYnJlYWsnKSBjYWxsYmFjayhlcnIxKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gaXQgc2hvdWxkIGNyZWF0ZS9kcm9wIGluZGV4ZXMvY3VzdG9tX2luZGV4ZXMvbWF0ZXJpYWxpemVkX3ZpZXdzIHRoYXQgYXJlIGFkZGVkL3JlbW92ZWQgaW4gbW9kZWwgc2NoZW1hXG4gICAgICAgICAgLy8gcmVtb3ZlIGNvbW1vbiBpbmRleGVzL2N1c3RvbV9pbmRleGVzL21hdGVyaWFsaXplZF92aWV3cyBmcm9tIG5vcm1hbGl6ZWRNb2RlbFNjaGVtYSBhbmQgbm9ybWFsaXplZERCU2NoZW1hXG4gICAgICAgICAgLy8gdGhlbiBkcm9wIGFsbCByZW1haW5pbmcgaW5kZXhlcy9jdXN0b21faW5kZXhlcy9tYXRlcmlhbGl6ZWRfdmlld3MgZnJvbSBub3JtYWxpemVkREJTY2hlbWFcbiAgICAgICAgICAvLyBhbmQgYWRkIGFsbCByZW1haW5pbmcgaW5kZXhlcy9jdXN0b21faW5kZXhlcy9tYXRlcmlhbGl6ZWRfdmlld3MgZnJvbSBub3JtYWxpemVkTW9kZWxTY2hlbWFcbiAgICAgICAgICBjb25zdCBhZGRlZEluZGV4ZXMgPSBfLmRpZmZlcmVuY2Uobm9ybWFsaXplZE1vZGVsU2NoZW1hLmluZGV4ZXMsIG5vcm1hbGl6ZWREQlNjaGVtYS5pbmRleGVzKTtcbiAgICAgICAgICBjb25zdCByZW1vdmVkSW5kZXhlcyA9IF8uZGlmZmVyZW5jZShub3JtYWxpemVkREJTY2hlbWEuaW5kZXhlcywgbm9ybWFsaXplZE1vZGVsU2NoZW1hLmluZGV4ZXMpO1xuICAgICAgICAgIGNvbnN0IHJlbW92ZWRJbmRleE5hbWVzID0gW107XG4gICAgICAgICAgcmVtb3ZlZEluZGV4ZXMuZm9yRWFjaCgocmVtb3ZlZEluZGV4KSA9PiB7XG4gICAgICAgICAgICByZW1vdmVkSW5kZXhOYW1lcy5wdXNoKGRiU2NoZW1hLmluZGV4X25hbWVzW3JlbW92ZWRJbmRleF0pO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgY29uc3QgYWRkZWRDdXN0b21JbmRleGVzID0gXy5maWx0ZXIoXG4gICAgICAgICAgICBub3JtYWxpemVkTW9kZWxTY2hlbWEuY3VzdG9tX2luZGV4ZXMsXG4gICAgICAgICAgICAob2JqKSA9PiAoIV8uZmluZChub3JtYWxpemVkREJTY2hlbWEuY3VzdG9tX2luZGV4ZXMsIG9iaikpLFxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgcmVtb3ZlZEN1c3RvbUluZGV4ZXMgPSBfLmZpbHRlcihcbiAgICAgICAgICAgIG5vcm1hbGl6ZWREQlNjaGVtYS5jdXN0b21faW5kZXhlcyxcbiAgICAgICAgICAgIChvYmopID0+ICghXy5maW5kKG5vcm1hbGl6ZWRNb2RlbFNjaGVtYS5jdXN0b21faW5kZXhlcywgb2JqKSksXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZW1vdmVkQ3VzdG9tSW5kZXhlcy5mb3JFYWNoKChyZW1vdmVkSW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJlbW92ZWRJbmRleE5hbWVzLnB1c2goZGJTY2hlbWEuaW5kZXhfbmFtZXNbb2JqZWN0SGFzaChyZW1vdmVkSW5kZXgpXSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBjb25zdCBhZGRlZE1hdGVyaWFsaXplZFZpZXdzID0gXy5maWx0ZXIoXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhub3JtYWxpemVkTW9kZWxTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzKSxcbiAgICAgICAgICAgICh2aWV3TmFtZSkgPT5cbiAgICAgICAgICAgICAgKCFfLmZpbmQobm9ybWFsaXplZERCU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3cywgbm9ybWFsaXplZE1vZGVsU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1t2aWV3TmFtZV0pKSxcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IHJlbW92ZWRNYXRlcmlhbGl6ZWRWaWV3cyA9IF8uZmlsdGVyKFxuICAgICAgICAgICAgT2JqZWN0LmtleXMobm9ybWFsaXplZERCU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3cyksXG4gICAgICAgICAgICAodmlld05hbWUpID0+XG4gICAgICAgICAgICAgICghXy5maW5kKG5vcm1hbGl6ZWRNb2RlbFNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3MsIG5vcm1hbGl6ZWREQlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3Nbdmlld05hbWVdKSksXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIHJlbW92ZSBhbHRlcmVkIG1hdGVyaWFsaXplZCB2aWV3c1xuICAgICAgICAgIGlmIChyZW1vdmVkTWF0ZXJpYWxpemVkVmlld3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcGVybWlzc2lvbiA9IHRoaXMuX2Fza19jb25maXJtYXRpb24oXG4gICAgICAgICAgICAgIHV0aWwuZm9ybWF0KFxuICAgICAgICAgICAgICAgICdNaWdyYXRpb246IG1vZGVsIHNjaGVtYSBmb3IgdGFibGUgXCIlc1wiIGhhcyByZW1vdmVkIG1hdGVyaWFsaXplZF92aWV3czogJWosIGRyb3AgdGhlbT8gKHkvbik6ICcsXG4gICAgICAgICAgICAgICAgdGFibGVOYW1lLFxuICAgICAgICAgICAgICAgIHJlbW92ZWRNYXRlcmlhbGl6ZWRWaWV3cyxcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAocGVybWlzc2lvbi50b0xvd2VyQ2FzZSgpICE9PSAneScpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5zY2hlbWFtaXNtYXRjaCcsIHRhYmxlTmFtZSkpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZW1vdmVkSW5kZXhOYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBwZXJtaXNzaW9uID0gdGhpcy5fYXNrX2NvbmZpcm1hdGlvbihcbiAgICAgICAgICAgICAgdXRpbC5mb3JtYXQoXG4gICAgICAgICAgICAgICAgJ01pZ3JhdGlvbjogbW9kZWwgc2NoZW1hIGZvciB0YWJsZSBcIiVzXCIgaGFzIHJlbW92ZWQgaW5kZXhlczogJWosIGRyb3AgdGhlbT8gKHkvbik6ICcsXG4gICAgICAgICAgICAgICAgdGFibGVOYW1lLFxuICAgICAgICAgICAgICAgIHJlbW92ZWRJbmRleE5hbWVzLFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChwZXJtaXNzaW9uLnRvTG93ZXJDYXNlKCkgIT09ICd5Jykge1xuICAgICAgICAgICAgICBjYWxsYmFjayhidWlsZEVycm9yKCdtb2RlbC50YWJsZWNyZWF0aW9uLnNjaGVtYW1pc21hdGNoJywgdGFibGVOYW1lKSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmRyb3BfbXZpZXdzKHJlbW92ZWRNYXRlcmlhbGl6ZWRWaWV3cywgKGVycjIpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIyKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKGJ1aWxkRXJyb3IoJ21vZGVsLnRhYmxlY3JlYXRpb24ubWF0dmlld2Ryb3AnLCBlcnIyKSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gcmVtb3ZlIGFsdGVyZWQgaW5kZXhlcyBieSBpbmRleCBuYW1lXG4gICAgICAgICAgICB0aGlzLmRyb3BfaW5kZXhlcyhyZW1vdmVkSW5kZXhOYW1lcywgKGVycjMpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGVycjMpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhidWlsZEVycm9yKCdtb2RlbC50YWJsZWNyZWF0aW9uLmRiaW5kZXhkcm9wJywgZXJyMykpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIGFkZCBhbHRlcmVkIGluZGV4ZXNcbiAgICAgICAgICAgICAgYXN5bmMuZWFjaFNlcmllcyhhZGRlZEluZGV4ZXMsIChpZHgsIG5leHQpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9leGVjdXRlX2RlZmluaXRpb25fcXVlcnkodGhpcy5fY3JlYXRlX2luZGV4X3F1ZXJ5KHRhYmxlTmFtZSwgaWR4KSwgW10sIChlcnI0LCByZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChlcnI0KSBuZXh0KGVycjQpO1xuICAgICAgICAgICAgICAgICAgZWxzZSBuZXh0KG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0sIChlcnI0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycjQpIHtcbiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGJ1aWxkRXJyb3IoJ21vZGVsLnRhYmxlY3JlYXRpb24uZGJpbmRleGNyZWF0ZScsIGVycjQpKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBhZGQgYWx0ZXJlZCBjdXN0b20gaW5kZXhlc1xuICAgICAgICAgICAgICAgIGFzeW5jLmVhY2hTZXJpZXMoYWRkZWRDdXN0b21JbmRleGVzLCAoaWR4LCBuZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBjdXN0b21JbmRleFF1ZXJ5ID0gdGhpcy5fY3JlYXRlX2N1c3RvbV9pbmRleF9xdWVyeSh0YWJsZU5hbWUsIGlkeCk7XG4gICAgICAgICAgICAgICAgICB0aGlzLl9leGVjdXRlX2RlZmluaXRpb25fcXVlcnkoY3VzdG9tSW5kZXhRdWVyeSwgW10sIChlcnI1LCByZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycjUpIG5leHQoZXJyNSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgbmV4dChudWxsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgKGVycjUpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChlcnI1KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGJ1aWxkRXJyb3IoJ21vZGVsLnRhYmxlY3JlYXRpb24uZGJpbmRleGNyZWF0ZScsIGVycjUpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAvLyBhZGQgYWx0ZXJlZCBtYXRlcmlhbGl6ZWRfdmlld3NcbiAgICAgICAgICAgICAgICAgIGFzeW5jLmVhY2hTZXJpZXMoYWRkZWRNYXRlcmlhbGl6ZWRWaWV3cywgKHZpZXdOYW1lLCBuZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdFZpZXdRdWVyeSA9IHRoaXMuX2NyZWF0ZV9tYXRlcmlhbGl6ZWRfdmlld19xdWVyeShcbiAgICAgICAgICAgICAgICAgICAgICB0YWJsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgdmlld05hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgbW9kZWxTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzW3ZpZXdOYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXhlY3V0ZV9kZWZpbml0aW9uX3F1ZXJ5KG1hdFZpZXdRdWVyeSwgW10sIChlcnI2LCByZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyNikgbmV4dChidWlsZEVycm9yKCdtb2RlbC50YWJsZWNyZWF0aW9uLm1hdHZpZXdjcmVhdGUnLCBlcnI2KSk7XG4gICAgICAgICAgICAgICAgICAgICAgZWxzZSBuZXh0KG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGFsdGVyREJUYWJsZSA9ICgpID0+IHtcbiAgICAgICAgICBjb25zdCBkaWZmZXJlbmNlcyA9IGRlZXBEaWZmKG5vcm1hbGl6ZWREQlNjaGVtYS5maWVsZHMsIG5vcm1hbGl6ZWRNb2RlbFNjaGVtYS5maWVsZHMpO1xuICAgICAgICAgIGFzeW5jLmVhY2hTZXJpZXMoZGlmZmVyZW5jZXMsIChkaWZmLCBuZXh0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBkaWZmLnBhdGhbMF07XG4gICAgICAgICAgICBjb25zdCBhbHRlckZpZWxkVHlwZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgcGVybWlzc2lvbiA9IHRoaXMuX2Fza19jb25maXJtYXRpb24oXG4gICAgICAgICAgICAgICAgdXRpbC5mb3JtYXQoXG4gICAgICAgICAgICAgICAgICAnTWlncmF0aW9uOiBtb2RlbCBzY2hlbWEgZm9yIHRhYmxlIFwiJXNcIiBoYXMgbmV3IHR5cGUgZm9yIGZpZWxkIFwiJXNcIiwgJyArXG4gICAgICAgICAgICAgICAgICAnYWx0ZXIgdGFibGUgdG8gdXBkYXRlIGNvbHVtbiB0eXBlPyAoeS9uKTogJyxcbiAgICAgICAgICAgICAgICAgIHRhYmxlTmFtZSxcbiAgICAgICAgICAgICAgICAgIGZpZWxkTmFtZSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBpZiAocGVybWlzc2lvbi50b0xvd2VyQ2FzZSgpID09PSAneScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFsdGVyX3RhYmxlKCdBTFRFUicsIGZpZWxkTmFtZSwgZGlmZi5yaHMsIChlcnIxLCByZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChlcnIxKSBuZXh0KGJ1aWxkRXJyb3IoJ21vZGVsLnRhYmxlY3JlYXRpb24uZGJhbHRlcicsIGVycjEpKTtcbiAgICAgICAgICAgICAgICAgIGVsc2UgbmV4dChudWxsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5leHQoYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5zY2hlbWFtaXNtYXRjaCcsIHRhYmxlTmFtZSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBhbHRlckFkZEZpZWxkID0gKCkgPT4ge1xuICAgICAgICAgICAgICBsZXQgdHlwZSA9ICcnO1xuICAgICAgICAgICAgICBpZiAoZGlmZi5wYXRoLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGlmZi5wYXRoWzFdID09PSAndHlwZScpIHtcbiAgICAgICAgICAgICAgICAgIHR5cGUgPSBkaWZmLnJocztcbiAgICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVkTW9kZWxTY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0udHlwZURlZikge1xuICAgICAgICAgICAgICAgICAgICB0eXBlICs9IG5vcm1hbGl6ZWRNb2RlbFNjaGVtYS5maWVsZHNbZmllbGROYW1lXS50eXBlRGVmO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0eXBlID0gbm9ybWFsaXplZE1vZGVsU2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdLnR5cGU7XG4gICAgICAgICAgICAgICAgICB0eXBlICs9IGRpZmYucmhzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0eXBlID0gZGlmZi5yaHMudHlwZTtcbiAgICAgICAgICAgICAgICBpZiAoZGlmZi5yaHMudHlwZURlZikgdHlwZSArPSBkaWZmLnJocy50eXBlRGVmO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy5hbHRlcl90YWJsZSgnQUREJywgZmllbGROYW1lLCB0eXBlLCAoZXJyMSwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycjEpIG5leHQoYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5kYmFsdGVyJywgZXJyMSkpO1xuICAgICAgICAgICAgICAgIGVsc2UgbmV4dChudWxsLCByZXN1bHQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IGFsdGVyUmVtb3ZlRmllbGQgPSAobmV4dENhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgIC8vIHJlbW92ZSBkZXBlbmRlbnQgaW5kZXhlcy9jdXN0b21faW5kZXhlcy9tYXRlcmlhbGl6ZWRfdmlld3MsXG4gICAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGVtIGluIG5vcm1hbGl6ZWREQlNjaGVtYSwgdGhlbiBhbHRlclxuICAgICAgICAgICAgICBjb25zdCBkZXBlbmRlbnRJbmRleGVzID0gW107XG4gICAgICAgICAgICAgIGNvbnN0IHB1bGxJbmRleGVzID0gW107XG4gICAgICAgICAgICAgIG5vcm1hbGl6ZWREQlNjaGVtYS5pbmRleGVzLmZvckVhY2goKGRiSW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleFNwbGl0ID0gZGJJbmRleC5zcGxpdCgvWygpXS9nKTtcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXhGaWVsZE5hbWUgPSAnJztcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXhTcGxpdC5sZW5ndGggPiAxKSBpbmRleEZpZWxkTmFtZSA9IGluZGV4U3BsaXRbMV07XG4gICAgICAgICAgICAgICAgZWxzZSBpbmRleEZpZWxkTmFtZSA9IGluZGV4U3BsaXRbMF07XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4RmllbGROYW1lID09PSBmaWVsZE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgIGRlcGVuZGVudEluZGV4ZXMucHVzaChkYlNjaGVtYS5pbmRleF9uYW1lc1tkYkluZGV4XSk7XG4gICAgICAgICAgICAgICAgICBwdWxsSW5kZXhlcy5wdXNoKGRiSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIF8ucHVsbEFsbChub3JtYWxpemVkREJTY2hlbWEuaW5kZXhlcywgcHVsbEluZGV4ZXMpO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHB1bGxDdXN0b21JbmRleGVzID0gW107XG4gICAgICAgICAgICAgIG5vcm1hbGl6ZWREQlNjaGVtYS5jdXN0b21faW5kZXhlcy5mb3JFYWNoKChkYkluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRiSW5kZXgub24gPT09IGZpZWxkTmFtZSkge1xuICAgICAgICAgICAgICAgICAgZGVwZW5kZW50SW5kZXhlcy5wdXNoKGRiU2NoZW1hLmluZGV4X25hbWVzW29iamVjdEhhc2goZGJJbmRleCldKTtcbiAgICAgICAgICAgICAgICAgIHB1bGxDdXN0b21JbmRleGVzLnB1c2goZGJJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgXy5wdWxsQWxsKG5vcm1hbGl6ZWREQlNjaGVtYS5jdXN0b21faW5kZXhlcywgcHVsbEN1c3RvbUluZGV4ZXMpO1xuXG4gICAgICAgICAgICAgIGNvbnN0IGRlcGVuZGVudFZpZXdzID0gW107XG4gICAgICAgICAgICAgIE9iamVjdC5rZXlzKG5vcm1hbGl6ZWREQlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3MpLmZvckVhY2goKGRiVmlld05hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZERCU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1tkYlZpZXdOYW1lXS5zZWxlY3QuaW5kZXhPZihmaWVsZE5hbWUpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgIGRlcGVuZGVudFZpZXdzLnB1c2goZGJWaWV3TmFtZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkREJTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzW2RiVmlld05hbWVdLnNlbGVjdFswXSA9PT0gJyonKSB7XG4gICAgICAgICAgICAgICAgICBkZXBlbmRlbnRWaWV3cy5wdXNoKGRiVmlld05hbWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZERCU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1tkYlZpZXdOYW1lXS5rZXkuaW5kZXhPZihmaWVsZE5hbWUpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgIGRlcGVuZGVudFZpZXdzLnB1c2goZGJWaWV3TmFtZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkREJTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzW2RiVmlld05hbWVdLmtleVswXSBpbnN0YW5jZW9mIEFycmF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgbm9ybWFsaXplZERCU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1tkYlZpZXdOYW1lXS5rZXlbMF0uaW5kZXhPZihmaWVsZE5hbWUpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgIGRlcGVuZGVudFZpZXdzLnB1c2goZGJWaWV3TmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgZGVwZW5kZW50Vmlld3MuZm9yRWFjaCgodmlld05hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBkZWxldGUgbm9ybWFsaXplZERCU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1t2aWV3TmFtZV07XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIHRoaXMuZHJvcF9tdmlld3MoZGVwZW5kZW50Vmlld3MsIChlcnIxKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycjEpIHtcbiAgICAgICAgICAgICAgICAgIG5leHRDYWxsYmFjayhidWlsZEVycm9yKCdtb2RlbC50YWJsZWNyZWF0aW9uLm1hdHZpZXdkcm9wJywgZXJyMSkpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuZHJvcF9pbmRleGVzKGRlcGVuZGVudEluZGV4ZXMsIChlcnIyKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoZXJyMikge1xuICAgICAgICAgICAgICAgICAgICBuZXh0Q2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5kYmluZGV4ZHJvcCcsIGVycjIpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB0aGlzLmFsdGVyX3RhYmxlKCdEUk9QJywgZmllbGROYW1lLCAnJywgKGVycjMsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyMykgbmV4dENhbGxiYWNrKGJ1aWxkRXJyb3IoJ21vZGVsLnRhYmxlY3JlYXRpb24uZGJhbHRlcicsIGVycjMpKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBuZXh0Q2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChkaWZmLmtpbmQgPT09ICdOJykge1xuICAgICAgICAgICAgICBjb25zdCBwZXJtaXNzaW9uID0gdGhpcy5fYXNrX2NvbmZpcm1hdGlvbihcbiAgICAgICAgICAgICAgICB1dGlsLmZvcm1hdChcbiAgICAgICAgICAgICAgICAgICdNaWdyYXRpb246IG1vZGVsIHNjaGVtYSBmb3IgdGFibGUgXCIlc1wiIGhhcyBhZGRlZCBmaWVsZCBcIiVzXCIsIGFsdGVyIHRhYmxlIHRvIGFkZCBjb2x1bW4/ICh5L24pOiAnLFxuICAgICAgICAgICAgICAgICAgdGFibGVOYW1lLFxuICAgICAgICAgICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmIChwZXJtaXNzaW9uLnRvTG93ZXJDYXNlKCkgPT09ICd5Jykge1xuICAgICAgICAgICAgICAgIGFsdGVyQWRkRmllbGQoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXh0KGJ1aWxkRXJyb3IoJ21vZGVsLnRhYmxlY3JlYXRpb24uc2NoZW1hbWlzbWF0Y2gnLCB0YWJsZU5hbWUpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChkaWZmLmtpbmQgPT09ICdEJykge1xuICAgICAgICAgICAgICBjb25zdCBwZXJtaXNzaW9uID0gdGhpcy5fYXNrX2NvbmZpcm1hdGlvbihcbiAgICAgICAgICAgICAgICB1dGlsLmZvcm1hdChcbiAgICAgICAgICAgICAgICAgICdNaWdyYXRpb246IG1vZGVsIHNjaGVtYSBmb3IgdGFibGUgXCIlc1wiIGhhcyByZW1vdmVkIGZpZWxkIFwiJXNcIiwgYWx0ZXIgdGFibGUgdG8gZHJvcCBjb2x1bW4/ICcgK1xuICAgICAgICAgICAgICAgICAgJyhjb2x1bW4gZGF0YSB3aWxsIGJlIGxvc3QgJiBkZXBlbmRlbnQgaW5kZXhlcy92aWV3cyB3aWxsIGJlIHJlY3JlYXRlZCEpICh5L24pOiAnLFxuICAgICAgICAgICAgICAgICAgdGFibGVOYW1lLFxuICAgICAgICAgICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmIChwZXJtaXNzaW9uLnRvTG93ZXJDYXNlKCkgPT09ICd5Jykge1xuICAgICAgICAgICAgICAgIGFsdGVyUmVtb3ZlRmllbGQobmV4dCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV4dChidWlsZEVycm9yKCdtb2RlbC50YWJsZWNyZWF0aW9uLnNjaGVtYW1pc21hdGNoJywgdGFibGVOYW1lKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGlmZi5raW5kID09PSAnRScpIHtcbiAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGFsdGVyIGZpZWxkIHR5cGUgaXMgcG9zc2libGUsIG90aGVyd2lzZSB0cnkgRCBhbmQgdGhlbiBOXG4gICAgICAgICAgICAgIGlmIChkaWZmLnBhdGhbMV0gPT09ICd0eXBlJykge1xuICAgICAgICAgICAgICAgIGlmIChkaWZmLmxocyA9PT0gJ2ludCcgJiYgZGlmZi5yaHMgPT09ICd2YXJpbnQnKSB7XG4gICAgICAgICAgICAgICAgICAvLyBhbHRlciBmaWVsZCB0eXBlIHBvc3NpYmxlXG4gICAgICAgICAgICAgICAgICBhbHRlckZpZWxkVHlwZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZERCU2NoZW1hLmtleS5pbmRleE9mKGZpZWxkTmFtZSkgPiAwKSB7IC8vIGNoZWNrIGlmIGZpZWxkIHBhcnQgb2YgY2x1c3RlcmluZyBrZXlcbiAgICAgICAgICAgICAgICAgIC8vIGFsdGVyIGZpZWxkIHR5cGUgaW1wb3NzaWJsZVxuICAgICAgICAgICAgICAgICAgY29uc3QgcGVybWlzc2lvbiA9IHRoaXMuX2Fza19jb25maXJtYXRpb24oXG4gICAgICAgICAgICAgICAgICAgIHV0aWwuZm9ybWF0KFxuICAgICAgICAgICAgICAgICAgICAgICdNaWdyYXRpb246IG1vZGVsIHNjaGVtYSBmb3IgdGFibGUgXCIlc1wiIGhhcyBuZXcgaW5jb21wYXRpYmxlIHR5cGUgZm9yIHByaW1hcnkga2V5IGZpZWxkIFwiJXNcIiwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgJ3Byb2NlZWQgdG8gcmVjcmVhdGUgdGFibGU/ICh5L24pOiAnLFxuICAgICAgICAgICAgICAgICAgICAgIHRhYmxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICBmaWVsZE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgaWYgKHBlcm1pc3Npb24udG9Mb3dlckNhc2UoKSA9PT0gJ3knKSB7XG4gICAgICAgICAgICAgICAgICAgIGRyb3BSZWNyZWF0ZVRhYmxlKCk7XG4gICAgICAgICAgICAgICAgICAgIG5leHQobmV3IEVycm9yKCdicmVhaycpKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQoYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5zY2hlbWFtaXNtYXRjaCcsIHRhYmxlTmFtZSkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoWyd0ZXh0JywgJ2FzY2lpJywgJ2JpZ2ludCcsICdib29sZWFuJywgJ2RlY2ltYWwnLFxuICAgICAgICAgICAgICAgICAgJ2RvdWJsZScsICdmbG9hdCcsICdpbmV0JywgJ2ludCcsICd0aW1lc3RhbXAnLCAndGltZXV1aWQnLFxuICAgICAgICAgICAgICAgICAgJ3V1aWQnLCAndmFyY2hhcicsICd2YXJpbnQnXS5pbmRleE9mKGRpZmYubGhzKSA+IC0xICYmIGRpZmYucmhzID09PSAnYmxvYicpIHtcbiAgICAgICAgICAgICAgICAgIC8vIGFsdGVyIGZpZWxkIHR5cGUgcG9zc2libGVcbiAgICAgICAgICAgICAgICAgIGFsdGVyRmllbGRUeXBlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkaWZmLmxocyA9PT0gJ3RpbWV1dWlkJyAmJiBkaWZmLnJocyA9PT0gJ3V1aWQnKSB7XG4gICAgICAgICAgICAgICAgICAvLyBhbHRlciBmaWVsZCB0eXBlIHBvc3NpYmxlXG4gICAgICAgICAgICAgICAgICBhbHRlckZpZWxkVHlwZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZERCU2NoZW1hLmtleVswXS5pbmRleE9mKGZpZWxkTmFtZSkgPiAtMSkgeyAvLyBjaGVjayBpZiBmaWVsZCBwYXJ0IG9mIHBhcnRpdGlvbiBrZXlcbiAgICAgICAgICAgICAgICAgIC8vIGFsdGVyIGZpZWxkIHR5cGUgaW1wb3NzaWJsZVxuICAgICAgICAgICAgICAgICAgY29uc3QgcGVybWlzc2lvbiA9IHRoaXMuX2Fza19jb25maXJtYXRpb24oXG4gICAgICAgICAgICAgICAgICAgIHV0aWwuZm9ybWF0KFxuICAgICAgICAgICAgICAgICAgICAgICdNaWdyYXRpb246IG1vZGVsIHNjaGVtYSBmb3IgdGFibGUgXCIlc1wiIGhhcyBuZXcgaW5jb21wYXRpYmxlIHR5cGUgZm9yIHByaW1hcnkga2V5IGZpZWxkIFwiJXNcIiwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgJ3Byb2NlZWQgdG8gcmVjcmVhdGUgdGFibGU/ICh5L24pOiAnLFxuICAgICAgICAgICAgICAgICAgICAgIHRhYmxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICBmaWVsZE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgaWYgKHBlcm1pc3Npb24udG9Mb3dlckNhc2UoKSA9PT0gJ3knKSB7XG4gICAgICAgICAgICAgICAgICAgIGRyb3BSZWNyZWF0ZVRhYmxlKCk7XG4gICAgICAgICAgICAgICAgICAgIG5leHQobmV3IEVycm9yKCdicmVhaycpKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQoYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5zY2hlbWFtaXNtYXRjaCcsIHRhYmxlTmFtZSkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBhbHRlciB0eXBlIGltcG9zc2libGVcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHBlcm1pc3Npb24gPSB0aGlzLl9hc2tfY29uZmlybWF0aW9uKFxuICAgICAgICAgICAgICAgICAgICB1dGlsLmZvcm1hdChcbiAgICAgICAgICAgICAgICAgICAgICAnTWlncmF0aW9uOiBtb2RlbCBzY2hlbWEgZm9yIHRhYmxlIFwiJXNcIiBoYXMgbmV3IGluY29tcGF0aWJsZSB0eXBlIGZvciBmaWVsZCBcIiVzXCIsIGRyb3AgY29sdW1uICcgK1xuICAgICAgICAgICAgICAgICAgICAgICdhbmQgcmVjcmVhdGU/IChjb2x1bW4gZGF0YSB3aWxsIGJlIGxvc3QgJiBkZXBlbmRlbnQgaW5kZXhlcy92aWV3cyB3aWxsIGJlIHJlY3JlYXRlZCEpICh5L24pOiAnLFxuICAgICAgICAgICAgICAgICAgICAgIHRhYmxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICBmaWVsZE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgaWYgKHBlcm1pc3Npb24udG9Mb3dlckNhc2UoKSA9PT0gJ3knKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsdGVyUmVtb3ZlRmllbGQoKGVycjEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyMSkgbmV4dChlcnIxKTtcbiAgICAgICAgICAgICAgICAgICAgICBlbHNlIGFsdGVyQWRkRmllbGQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXh0KGJ1aWxkRXJyb3IoJ21vZGVsLnRhYmxlY3JlYXRpb24uc2NoZW1hbWlzbWF0Y2gnLCB0YWJsZU5hbWUpKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gYWx0ZXIgdHlwZSBpbXBvc3NpYmxlXG4gICAgICAgICAgICAgICAgY29uc3QgcGVybWlzc2lvbiA9IHRoaXMuX2Fza19jb25maXJtYXRpb24oXG4gICAgICAgICAgICAgICAgICB1dGlsLmZvcm1hdChcbiAgICAgICAgICAgICAgICAgICAgJ01pZ3JhdGlvbjogbW9kZWwgc2NoZW1hIGZvciB0YWJsZSBcIiVzXCIgaGFzIG5ldyBpbmNvbXBhdGlibGUgdHlwZSBmb3IgZmllbGQgXCIlc1wiLCBkcm9wIGNvbHVtbiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2FuZCByZWNyZWF0ZT8gKGNvbHVtbiBkYXRhIHdpbGwgYmUgbG9zdCAmIGRlcGVuZGVudCBpbmRleGVzL3ZpZXdzIHdpbGwgYmUgcmVjcmVhdGVkISkgKHkvbik6ICcsXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChwZXJtaXNzaW9uLnRvTG93ZXJDYXNlKCkgPT09ICd5Jykge1xuICAgICAgICAgICAgICAgICAgYWx0ZXJSZW1vdmVGaWVsZCgoZXJyMSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyMSkgbmV4dChlcnIxKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBhbHRlckFkZEZpZWxkKCk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgbmV4dChidWlsZEVycm9yKCdtb2RlbC50YWJsZWNyZWF0aW9uLnNjaGVtYW1pc21hdGNoJywgdGFibGVOYW1lKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgYWZ0ZXJEQkFsdGVyKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWlncmF0aW9uID09PSAnYWx0ZXInKSB7XG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGFibGUgY2FuIGJlIGFsdGVyZWQgdG8gbWF0Y2ggc2NoZW1hXG4gICAgICAgICAgaWYgKF8uaXNFcXVhbChub3JtYWxpemVkTW9kZWxTY2hlbWEua2V5LCBub3JtYWxpemVkREJTY2hlbWEua2V5KSAmJlxuICAgICAgICAgICAgXy5pc0VxdWFsKG5vcm1hbGl6ZWRNb2RlbFNjaGVtYS5jbHVzdGVyaW5nX29yZGVyLCBub3JtYWxpemVkREJTY2hlbWEuY2x1c3RlcmluZ19vcmRlcikpIHtcbiAgICAgICAgICAgIGFsdGVyREJUYWJsZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkcm9wUmVjcmVhdGVUYWJsZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChtaWdyYXRpb24gPT09ICdkcm9wJykge1xuICAgICAgICAgIGRyb3BSZWNyZWF0ZVRhYmxlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5zY2hlbWFtaXNtYXRjaCcsIHRhYmxlTmFtZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIG5vdCBleGlzdGluZywgaXQncyBjcmVhdGVkXG4gICAgICBjb25zdCBjcmVhdGVUYWJsZVF1ZXJ5ID0gdGhpcy5fY3JlYXRlX3RhYmxlX3F1ZXJ5KHRhYmxlTmFtZSwgbW9kZWxTY2hlbWEpO1xuICAgICAgdGhpcy5fZXhlY3V0ZV9kZWZpbml0aW9uX3F1ZXJ5KGNyZWF0ZVRhYmxlUXVlcnksIFtdLCBhZnRlckRCQ3JlYXRlKTtcbiAgICB9XG4gIH0pO1xufTtcblxuQmFzZU1vZGVsLl9jcmVhdGVfdGFibGVfcXVlcnkgPSBmdW5jdGlvbiBmKHRhYmxlTmFtZSwgc2NoZW1hKSB7XG4gIGNvbnN0IHJvd3MgPSBbXTtcbiAgbGV0IGZpZWxkVHlwZTtcbiAgT2JqZWN0LmtleXMoc2NoZW1hLmZpZWxkcykuZm9yRWFjaCgoaykgPT4ge1xuICAgIGlmIChzY2hlbWEuZmllbGRzW2tdLnZpcnR1YWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHNlZ21lbnQgPSAnJztcbiAgICBmaWVsZFR5cGUgPSBzY2hlbWVyLmdldF9maWVsZF90eXBlKHNjaGVtYSwgayk7XG4gICAgaWYgKHNjaGVtYS5maWVsZHNba10udHlwZURlZikge1xuICAgICAgc2VnbWVudCA9IHV0aWwuZm9ybWF0KCdcIiVzXCIgJXMlcycsIGssIGZpZWxkVHlwZSwgc2NoZW1hLmZpZWxkc1trXS50eXBlRGVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VnbWVudCA9IHV0aWwuZm9ybWF0KCdcIiVzXCIgJXMnLCBrLCBmaWVsZFR5cGUpO1xuICAgIH1cblxuICAgIGlmIChzY2hlbWEuZmllbGRzW2tdLnN0YXRpYykge1xuICAgICAgc2VnbWVudCArPSAnIFNUQVRJQyc7XG4gICAgfVxuXG4gICAgcm93cy5wdXNoKHNlZ21lbnQpO1xuICB9KTtcblxuICBsZXQgcGFydGl0aW9uS2V5ID0gc2NoZW1hLmtleVswXTtcbiAgbGV0IGNsdXN0ZXJpbmdLZXkgPSBzY2hlbWEua2V5LnNsaWNlKDEsIHNjaGVtYS5rZXkubGVuZ3RoKTtcbiAgY29uc3QgY2x1c3RlcmluZ09yZGVyID0gW107XG5cblxuICBmb3IgKGxldCBmaWVsZCA9IDA7IGZpZWxkIDwgY2x1c3RlcmluZ0tleS5sZW5ndGg7IGZpZWxkKyspIHtcbiAgICBpZiAoc2NoZW1hLmNsdXN0ZXJpbmdfb3JkZXJcbiAgICAgICAgJiYgc2NoZW1hLmNsdXN0ZXJpbmdfb3JkZXJbY2x1c3RlcmluZ0tleVtmaWVsZF1dXG4gICAgICAgICYmIHNjaGVtYS5jbHVzdGVyaW5nX29yZGVyW2NsdXN0ZXJpbmdLZXlbZmllbGRdXS50b0xvd2VyQ2FzZSgpID09PSAnZGVzYycpIHtcbiAgICAgIGNsdXN0ZXJpbmdPcmRlci5wdXNoKHV0aWwuZm9ybWF0KCdcIiVzXCIgREVTQycsIGNsdXN0ZXJpbmdLZXlbZmllbGRdKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsdXN0ZXJpbmdPcmRlci5wdXNoKHV0aWwuZm9ybWF0KCdcIiVzXCIgQVNDJywgY2x1c3RlcmluZ0tleVtmaWVsZF0pKTtcbiAgICB9XG4gIH1cblxuICBsZXQgY2x1c3RlcmluZ09yZGVyUXVlcnkgPSAnJztcbiAgaWYgKGNsdXN0ZXJpbmdPcmRlci5sZW5ndGggPiAwKSB7XG4gICAgY2x1c3RlcmluZ09yZGVyUXVlcnkgPSB1dGlsLmZvcm1hdCgnIFdJVEggQ0xVU1RFUklORyBPUkRFUiBCWSAoJXMpJywgY2x1c3RlcmluZ09yZGVyLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgaWYgKHBhcnRpdGlvbktleSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgcGFydGl0aW9uS2V5ID0gcGFydGl0aW9uS2V5Lm1hcCgodikgPT4gKHV0aWwuZm9ybWF0KCdcIiVzXCInLCB2KSkpLmpvaW4oJywnKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJ0aXRpb25LZXkgPSB1dGlsLmZvcm1hdCgnXCIlc1wiJywgcGFydGl0aW9uS2V5KTtcbiAgfVxuXG4gIGlmIChjbHVzdGVyaW5nS2V5Lmxlbmd0aCkge1xuICAgIGNsdXN0ZXJpbmdLZXkgPSBjbHVzdGVyaW5nS2V5Lm1hcCgodikgPT4gKHV0aWwuZm9ybWF0KCdcIiVzXCInLCB2KSkpLmpvaW4oJywnKTtcbiAgICBjbHVzdGVyaW5nS2V5ID0gdXRpbC5mb3JtYXQoJywlcycsIGNsdXN0ZXJpbmdLZXkpO1xuICB9IGVsc2Uge1xuICAgIGNsdXN0ZXJpbmdLZXkgPSAnJztcbiAgfVxuXG4gIGNvbnN0IHF1ZXJ5ID0gdXRpbC5mb3JtYXQoXG4gICAgJ0NSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIFwiJXNcIiAoJXMgLCBQUklNQVJZIEtFWSgoJXMpJXMpKSVzOycsXG4gICAgdGFibGVOYW1lLFxuICAgIHJvd3Muam9pbignICwgJyksXG4gICAgcGFydGl0aW9uS2V5LFxuICAgIGNsdXN0ZXJpbmdLZXksXG4gICAgY2x1c3RlcmluZ09yZGVyUXVlcnksXG4gICk7XG5cbiAgcmV0dXJuIHF1ZXJ5O1xufTtcblxuQmFzZU1vZGVsLl9jcmVhdGVfbWF0ZXJpYWxpemVkX3ZpZXdfcXVlcnkgPSBmdW5jdGlvbiBmKHRhYmxlTmFtZSwgdmlld05hbWUsIHZpZXdTY2hlbWEpIHtcbiAgY29uc3Qgcm93cyA9IFtdO1xuXG4gIGZvciAobGV0IGsgPSAwOyBrIDwgdmlld1NjaGVtYS5zZWxlY3QubGVuZ3RoOyBrKyspIHtcbiAgICBpZiAodmlld1NjaGVtYS5zZWxlY3Rba10gPT09ICcqJykgcm93cy5wdXNoKHV0aWwuZm9ybWF0KCclcycsIHZpZXdTY2hlbWEuc2VsZWN0W2tdKSk7XG4gICAgZWxzZSByb3dzLnB1c2godXRpbC5mb3JtYXQoJ1wiJXNcIicsIHZpZXdTY2hlbWEuc2VsZWN0W2tdKSk7XG4gIH1cblxuICBsZXQgcGFydGl0aW9uS2V5ID0gdmlld1NjaGVtYS5rZXlbMF07XG4gIGxldCBjbHVzdGVyaW5nS2V5ID0gdmlld1NjaGVtYS5rZXkuc2xpY2UoMSwgdmlld1NjaGVtYS5rZXkubGVuZ3RoKTtcbiAgY29uc3QgY2x1c3RlcmluZ09yZGVyID0gW107XG5cbiAgZm9yIChsZXQgZmllbGQgPSAwOyBmaWVsZCA8IGNsdXN0ZXJpbmdLZXkubGVuZ3RoOyBmaWVsZCsrKSB7XG4gICAgaWYgKHZpZXdTY2hlbWEuY2x1c3RlcmluZ19vcmRlclxuICAgICAgICAmJiB2aWV3U2NoZW1hLmNsdXN0ZXJpbmdfb3JkZXJbY2x1c3RlcmluZ0tleVtmaWVsZF1dXG4gICAgICAgICYmIHZpZXdTY2hlbWEuY2x1c3RlcmluZ19vcmRlcltjbHVzdGVyaW5nS2V5W2ZpZWxkXV0udG9Mb3dlckNhc2UoKSA9PT0gJ2Rlc2MnKSB7XG4gICAgICBjbHVzdGVyaW5nT3JkZXIucHVzaCh1dGlsLmZvcm1hdCgnXCIlc1wiIERFU0MnLCBjbHVzdGVyaW5nS2V5W2ZpZWxkXSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjbHVzdGVyaW5nT3JkZXIucHVzaCh1dGlsLmZvcm1hdCgnXCIlc1wiIEFTQycsIGNsdXN0ZXJpbmdLZXlbZmllbGRdKSk7XG4gICAgfVxuICB9XG5cbiAgbGV0IGNsdXN0ZXJpbmdPcmRlclF1ZXJ5ID0gJyc7XG4gIGlmIChjbHVzdGVyaW5nT3JkZXIubGVuZ3RoID4gMCkge1xuICAgIGNsdXN0ZXJpbmdPcmRlclF1ZXJ5ID0gdXRpbC5mb3JtYXQoJyBXSVRIIENMVVNURVJJTkcgT1JERVIgQlkgKCVzKScsIGNsdXN0ZXJpbmdPcmRlci50b1N0cmluZygpKTtcbiAgfVxuXG4gIGlmIChwYXJ0aXRpb25LZXkgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHBhcnRpdGlvbktleSA9IHBhcnRpdGlvbktleS5tYXAoKHYpID0+IHV0aWwuZm9ybWF0KCdcIiVzXCInLCB2KSkuam9pbignLCcpO1xuICB9IGVsc2Uge1xuICAgIHBhcnRpdGlvbktleSA9IHV0aWwuZm9ybWF0KCdcIiVzXCInLCBwYXJ0aXRpb25LZXkpO1xuICB9XG5cbiAgaWYgKGNsdXN0ZXJpbmdLZXkubGVuZ3RoKSB7XG4gICAgY2x1c3RlcmluZ0tleSA9IGNsdXN0ZXJpbmdLZXkubWFwKCh2KSA9PiAodXRpbC5mb3JtYXQoJ1wiJXNcIicsIHYpKSkuam9pbignLCcpO1xuICAgIGNsdXN0ZXJpbmdLZXkgPSB1dGlsLmZvcm1hdCgnLCVzJywgY2x1c3RlcmluZ0tleSk7XG4gIH0gZWxzZSB7XG4gICAgY2x1c3RlcmluZ0tleSA9ICcnO1xuICB9XG5cbiAgbGV0IHdoZXJlQ2xhdXNlID0gcGFydGl0aW9uS2V5LnNwbGl0KCcsJykuam9pbignIElTIE5PVCBOVUxMIEFORCAnKTtcbiAgaWYgKGNsdXN0ZXJpbmdLZXkpIHdoZXJlQ2xhdXNlICs9IGNsdXN0ZXJpbmdLZXkuc3BsaXQoJywnKS5qb2luKCcgSVMgTk9UIE5VTEwgQU5EICcpO1xuICB3aGVyZUNsYXVzZSArPSAnIElTIE5PVCBOVUxMJztcblxuICBjb25zdCBxdWVyeSA9IHV0aWwuZm9ybWF0KFxuICAgICdDUkVBVEUgTUFURVJJQUxJWkVEIFZJRVcgSUYgTk9UIEVYSVNUUyBcIiVzXCIgQVMgU0VMRUNUICVzIEZST00gXCIlc1wiIFdIRVJFICVzIFBSSU1BUlkgS0VZKCglcyklcyklczsnLFxuICAgIHZpZXdOYW1lLFxuICAgIHJvd3Muam9pbignICwgJyksXG4gICAgdGFibGVOYW1lLFxuICAgIHdoZXJlQ2xhdXNlLFxuICAgIHBhcnRpdGlvbktleSxcbiAgICBjbHVzdGVyaW5nS2V5LFxuICAgIGNsdXN0ZXJpbmdPcmRlclF1ZXJ5LFxuICApO1xuXG4gIHJldHVybiBxdWVyeTtcbn07XG5cbkJhc2VNb2RlbC5fY3JlYXRlX2luZGV4X3F1ZXJ5ID0gZnVuY3Rpb24gZih0YWJsZU5hbWUsIGluZGV4TmFtZSkge1xuICBsZXQgcXVlcnk7XG4gIGNvbnN0IGluZGV4RXhwcmVzc2lvbiA9IGluZGV4TmFtZS5yZXBsYWNlKC9bXCJcXHNdL2csICcnKS5zcGxpdCgvWygpXS9nKTtcbiAgaWYgKGluZGV4RXhwcmVzc2lvbi5sZW5ndGggPiAxKSB7XG4gICAgaW5kZXhFeHByZXNzaW9uWzBdID0gaW5kZXhFeHByZXNzaW9uWzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgcXVlcnkgPSB1dGlsLmZvcm1hdChcbiAgICAgICdDUkVBVEUgSU5ERVggSUYgTk9UIEVYSVNUUyBPTiBcIiVzXCIgKCVzKFwiJXNcIikpOycsXG4gICAgICB0YWJsZU5hbWUsXG4gICAgICBpbmRleEV4cHJlc3Npb25bMF0sXG4gICAgICBpbmRleEV4cHJlc3Npb25bMV0sXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBxdWVyeSA9IHV0aWwuZm9ybWF0KFxuICAgICAgJ0NSRUFURSBJTkRFWCBJRiBOT1QgRVhJU1RTIE9OIFwiJXNcIiAoXCIlc1wiKTsnLFxuICAgICAgdGFibGVOYW1lLFxuICAgICAgaW5kZXhFeHByZXNzaW9uWzBdLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gcXVlcnk7XG59O1xuXG5CYXNlTW9kZWwuX2NyZWF0ZV9jdXN0b21faW5kZXhfcXVlcnkgPSBmdW5jdGlvbiBmKHRhYmxlTmFtZSwgY3VzdG9tSW5kZXgpIHtcbiAgbGV0IHF1ZXJ5ID0gdXRpbC5mb3JtYXQoXG4gICAgJ0NSRUFURSBDVVNUT00gSU5ERVggSUYgTk9UIEVYSVNUUyBPTiBcIiVzXCIgKFwiJXNcIikgVVNJTkcgXFwnJXNcXCcnLFxuICAgIHRhYmxlTmFtZSxcbiAgICBjdXN0b21JbmRleC5vbixcbiAgICBjdXN0b21JbmRleC51c2luZyxcbiAgKTtcblxuICBpZiAoT2JqZWN0LmtleXMoY3VzdG9tSW5kZXgub3B0aW9ucykubGVuZ3RoID4gMCkge1xuICAgIHF1ZXJ5ICs9ICcgV0lUSCBPUFRJT05TID0geyc7XG4gICAgT2JqZWN0LmtleXMoY3VzdG9tSW5kZXgub3B0aW9ucykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBxdWVyeSArPSB1dGlsLmZvcm1hdChcIiclcyc6ICclcycsIFwiLCBrZXksIGN1c3RvbUluZGV4Lm9wdGlvbnNba2V5XSk7XG4gICAgfSk7XG4gICAgcXVlcnkgPSBxdWVyeS5zbGljZSgwLCAtMik7XG4gICAgcXVlcnkgKz0gJ30nO1xuICB9XG5cbiAgcXVlcnkgKz0gJzsnO1xuXG4gIHJldHVybiBxdWVyeTtcbn07XG5cbkJhc2VNb2RlbC5fZ2V0X2RiX3RhYmxlX3NjaGVtYSA9IGZ1bmN0aW9uIGYoY2FsbGJhY2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgY29uc3QgdGFibGVOYW1lID0gdGhpcy5fcHJvcGVydGllcy50YWJsZV9uYW1lO1xuICBjb25zdCBrZXlzcGFjZSA9IHRoaXMuX3Byb3BlcnRpZXMua2V5c3BhY2U7XG5cbiAgbGV0IHF1ZXJ5ID0gJ1NFTEVDVCAqIEZST00gc3lzdGVtX3NjaGVtYS5jb2x1bW5zIFdIRVJFIHRhYmxlX25hbWUgPSA/IEFORCBrZXlzcGFjZV9uYW1lID0gPzsnO1xuXG4gIHNlbGYuZXhlY3V0ZV9xdWVyeShxdWVyeSwgW3RhYmxlTmFtZSwga2V5c3BhY2VdLCAoZXJyLCByZXN1bHRDb2x1bW5zKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5kYnNjaGVtYXF1ZXJ5JywgZXJyKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFyZXN1bHRDb2x1bW5zLnJvd3MgfHwgcmVzdWx0Q29sdW1ucy5yb3dzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY2FsbGJhY2sobnVsbCwgbnVsbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGJTY2hlbWEgPSB7IGZpZWxkczoge30sIHR5cGVNYXBzOiB7fSwgc3RhdGljTWFwczoge30gfTtcblxuICAgIGZvciAobGV0IHIgPSAwOyByIDwgcmVzdWx0Q29sdW1ucy5yb3dzLmxlbmd0aDsgcisrKSB7XG4gICAgICBjb25zdCByb3cgPSByZXN1bHRDb2x1bW5zLnJvd3Nbcl07XG5cbiAgICAgIGRiU2NoZW1hLmZpZWxkc1tyb3cuY29sdW1uX25hbWVdID0gVFlQRV9NQVAuZXh0cmFjdF90eXBlKHJvdy50eXBlKTtcblxuICAgICAgY29uc3QgdHlwZU1hcERlZiA9IFRZUEVfTUFQLmV4dHJhY3RfdHlwZURlZihyb3cudHlwZSk7XG4gICAgICBpZiAodHlwZU1hcERlZi5sZW5ndGggPiAwKSB7XG4gICAgICAgIGRiU2NoZW1hLnR5cGVNYXBzW3Jvdy5jb2x1bW5fbmFtZV0gPSB0eXBlTWFwRGVmO1xuICAgICAgfVxuXG4gICAgICBpZiAocm93LmtpbmQgPT09ICdwYXJ0aXRpb25fa2V5Jykge1xuICAgICAgICBpZiAoIWRiU2NoZW1hLmtleSkgZGJTY2hlbWEua2V5ID0gW1tdXTtcbiAgICAgICAgZGJTY2hlbWEua2V5WzBdW3Jvdy5wb3NpdGlvbl0gPSByb3cuY29sdW1uX25hbWU7XG4gICAgICB9IGVsc2UgaWYgKHJvdy5raW5kID09PSAnY2x1c3RlcmluZycpIHtcbiAgICAgICAgaWYgKCFkYlNjaGVtYS5rZXkpIGRiU2NoZW1hLmtleSA9IFtbXV07XG4gICAgICAgIGlmICghZGJTY2hlbWEuY2x1c3RlcmluZ19vcmRlcikgZGJTY2hlbWEuY2x1c3RlcmluZ19vcmRlciA9IHt9O1xuXG4gICAgICAgIGRiU2NoZW1hLmtleVtyb3cucG9zaXRpb24gKyAxXSA9IHJvdy5jb2x1bW5fbmFtZTtcbiAgICAgICAgaWYgKHJvdy5jbHVzdGVyaW5nX29yZGVyICYmIHJvdy5jbHVzdGVyaW5nX29yZGVyLnRvTG93ZXJDYXNlKCkgPT09ICdkZXNjJykge1xuICAgICAgICAgIGRiU2NoZW1hLmNsdXN0ZXJpbmdfb3JkZXJbcm93LmNvbHVtbl9uYW1lXSA9ICdERVNDJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYlNjaGVtYS5jbHVzdGVyaW5nX29yZGVyW3Jvdy5jb2x1bW5fbmFtZV0gPSAnQVNDJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyb3cua2luZCA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgZGJTY2hlbWEuc3RhdGljTWFwc1tyb3cuY29sdW1uX25hbWVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBxdWVyeSA9ICdTRUxFQ1QgKiBGUk9NIHN5c3RlbV9zY2hlbWEuaW5kZXhlcyBXSEVSRSB0YWJsZV9uYW1lID0gPyBBTkQga2V5c3BhY2VfbmFtZSA9ID87JztcblxuICAgIHNlbGYuZXhlY3V0ZV9xdWVyeShxdWVyeSwgW3RhYmxlTmFtZSwga2V5c3BhY2VdLCAoZXJyMSwgcmVzdWx0SW5kZXhlcykgPT4ge1xuICAgICAgaWYgKGVycjEpIHtcbiAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5kYnNjaGVtYXF1ZXJ5JywgZXJyMSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IHIgPSAwOyByIDwgcmVzdWx0SW5kZXhlcy5yb3dzLmxlbmd0aDsgcisrKSB7XG4gICAgICAgIGNvbnN0IHJvdyA9IHJlc3VsdEluZGV4ZXMucm93c1tyXTtcblxuICAgICAgICBpZiAocm93LmluZGV4X25hbWUpIHtcbiAgICAgICAgICBjb25zdCBpbmRleE9wdGlvbnMgPSByb3cub3B0aW9ucztcbiAgICAgICAgICBsZXQgdGFyZ2V0ID0gaW5kZXhPcHRpb25zLnRhcmdldDtcbiAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQucmVwbGFjZSgvW1wiXFxzXS9nLCAnJyk7XG4gICAgICAgICAgZGVsZXRlIGluZGV4T3B0aW9ucy50YXJnZXQ7XG5cbiAgICAgICAgICAvLyBrZWVwaW5nIHRyYWNrIG9mIGluZGV4IG5hbWVzIHRvIGRyb3AgaW5kZXggd2hlbiBuZWVkZWRcbiAgICAgICAgICBpZiAoIWRiU2NoZW1hLmluZGV4X25hbWVzKSBkYlNjaGVtYS5pbmRleF9uYW1lcyA9IHt9O1xuXG4gICAgICAgICAgaWYgKHJvdy5raW5kID09PSAnQ1VTVE9NJykge1xuICAgICAgICAgICAgY29uc3QgdXNpbmcgPSBpbmRleE9wdGlvbnMuY2xhc3NfbmFtZTtcbiAgICAgICAgICAgIGRlbGV0ZSBpbmRleE9wdGlvbnMuY2xhc3NfbmFtZTtcblxuICAgICAgICAgICAgaWYgKCFkYlNjaGVtYS5jdXN0b21faW5kZXhlcykgZGJTY2hlbWEuY3VzdG9tX2luZGV4ZXMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGN1c3RvbUluZGV4T2JqZWN0ID0ge1xuICAgICAgICAgICAgICBvbjogdGFyZ2V0LFxuICAgICAgICAgICAgICB1c2luZyxcbiAgICAgICAgICAgICAgb3B0aW9uczogaW5kZXhPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRiU2NoZW1hLmN1c3RvbV9pbmRleGVzLnB1c2goY3VzdG9tSW5kZXhPYmplY3QpO1xuICAgICAgICAgICAgZGJTY2hlbWEuaW5kZXhfbmFtZXNbb2JqZWN0SGFzaChjdXN0b21JbmRleE9iamVjdCldID0gcm93LmluZGV4X25hbWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghZGJTY2hlbWEuaW5kZXhlcykgZGJTY2hlbWEuaW5kZXhlcyA9IFtdO1xuICAgICAgICAgICAgZGJTY2hlbWEuaW5kZXhlcy5wdXNoKHRhcmdldCk7XG4gICAgICAgICAgICBkYlNjaGVtYS5pbmRleF9uYW1lc1t0YXJnZXRdID0gcm93LmluZGV4X25hbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHF1ZXJ5ID0gJ1NFTEVDVCB2aWV3X25hbWUsYmFzZV90YWJsZV9uYW1lIEZST00gc3lzdGVtX3NjaGVtYS52aWV3cyBXSEVSRSBrZXlzcGFjZV9uYW1lPT87JztcblxuICAgICAgc2VsZi5leGVjdXRlX3F1ZXJ5KHF1ZXJ5LCBba2V5c3BhY2VdLCAoZXJyMiwgcmVzdWx0Vmlld3MpID0+IHtcbiAgICAgICAgaWYgKGVycjIpIHtcbiAgICAgICAgICBjYWxsYmFjayhidWlsZEVycm9yKCdtb2RlbC50YWJsZWNyZWF0aW9uLmRic2NoZW1hcXVlcnknLCBlcnIyKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCByZXN1bHRWaWV3cy5yb3dzLmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgY29uc3Qgcm93ID0gcmVzdWx0Vmlld3Mucm93c1tyXTtcblxuICAgICAgICAgIGlmIChyb3cuYmFzZV90YWJsZV9uYW1lID09PSB0YWJsZU5hbWUpIHtcbiAgICAgICAgICAgIGlmICghZGJTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzKSBkYlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3MgPSB7fTtcbiAgICAgICAgICAgIGRiU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1tyb3cudmlld19uYW1lXSA9IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3MpIHtcbiAgICAgICAgICBxdWVyeSA9ICdTRUxFQ1QgKiBGUk9NIHN5c3RlbV9zY2hlbWEuY29sdW1ucyBXSEVSRSBrZXlzcGFjZV9uYW1lPT8gYW5kIHRhYmxlX25hbWUgSU4gPzsnO1xuXG4gICAgICAgICAgc2VsZi5leGVjdXRlX3F1ZXJ5KHF1ZXJ5LCBba2V5c3BhY2UsIE9iamVjdC5rZXlzKGRiU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3cyldLCAoZXJyMywgcmVzdWx0TWF0Vmlld3MpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIzKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKGJ1aWxkRXJyb3IoJ21vZGVsLnRhYmxlY3JlYXRpb24uZGJzY2hlbWFxdWVyeScsIGVycjMpKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCByID0gMDsgciA8IHJlc3VsdE1hdFZpZXdzLnJvd3MubGVuZ3RoOyByKyspIHtcbiAgICAgICAgICAgICAgY29uc3Qgcm93ID0gcmVzdWx0TWF0Vmlld3Mucm93c1tyXTtcblxuICAgICAgICAgICAgICBpZiAoIWRiU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1tyb3cudGFibGVfbmFtZV0uc2VsZWN0KSB7XG4gICAgICAgICAgICAgICAgZGJTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzW3Jvdy50YWJsZV9uYW1lXS5zZWxlY3QgPSBbXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGRiU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1tyb3cudGFibGVfbmFtZV0uc2VsZWN0LnB1c2gocm93LmNvbHVtbl9uYW1lKTtcblxuICAgICAgICAgICAgICBpZiAocm93LmtpbmQgPT09ICdwYXJ0aXRpb25fa2V5Jykge1xuICAgICAgICAgICAgICAgIGlmICghZGJTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzW3Jvdy50YWJsZV9uYW1lXS5rZXkpIHtcbiAgICAgICAgICAgICAgICAgIGRiU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1tyb3cudGFibGVfbmFtZV0ua2V5ID0gW1tdXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkYlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3Nbcm93LnRhYmxlX25hbWVdLmtleVswXVtyb3cucG9zaXRpb25dID0gcm93LmNvbHVtbl9uYW1lO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJvdy5raW5kID09PSAnY2x1c3RlcmluZycpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRiU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1tyb3cudGFibGVfbmFtZV0ua2V5KSB7XG4gICAgICAgICAgICAgICAgICBkYlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3Nbcm93LnRhYmxlX25hbWVdLmtleSA9IFtbXV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZGJTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzW3Jvdy50YWJsZV9uYW1lXS5jbHVzdGVyaW5nX29yZGVyKSB7XG4gICAgICAgICAgICAgICAgICBkYlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3Nbcm93LnRhYmxlX25hbWVdLmNsdXN0ZXJpbmdfb3JkZXIgPSB7fTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkYlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3Nbcm93LnRhYmxlX25hbWVdLmtleVtyb3cucG9zaXRpb24gKyAxXSA9IHJvdy5jb2x1bW5fbmFtZTtcbiAgICAgICAgICAgICAgICBpZiAocm93LmNsdXN0ZXJpbmdfb3JkZXIgJiYgcm93LmNsdXN0ZXJpbmdfb3JkZXIudG9Mb3dlckNhc2UoKSA9PT0gJ2Rlc2MnKSB7XG4gICAgICAgICAgICAgICAgICBkYlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3Nbcm93LnRhYmxlX25hbWVdLmNsdXN0ZXJpbmdfb3JkZXJbcm93LmNvbHVtbl9uYW1lXSA9ICdERVNDJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZGJTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzW3Jvdy50YWJsZV9uYW1lXS5jbHVzdGVyaW5nX29yZGVyW3Jvdy5jb2x1bW5fbmFtZV0gPSAnQVNDJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGJTY2hlbWEpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRiU2NoZW1hKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuQmFzZU1vZGVsLl9leGVjdXRlX3RhYmxlX3F1ZXJ5ID0gZnVuY3Rpb24gZihxdWVyeSwgcGFyYW1zLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBjb25zdCBkZWZhdWx0cyA9IHtcbiAgICBwcmVwYXJlOiB0cnVlLFxuICB9O1xuXG4gIG9wdGlvbnMgPSBfLmRlZmF1bHRzRGVlcChvcHRpb25zLCBkZWZhdWx0cyk7XG5cbiAgY29uc3QgZG9FeGVjdXRlUXVlcnkgPSBmdW5jdGlvbiBmMShkb3F1ZXJ5LCBkb2NhbGxiYWNrKSB7XG4gICAgdGhpcy5leGVjdXRlX3F1ZXJ5KGRvcXVlcnksIHBhcmFtcywgb3B0aW9ucywgZG9jYWxsYmFjayk7XG4gIH0uYmluZCh0aGlzLCBxdWVyeSk7XG5cbiAgaWYgKHRoaXMuaXNfdGFibGVfcmVhZHkoKSkge1xuICAgIGRvRXhlY3V0ZVF1ZXJ5KGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmluaXQoKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkb0V4ZWN1dGVRdWVyeShjYWxsYmFjayk7XG4gICAgfSk7XG4gIH1cbn07XG5cbkJhc2VNb2RlbC5fZ2V0X2RiX3ZhbHVlX2V4cHJlc3Npb24gPSBmdW5jdGlvbiBmKGZpZWxkbmFtZSwgZmllbGR2YWx1ZSkge1xuICBpZiAoZmllbGR2YWx1ZSA9PSBudWxsIHx8IGZpZWxkdmFsdWUgPT09IGNxbC50eXBlcy51bnNldCkge1xuICAgIHJldHVybiB7IHF1ZXJ5X3NlZ21lbnQ6ICc/JywgcGFyYW1ldGVyOiBmaWVsZHZhbHVlIH07XG4gIH1cblxuICBpZiAoXy5pc1BsYWluT2JqZWN0KGZpZWxkdmFsdWUpICYmIGZpZWxkdmFsdWUuJGRiX2Z1bmN0aW9uKSB7XG4gICAgcmV0dXJuIGZpZWxkdmFsdWUuJGRiX2Z1bmN0aW9uO1xuICB9XG5cbiAgY29uc3QgZmllbGR0eXBlID0gc2NoZW1lci5nZXRfZmllbGRfdHlwZSh0aGlzLl9wcm9wZXJ0aWVzLnNjaGVtYSwgZmllbGRuYW1lKTtcbiAgY29uc3QgdmFsaWRhdG9ycyA9IHRoaXMuX2dldF92YWxpZGF0b3JzKGZpZWxkbmFtZSk7XG5cbiAgaWYgKGZpZWxkdmFsdWUgaW5zdGFuY2VvZiBBcnJheSAmJiBmaWVsZHR5cGUgIT09ICdsaXN0JyAmJiBmaWVsZHR5cGUgIT09ICdzZXQnICYmIGZpZWxkdHlwZSAhPT0gJ2Zyb3plbicpIHtcbiAgICBjb25zdCB2YWwgPSBmaWVsZHZhbHVlLm1hcCgodikgPT4ge1xuICAgICAgY29uc3QgZGJWYWwgPSB0aGlzLl9nZXRfZGJfdmFsdWVfZXhwcmVzc2lvbihmaWVsZG5hbWUsIHYpO1xuXG4gICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGRiVmFsKSAmJiBkYlZhbC5xdWVyeV9zZWdtZW50KSByZXR1cm4gZGJWYWwucGFyYW1ldGVyO1xuICAgICAgcmV0dXJuIGRiVmFsO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHsgcXVlcnlfc2VnbWVudDogJz8nLCBwYXJhbWV0ZXI6IHZhbCB9O1xuICB9XG5cbiAgY29uc3QgdmFsaWRhdGlvbk1lc3NhZ2UgPSB0aGlzLl92YWxpZGF0ZSh2YWxpZGF0b3JzLCBmaWVsZHZhbHVlKTtcbiAgaWYgKHZhbGlkYXRpb25NZXNzYWdlICE9PSB0cnVlKSB7XG4gICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLnZhbGlkYXRvci5pbnZhbGlkdmFsdWUnLCB2YWxpZGF0aW9uTWVzc2FnZShmaWVsZHZhbHVlLCBmaWVsZG5hbWUsIGZpZWxkdHlwZSkpKTtcbiAgfVxuXG4gIGlmIChmaWVsZHR5cGUgPT09ICdjb3VudGVyJykge1xuICAgIGxldCBjb3VudGVyUXVlcnlTZWdtZW50ID0gdXRpbC5mb3JtYXQoJ1wiJXNcIicsIGZpZWxkbmFtZSk7XG4gICAgaWYgKGZpZWxkdmFsdWUgPj0gMCkgY291bnRlclF1ZXJ5U2VnbWVudCArPSAnICsgPyc7XG4gICAgZWxzZSBjb3VudGVyUXVlcnlTZWdtZW50ICs9ICcgLSA/JztcbiAgICBmaWVsZHZhbHVlID0gTWF0aC5hYnMoZmllbGR2YWx1ZSk7XG4gICAgcmV0dXJuIHsgcXVlcnlfc2VnbWVudDogY291bnRlclF1ZXJ5U2VnbWVudCwgcGFyYW1ldGVyOiBmaWVsZHZhbHVlIH07XG4gIH1cblxuICByZXR1cm4geyBxdWVyeV9zZWdtZW50OiAnPycsIHBhcmFtZXRlcjogZmllbGR2YWx1ZSB9O1xufTtcblxuQmFzZU1vZGVsLl9jcmVhdGVfd2hlcmVfY2xhdXNlID0gZnVuY3Rpb24gZihxdWVyeU9iamVjdCkge1xuICBjb25zdCBxdWVyeVJlbGF0aW9ucyA9IFtdO1xuICBjb25zdCBxdWVyeVBhcmFtcyA9IFtdO1xuXG4gIE9iamVjdC5rZXlzKHF1ZXJ5T2JqZWN0KS5mb3JFYWNoKChrKSA9PiB7XG4gICAgaWYgKGsuaW5kZXhPZignJCcpID09PSAwKSB7XG4gICAgICAvLyBzZWFyY2ggcXVlcmllcyBiYXNlZCBvbiBsdWNlbmUgaW5kZXggb3Igc29sclxuICAgICAgLy8gZXNjYXBlIGFsbCBzaW5nbGUgcXVvdGVzIGZvciBxdWVyaWVzIGluIGNhc3NhbmRyYVxuICAgICAgaWYgKGsgPT09ICckZXhwcicpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeU9iamVjdFtrXS5pbmRleCA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHF1ZXJ5T2JqZWN0W2tdLnF1ZXJ5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHF1ZXJ5UmVsYXRpb25zLnB1c2godXRpbC5mb3JtYXQoXG4gICAgICAgICAgICBcImV4cHIoJXMsJyVzJylcIixcbiAgICAgICAgICAgIHF1ZXJ5T2JqZWN0W2tdLmluZGV4LCBxdWVyeU9iamVjdFtrXS5xdWVyeS5yZXBsYWNlKC8nL2csIFwiJydcIiksXG4gICAgICAgICAgKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLmZpbmQuaW52YWxpZGV4cHInKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoayA9PT0gJyRzb2xyX3F1ZXJ5Jykge1xuICAgICAgICBpZiAodHlwZW9mIHF1ZXJ5T2JqZWN0W2tdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHF1ZXJ5UmVsYXRpb25zLnB1c2godXRpbC5mb3JtYXQoXG4gICAgICAgICAgICBcInNvbHJfcXVlcnk9JyVzJ1wiLFxuICAgICAgICAgICAgcXVlcnlPYmplY3Rba10ucmVwbGFjZSgvJy9nLCBcIicnXCIpLFxuICAgICAgICAgICkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5maW5kLmludmFsaWRzb2xycXVlcnknKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgd2hlcmVPYmplY3QgPSBxdWVyeU9iamVjdFtrXTtcbiAgICAvLyBBcnJheSBvZiBvcGVyYXRvcnNcbiAgICBpZiAoISh3aGVyZU9iamVjdCBpbnN0YW5jZW9mIEFycmF5KSkgd2hlcmVPYmplY3QgPSBbd2hlcmVPYmplY3RdO1xuXG4gICAgZm9yIChsZXQgZmsgPSAwOyBmayA8IHdoZXJlT2JqZWN0Lmxlbmd0aDsgZmsrKykge1xuICAgICAgbGV0IGZpZWxkUmVsYXRpb24gPSB3aGVyZU9iamVjdFtma107XG5cbiAgICAgIGNvbnN0IGNxbE9wZXJhdG9ycyA9IHtcbiAgICAgICAgJGVxOiAnPScsXG4gICAgICAgICRndDogJz4nLFxuICAgICAgICAkbHQ6ICc8JyxcbiAgICAgICAgJGd0ZTogJz49JyxcbiAgICAgICAgJGx0ZTogJzw9JyxcbiAgICAgICAgJGluOiAnSU4nLFxuICAgICAgICAkbGlrZTogJ0xJS0UnLFxuICAgICAgICAkdG9rZW46ICd0b2tlbicsXG4gICAgICAgICRjb250YWluczogJ0NPTlRBSU5TJyxcbiAgICAgICAgJGNvbnRhaW5zX2tleTogJ0NPTlRBSU5TIEtFWScsXG4gICAgICB9O1xuXG4gICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGZpZWxkUmVsYXRpb24pKSB7XG4gICAgICAgIGNvbnN0IHZhbGlkS2V5cyA9IE9iamVjdC5rZXlzKGNxbE9wZXJhdG9ycyk7XG4gICAgICAgIGNvbnN0IGZpZWxkUmVsYXRpb25LZXlzID0gT2JqZWN0LmtleXMoZmllbGRSZWxhdGlvbik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmllbGRSZWxhdGlvbktleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAodmFsaWRLZXlzLmluZGV4T2YoZmllbGRSZWxhdGlvbktleXNbaV0pIDwgMCkgeyAvLyBmaWVsZCByZWxhdGlvbiBrZXkgaW52YWxpZFxuICAgICAgICAgICAgZmllbGRSZWxhdGlvbiA9IHsgJGVxOiBmaWVsZFJlbGF0aW9uIH07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpZWxkUmVsYXRpb24gPSB7ICRlcTogZmllbGRSZWxhdGlvbiB9O1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZWxLZXlzID0gT2JqZWN0LmtleXMoZmllbGRSZWxhdGlvbik7XG4gICAgICBmb3IgKGxldCByayA9IDA7IHJrIDwgcmVsS2V5cy5sZW5ndGg7IHJrKyspIHtcbiAgICAgICAgbGV0IGZpcnN0S2V5ID0gcmVsS2V5c1tya107XG4gICAgICAgIGNvbnN0IGZpcnN0VmFsdWUgPSBmaWVsZFJlbGF0aW9uW2ZpcnN0S2V5XTtcbiAgICAgICAgaWYgKGZpcnN0S2V5LnRvTG93ZXJDYXNlKCkgaW4gY3FsT3BlcmF0b3JzKSB7XG4gICAgICAgICAgZmlyc3RLZXkgPSBmaXJzdEtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIGxldCBvcCA9IGNxbE9wZXJhdG9yc1tmaXJzdEtleV07XG5cbiAgICAgICAgICBpZiAoZmlyc3RLZXkgPT09ICckaW4nICYmICEoZmlyc3RWYWx1ZSBpbnN0YW5jZW9mIEFycmF5KSkgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLmZpbmQuaW52YWxpZGlub3AnKSk7XG4gICAgICAgICAgaWYgKGZpcnN0S2V5ID09PSAnJHRva2VuJyAmJiAhKGZpcnN0VmFsdWUgaW5zdGFuY2VvZiBPYmplY3QpKSB0aHJvdyAoYnVpbGRFcnJvcignbW9kZWwuZmluZC5pbnZhbGlkdG9rZW4nKSk7XG5cbiAgICAgICAgICBsZXQgd2hlcmVUZW1wbGF0ZSA9ICdcIiVzXCIgJXMgJXMnO1xuICAgICAgICAgIGlmIChmaXJzdEtleSA9PT0gJyR0b2tlbicpIHtcbiAgICAgICAgICAgIHdoZXJlVGVtcGxhdGUgPSAndG9rZW4oXCIlc1wiKSAlcyB0b2tlbiglcyknO1xuXG4gICAgICAgICAgICBjb25zdCB0b2tlblJlbEtleXMgPSBPYmplY3Qua2V5cyhmaXJzdFZhbHVlKTtcbiAgICAgICAgICAgIGZvciAobGV0IHRva2VuUksgPSAwOyB0b2tlblJLIDwgdG9rZW5SZWxLZXlzLmxlbmd0aDsgdG9rZW5SSysrKSB7XG4gICAgICAgICAgICAgIGxldCB0b2tlbkZpcnN0S2V5ID0gdG9rZW5SZWxLZXlzW3Rva2VuUktdO1xuICAgICAgICAgICAgICBjb25zdCB0b2tlbkZpcnN0VmFsdWUgPSBmaXJzdFZhbHVlW3Rva2VuRmlyc3RLZXldO1xuICAgICAgICAgICAgICB0b2tlbkZpcnN0S2V5ID0gdG9rZW5GaXJzdEtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICBpZiAoKHRva2VuRmlyc3RLZXkgaW4gY3FsT3BlcmF0b3JzKSAmJiB0b2tlbkZpcnN0S2V5ICE9PSAnJHRva2VuJyAmJiB0b2tlbkZpcnN0S2V5ICE9PSAnJGluJykge1xuICAgICAgICAgICAgICAgIG9wID0gY3FsT3BlcmF0b3JzW3Rva2VuRmlyc3RLZXldO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5maW5kLmludmFsaWR0b2tlbm9wJywgdG9rZW5GaXJzdEtleSkpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHRva2VuRmlyc3RWYWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9rZW5LZXlzID0gay5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHRva2VuSW5kZXggPSAwOyB0b2tlbkluZGV4IDwgdG9rZW5GaXJzdFZhbHVlLmxlbmd0aDsgdG9rZW5JbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICB0b2tlbktleXNbdG9rZW5JbmRleF0gPSB0b2tlbktleXNbdG9rZW5JbmRleF0udHJpbSgpO1xuICAgICAgICAgICAgICAgICAgY29uc3QgZGJWYWwgPSB0aGlzLl9nZXRfZGJfdmFsdWVfZXhwcmVzc2lvbih0b2tlbktleXNbdG9rZW5JbmRleF0sIHRva2VuRmlyc3RWYWx1ZVt0b2tlbkluZGV4XSk7XG4gICAgICAgICAgICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGRiVmFsKSAmJiBkYlZhbC5xdWVyeV9zZWdtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuRmlyc3RWYWx1ZVt0b2tlbkluZGV4XSA9IGRiVmFsLnF1ZXJ5X3NlZ21lbnQ7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1zLnB1c2goZGJWYWwucGFyYW1ldGVyKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuRmlyc3RWYWx1ZVt0b2tlbkluZGV4XSA9IGRiVmFsO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBxdWVyeVJlbGF0aW9ucy5wdXNoKHV0aWwuZm9ybWF0KFxuICAgICAgICAgICAgICAgICAgd2hlcmVUZW1wbGF0ZSxcbiAgICAgICAgICAgICAgICAgIHRva2VuS2V5cy5qb2luKCdcIixcIicpLCBvcCwgdG9rZW5GaXJzdFZhbHVlLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGJWYWwgPSB0aGlzLl9nZXRfZGJfdmFsdWVfZXhwcmVzc2lvbihrLCB0b2tlbkZpcnN0VmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QoZGJWYWwpICYmIGRiVmFsLnF1ZXJ5X3NlZ21lbnQpIHtcbiAgICAgICAgICAgICAgICAgIHF1ZXJ5UmVsYXRpb25zLnB1c2godXRpbC5mb3JtYXQoXG4gICAgICAgICAgICAgICAgICAgIHdoZXJlVGVtcGxhdGUsXG4gICAgICAgICAgICAgICAgICAgIGssIG9wLCBkYlZhbC5xdWVyeV9zZWdtZW50LFxuICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgICBxdWVyeVBhcmFtcy5wdXNoKGRiVmFsLnBhcmFtZXRlcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHF1ZXJ5UmVsYXRpb25zLnB1c2godXRpbC5mb3JtYXQoXG4gICAgICAgICAgICAgICAgICAgIHdoZXJlVGVtcGxhdGUsXG4gICAgICAgICAgICAgICAgICAgIGssIG9wLCBkYlZhbCxcbiAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoZmlyc3RLZXkgPT09ICckY29udGFpbnMnKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZHR5cGUxID0gc2NoZW1lci5nZXRfZmllbGRfdHlwZSh0aGlzLl9wcm9wZXJ0aWVzLnNjaGVtYSwgayk7XG4gICAgICAgICAgICBpZiAoWydtYXAnLCAnbGlzdCcsICdzZXQnLCAnZnJvemVuJ10uaW5kZXhPZihmaWVsZHR5cGUxKSA+PSAwKSB7XG4gICAgICAgICAgICAgIGlmIChmaWVsZHR5cGUxID09PSAnbWFwJyAmJiBfLmlzUGxhaW5PYmplY3QoZmlyc3RWYWx1ZSkgJiYgT2JqZWN0LmtleXMoZmlyc3RWYWx1ZSkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcXVlcnlSZWxhdGlvbnMucHVzaCh1dGlsLmZvcm1hdChcbiAgICAgICAgICAgICAgICAgICdcIiVzXCJbJXNdICVzICVzJyxcbiAgICAgICAgICAgICAgICAgIGssICc/JywgJz0nLCAnPycsXG4gICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbXMucHVzaChPYmplY3Qua2V5cyhmaXJzdFZhbHVlKVswXSk7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbXMucHVzaChmaXJzdFZhbHVlW09iamVjdC5rZXlzKGZpcnN0VmFsdWUpWzBdXSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcXVlcnlSZWxhdGlvbnMucHVzaCh1dGlsLmZvcm1hdChcbiAgICAgICAgICAgICAgICAgIHdoZXJlVGVtcGxhdGUsXG4gICAgICAgICAgICAgICAgICBrLCBvcCwgJz8nLFxuICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1zLnB1c2goZmlyc3RWYWx1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5maW5kLmludmFsaWRjb250YWluc29wJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoZmlyc3RLZXkgPT09ICckY29udGFpbnNfa2V5Jykge1xuICAgICAgICAgICAgY29uc3QgZmllbGR0eXBlMiA9IHNjaGVtZXIuZ2V0X2ZpZWxkX3R5cGUodGhpcy5fcHJvcGVydGllcy5zY2hlbWEsIGspO1xuICAgICAgICAgICAgaWYgKFsnbWFwJ10uaW5kZXhPZihmaWVsZHR5cGUyKSA+PSAwKSB7XG4gICAgICAgICAgICAgIHF1ZXJ5UmVsYXRpb25zLnB1c2godXRpbC5mb3JtYXQoXG4gICAgICAgICAgICAgICAgd2hlcmVUZW1wbGF0ZSxcbiAgICAgICAgICAgICAgICBrLCBvcCwgJz8nLFxuICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgcXVlcnlQYXJhbXMucHVzaChmaXJzdFZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5maW5kLmludmFsaWRjb250YWluc2tleW9wJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkYlZhbCA9IHRoaXMuX2dldF9kYl92YWx1ZV9leHByZXNzaW9uKGssIGZpcnN0VmFsdWUpO1xuICAgICAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChkYlZhbCkgJiYgZGJWYWwucXVlcnlfc2VnbWVudCkge1xuICAgICAgICAgICAgICBxdWVyeVJlbGF0aW9ucy5wdXNoKHV0aWwuZm9ybWF0KFxuICAgICAgICAgICAgICAgIHdoZXJlVGVtcGxhdGUsXG4gICAgICAgICAgICAgICAgaywgb3AsIGRiVmFsLnF1ZXJ5X3NlZ21lbnQsXG4gICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICBxdWVyeVBhcmFtcy5wdXNoKGRiVmFsLnBhcmFtZXRlcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBxdWVyeVJlbGF0aW9ucy5wdXNoKHV0aWwuZm9ybWF0KFxuICAgICAgICAgICAgICAgIHdoZXJlVGVtcGxhdGUsXG4gICAgICAgICAgICAgICAgaywgb3AsIGRiVmFsLFxuICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLmZpbmQuaW52YWxpZG9wJywgZmlyc3RLZXkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBxdWVyeTogKHF1ZXJ5UmVsYXRpb25zLmxlbmd0aCA+IDAgPyB1dGlsLmZvcm1hdCgnV0hFUkUgJXMnLCBxdWVyeVJlbGF0aW9ucy5qb2luKCcgQU5EICcpKSA6ICcnKSxcbiAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1zLFxuICB9O1xufTtcblxuQmFzZU1vZGVsLl9jcmVhdGVfZmluZF9xdWVyeSA9IGZ1bmN0aW9uIGYocXVlcnlPYmplY3QsIG9wdGlvbnMpIHtcbiAgY29uc3Qgb3JkZXJLZXlzID0gW107XG4gIGxldCBsaW1pdCA9IG51bGw7XG5cbiAgT2JqZWN0LmtleXMocXVlcnlPYmplY3QpLmZvckVhY2goKGspID0+IHtcbiAgICBjb25zdCBxdWVyeUl0ZW0gPSBxdWVyeU9iamVjdFtrXTtcbiAgICBpZiAoay50b0xvd2VyQ2FzZSgpID09PSAnJG9yZGVyYnknKSB7XG4gICAgICBpZiAoIShxdWVyeUl0ZW0gaW5zdGFuY2VvZiBPYmplY3QpKSB7XG4gICAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5maW5kLmludmFsaWRvcmRlcicpKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9yZGVySXRlbUtleXMgPSBPYmplY3Qua2V5cyhxdWVyeUl0ZW0pO1xuICAgICAgaWYgKG9yZGVySXRlbUtleXMubGVuZ3RoID4gMSkgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLmZpbmQubXVsdGlvcmRlcicpKTtcblxuICAgICAgY29uc3QgY3FsT3JkZXJEaXJlY3Rpb24gPSB7ICRhc2M6ICdBU0MnLCAkZGVzYzogJ0RFU0MnIH07XG4gICAgICBpZiAob3JkZXJJdGVtS2V5c1swXS50b0xvd2VyQ2FzZSgpIGluIGNxbE9yZGVyRGlyZWN0aW9uKSB7XG4gICAgICAgIGxldCBvcmRlckZpZWxkcyA9IHF1ZXJ5SXRlbVtvcmRlckl0ZW1LZXlzWzBdXTtcblxuICAgICAgICBpZiAoIShvcmRlckZpZWxkcyBpbnN0YW5jZW9mIEFycmF5KSkgb3JkZXJGaWVsZHMgPSBbb3JkZXJGaWVsZHNdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3JkZXJGaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBvcmRlcktleXMucHVzaCh1dGlsLmZvcm1hdChcbiAgICAgICAgICAgICdcIiVzXCIgJXMnLFxuICAgICAgICAgICAgb3JkZXJGaWVsZHNbaV0sIGNxbE9yZGVyRGlyZWN0aW9uW29yZGVySXRlbUtleXNbMF1dLFxuICAgICAgICAgICkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyAoYnVpbGRFcnJvcignbW9kZWwuZmluZC5pbnZhbGlkb3JkZXJ0eXBlJywgb3JkZXJJdGVtS2V5c1swXSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoay50b0xvd2VyQ2FzZSgpID09PSAnJGxpbWl0Jykge1xuICAgICAgaWYgKHR5cGVvZiBxdWVyeUl0ZW0gIT09ICdudW1iZXInKSB0aHJvdyAoYnVpbGRFcnJvcignbW9kZWwuZmluZC5saW1pdHR5cGUnKSk7XG4gICAgICBsaW1pdCA9IHF1ZXJ5SXRlbTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IHdoZXJlQ2xhdXNlID0gdGhpcy5fY3JlYXRlX3doZXJlX2NsYXVzZShxdWVyeU9iamVjdCk7XG5cbiAgbGV0IHNlbGVjdCA9ICcqJztcbiAgaWYgKG9wdGlvbnMuc2VsZWN0ICYmIF8uaXNBcnJheShvcHRpb25zLnNlbGVjdCkgJiYgb3B0aW9ucy5zZWxlY3QubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHNlbGVjdEFycmF5ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zLnNlbGVjdC5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gc2VwYXJhdGUgdGhlIGFnZ3JlZ2F0ZSBmdW5jdGlvbiBhbmQgdGhlIGNvbHVtbiBuYW1lIGlmIHNlbGVjdCBpcyBhbiBhZ2dyZWdhdGUgZnVuY3Rpb25cbiAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IG9wdGlvbnMuc2VsZWN0W2ldLnNwbGl0KC9bKCApXS9nKS5maWx0ZXIoKGUpID0+IChlKSk7XG4gICAgICBpZiAoc2VsZWN0aW9uLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBzZWxlY3RBcnJheS5wdXNoKHV0aWwuZm9ybWF0KCdcIiVzXCInLCBzZWxlY3Rpb25bMF0pKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uLmxlbmd0aCA9PT0gMiB8fCBzZWxlY3Rpb24ubGVuZ3RoID09PSA0KSB7XG4gICAgICAgIGxldCBmdW5jdGlvbkNsYXVzZSA9IHV0aWwuZm9ybWF0KCclcyhcIiVzXCIpJywgc2VsZWN0aW9uWzBdLCBzZWxlY3Rpb25bMV0pO1xuICAgICAgICBpZiAoc2VsZWN0aW9uWzJdKSBmdW5jdGlvbkNsYXVzZSArPSB1dGlsLmZvcm1hdCgnICVzJywgc2VsZWN0aW9uWzJdKTtcbiAgICAgICAgaWYgKHNlbGVjdGlvblszXSkgZnVuY3Rpb25DbGF1c2UgKz0gdXRpbC5mb3JtYXQoJyAlcycsIHNlbGVjdGlvblszXSk7XG5cbiAgICAgICAgc2VsZWN0QXJyYXkucHVzaChmdW5jdGlvbkNsYXVzZSk7XG4gICAgICB9IGVsc2UgaWYgKHNlbGVjdGlvbi5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgc2VsZWN0QXJyYXkucHVzaCh1dGlsLmZvcm1hdCgnXCIlc1wiICVzICVzJywgc2VsZWN0aW9uWzBdLCBzZWxlY3Rpb25bMV0sIHNlbGVjdGlvblsyXSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0QXJyYXkucHVzaCgnKicpO1xuICAgICAgfVxuICAgIH1cbiAgICBzZWxlY3QgPSBzZWxlY3RBcnJheS5qb2luKCcsJyk7XG4gIH1cblxuICBsZXQgcXVlcnkgPSB1dGlsLmZvcm1hdChcbiAgICAnU0VMRUNUICVzICVzIEZST00gXCIlc1wiICVzICVzICVzJyxcbiAgICAob3B0aW9ucy5kaXN0aW5jdCA/ICdESVNUSU5DVCcgOiAnJyksXG4gICAgc2VsZWN0LFxuICAgIG9wdGlvbnMubWF0ZXJpYWxpemVkX3ZpZXcgPyBvcHRpb25zLm1hdGVyaWFsaXplZF92aWV3IDogdGhpcy5fcHJvcGVydGllcy50YWJsZV9uYW1lLFxuICAgIHdoZXJlQ2xhdXNlLnF1ZXJ5LFxuICAgIG9yZGVyS2V5cy5sZW5ndGggPyB1dGlsLmZvcm1hdCgnT1JERVIgQlkgJXMnLCBvcmRlcktleXMuam9pbignLCAnKSkgOiAnICcsXG4gICAgbGltaXQgPyB1dGlsLmZvcm1hdCgnTElNSVQgJXMnLCBsaW1pdCkgOiAnICcsXG4gICk7XG5cbiAgaWYgKG9wdGlvbnMuYWxsb3dfZmlsdGVyaW5nKSBxdWVyeSArPSAnIEFMTE9XIEZJTFRFUklORzsnO1xuICBlbHNlIHF1ZXJ5ICs9ICc7JztcblxuICByZXR1cm4geyBxdWVyeSwgcGFyYW1zOiB3aGVyZUNsYXVzZS5wYXJhbXMgfTtcbn07XG5cbkJhc2VNb2RlbC5nZXRfdGFibGVfbmFtZSA9IGZ1bmN0aW9uIGYoKSB7XG4gIHJldHVybiB0aGlzLl9wcm9wZXJ0aWVzLnRhYmxlX25hbWU7XG59O1xuXG5CYXNlTW9kZWwuaXNfdGFibGVfcmVhZHkgPSBmdW5jdGlvbiBmKCkge1xuICByZXR1cm4gdGhpcy5fcmVhZHkgPT09IHRydWU7XG59O1xuXG5CYXNlTW9kZWwuaW5pdCA9IGZ1bmN0aW9uIGYob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgdGhpcy5fcmVhZHkgPSB0cnVlO1xuICBjYWxsYmFjaygpO1xufTtcblxuQmFzZU1vZGVsLnN5bmNEZWZpbml0aW9uID0gZnVuY3Rpb24gZihjYWxsYmFjaykge1xuICBjb25zdCBhZnRlckNyZWF0ZSA9IChlcnIsIHJlc3VsdCkgPT4ge1xuICAgIGlmIChlcnIpIGNhbGxiYWNrKGVycik7XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLl9yZWFkeSA9IHRydWU7XG4gICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLl9jcmVhdGVfdGFibGUoYWZ0ZXJDcmVhdGUpO1xufTtcblxuQmFzZU1vZGVsLmV4ZWN1dGVfcXVlcnkgPSBmdW5jdGlvbiBmKHF1ZXJ5LCBwYXJhbXMsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGNvbnN0IGRlZmF1bHRzID0ge1xuICAgIHByZXBhcmU6IHRydWUsXG4gIH07XG5cbiAgb3B0aW9ucyA9IF8uZGVmYXVsdHNEZWVwKG9wdGlvbnMsIGRlZmF1bHRzKTtcblxuICB0aGlzLl9lbnN1cmVfY29ubmVjdGVkKChlcnIpID0+IHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkZWJ1ZygnZXhlY3V0aW5nIHF1ZXJ5OiAlcyB3aXRoIHBhcmFtczogJWonLCBxdWVyeSwgcGFyYW1zKTtcbiAgICB0aGlzLl9wcm9wZXJ0aWVzLmNxbC5leGVjdXRlKHF1ZXJ5LCBwYXJhbXMsIG9wdGlvbnMsIChlcnIxLCByZXN1bHQpID0+IHtcbiAgICAgIGlmIChlcnIxICYmIGVycjEuY29kZSA9PT0gODcwNCkge1xuICAgICAgICB0aGlzLl9leGVjdXRlX2RlZmluaXRpb25fcXVlcnkocXVlcnksIHBhcmFtcywgY2FsbGJhY2spO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2soZXJyMSwgcmVzdWx0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59O1xuXG5CYXNlTW9kZWwuZXhlY3V0ZV9lYWNoUm93ID0gZnVuY3Rpb24gZihxdWVyeSwgcGFyYW1zLCBvcHRpb25zLCBvblJlYWRhYmxlLCBjYWxsYmFjaykge1xuICB0aGlzLl9lbnN1cmVfY29ubmVjdGVkKChlcnIpID0+IHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkZWJ1ZygnZXhlY3V0aW5nIGVhY2hSb3cgcXVlcnk6ICVzIHdpdGggcGFyYW1zOiAlaicsIHF1ZXJ5LCBwYXJhbXMpO1xuICAgIHRoaXMuX3Byb3BlcnRpZXMuY3FsLmVhY2hSb3cocXVlcnksIHBhcmFtcywgb3B0aW9ucywgb25SZWFkYWJsZSwgY2FsbGJhY2spO1xuICB9KTtcbn07XG5cbkJhc2VNb2RlbC5fZXhlY3V0ZV90YWJsZV9lYWNoUm93ID0gZnVuY3Rpb24gZihxdWVyeSwgcGFyYW1zLCBvcHRpb25zLCBvblJlYWRhYmxlLCBjYWxsYmFjaykge1xuICBpZiAodGhpcy5pc190YWJsZV9yZWFkeSgpKSB7XG4gICAgdGhpcy5leGVjdXRlX2VhY2hSb3cocXVlcnksIHBhcmFtcywgb3B0aW9ucywgb25SZWFkYWJsZSwgY2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaW5pdCgoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuZXhlY3V0ZV9lYWNoUm93KHF1ZXJ5LCBwYXJhbXMsIG9wdGlvbnMsIG9uUmVhZGFibGUsIGNhbGxiYWNrKTtcbiAgICB9KTtcbiAgfVxufTtcblxuQmFzZU1vZGVsLmVhY2hSb3cgPSBmdW5jdGlvbiBmKHF1ZXJ5T2JqZWN0LCBvcHRpb25zLCBvblJlYWRhYmxlLCBjYWxsYmFjaykge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgIGNvbnN0IGNiID0gb25SZWFkYWJsZTtcbiAgICBvblJlYWRhYmxlID0gb3B0aW9ucztcbiAgICBjYWxsYmFjayA9IGNiO1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBpZiAodHlwZW9mIG9uUmVhZGFibGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyAoYnVpbGRFcnJvcignbW9kZWwuZmluZC5lYWNocm93ZXJyb3InLCAnbm8gdmFsaWQgb25SZWFkYWJsZSBmdW5jdGlvbiB3YXMgcHJvdmlkZWQnKSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5maW5kLmNiZXJyb3InKSk7XG4gIH1cblxuICBjb25zdCBkZWZhdWx0cyA9IHtcbiAgICByYXc6IGZhbHNlLFxuICAgIHByZXBhcmU6IHRydWUsXG4gIH07XG5cbiAgb3B0aW9ucyA9IF8uZGVmYXVsdHNEZWVwKG9wdGlvbnMsIGRlZmF1bHRzKTtcblxuICBvcHRpb25zLnJldHVybl9xdWVyeSA9IHRydWU7XG4gIGNvbnN0IHNlbGVjdFF1ZXJ5ID0gdGhpcy5maW5kKHF1ZXJ5T2JqZWN0LCBvcHRpb25zKTtcblxuICBjb25zdCBxdWVyeU9wdGlvbnMgPSB7IHByZXBhcmU6IG9wdGlvbnMucHJlcGFyZSB9O1xuICBpZiAob3B0aW9ucy5jb25zaXN0ZW5jeSkgcXVlcnlPcHRpb25zLmNvbnNpc3RlbmN5ID0gb3B0aW9ucy5jb25zaXN0ZW5jeTtcbiAgaWYgKG9wdGlvbnMuZmV0Y2hTaXplKSBxdWVyeU9wdGlvbnMuZmV0Y2hTaXplID0gb3B0aW9ucy5mZXRjaFNpemU7XG4gIGlmIChvcHRpb25zLmF1dG9QYWdlKSBxdWVyeU9wdGlvbnMuYXV0b1BhZ2UgPSBvcHRpb25zLmF1dG9QYWdlO1xuICBpZiAob3B0aW9ucy5oaW50cykgcXVlcnlPcHRpb25zLmhpbnRzID0gb3B0aW9ucy5oaW50cztcbiAgaWYgKG9wdGlvbnMucGFnZVN0YXRlKSBxdWVyeU9wdGlvbnMucGFnZVN0YXRlID0gb3B0aW9ucy5wYWdlU3RhdGU7XG4gIGlmIChvcHRpb25zLnJldHJ5KSBxdWVyeU9wdGlvbnMucmV0cnkgPSBvcHRpb25zLnJldHJ5O1xuICBpZiAob3B0aW9ucy5zZXJpYWxDb25zaXN0ZW5jeSkgcXVlcnlPcHRpb25zLnNlcmlhbENvbnNpc3RlbmN5ID0gb3B0aW9ucy5zZXJpYWxDb25zaXN0ZW5jeTtcblxuICB0aGlzLl9leGVjdXRlX3RhYmxlX2VhY2hSb3coc2VsZWN0UXVlcnkucXVlcnksIHNlbGVjdFF1ZXJ5LnBhcmFtcywgcXVlcnlPcHRpb25zLCAobiwgcm93KSA9PiB7XG4gICAgaWYgKCFvcHRpb25zLnJhdykge1xuICAgICAgY29uc3QgTW9kZWxDb25zdHJ1Y3RvciA9IHRoaXMuX3Byb3BlcnRpZXMuZ2V0X2NvbnN0cnVjdG9yKCk7XG4gICAgICByb3cgPSBuZXcgTW9kZWxDb25zdHJ1Y3Rvcihyb3cpO1xuICAgIH1cbiAgICBvblJlYWRhYmxlKG4sIHJvdyk7XG4gIH0sIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNhbGxiYWNrKGJ1aWxkRXJyb3IoJ21vZGVsLmZpbmQuZGJlcnJvcicsIGVycikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsYmFjayhlcnIsIHJlc3VsdCk7XG4gIH0pO1xufTtcblxuQmFzZU1vZGVsLmV4ZWN1dGVfc3RyZWFtID0gZnVuY3Rpb24gZihxdWVyeSwgcGFyYW1zLCBvcHRpb25zLCBvblJlYWRhYmxlLCBjYWxsYmFjaykge1xuICB0aGlzLl9lbnN1cmVfY29ubmVjdGVkKChlcnIpID0+IHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkZWJ1ZygnZXhlY3V0aW5nIHN0cmVhbSBxdWVyeTogJXMgd2l0aCBwYXJhbXM6ICVqJywgcXVlcnksIHBhcmFtcyk7XG4gICAgdGhpcy5fcHJvcGVydGllcy5jcWwuc3RyZWFtKHF1ZXJ5LCBwYXJhbXMsIG9wdGlvbnMpLm9uKCdyZWFkYWJsZScsIG9uUmVhZGFibGUpLm9uKCdlbmQnLCBjYWxsYmFjayk7XG4gIH0pO1xufTtcblxuQmFzZU1vZGVsLl9leGVjdXRlX3RhYmxlX3N0cmVhbSA9IGZ1bmN0aW9uIGYocXVlcnksIHBhcmFtcywgb3B0aW9ucywgb25SZWFkYWJsZSwgY2FsbGJhY2spIHtcbiAgaWYgKHRoaXMuaXNfdGFibGVfcmVhZHkoKSkge1xuICAgIHRoaXMuZXhlY3V0ZV9zdHJlYW0ocXVlcnksIHBhcmFtcywgb3B0aW9ucywgb25SZWFkYWJsZSwgY2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaW5pdCgoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuZXhlY3V0ZV9zdHJlYW0ocXVlcnksIHBhcmFtcywgb3B0aW9ucywgb25SZWFkYWJsZSwgY2FsbGJhY2spO1xuICAgIH0pO1xuICB9XG59O1xuXG5CYXNlTW9kZWwuc3RyZWFtID0gZnVuY3Rpb24gZihxdWVyeU9iamVjdCwgb3B0aW9ucywgb25SZWFkYWJsZSwgY2FsbGJhY2spIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICBjb25zdCBjYiA9IG9uUmVhZGFibGU7XG4gICAgb25SZWFkYWJsZSA9IG9wdGlvbnM7XG4gICAgY2FsbGJhY2sgPSBjYjtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIG9uUmVhZGFibGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyAoYnVpbGRFcnJvcignbW9kZWwuZmluZC5zdHJlYW1lcnJvcicsICdubyB2YWxpZCBvblJlYWRhYmxlIGZ1bmN0aW9uIHdhcyBwcm92aWRlZCcpKTtcbiAgfVxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLmZpbmQuY2JlcnJvcicpKTtcbiAgfVxuXG4gIGNvbnN0IGRlZmF1bHRzID0ge1xuICAgIHJhdzogZmFsc2UsXG4gICAgcHJlcGFyZTogdHJ1ZSxcbiAgfTtcblxuICBvcHRpb25zID0gXy5kZWZhdWx0c0RlZXAob3B0aW9ucywgZGVmYXVsdHMpO1xuXG4gIG9wdGlvbnMucmV0dXJuX3F1ZXJ5ID0gdHJ1ZTtcbiAgY29uc3Qgc2VsZWN0UXVlcnkgPSB0aGlzLmZpbmQocXVlcnlPYmplY3QsIG9wdGlvbnMpO1xuXG4gIGNvbnN0IHF1ZXJ5T3B0aW9ucyA9IHsgcHJlcGFyZTogb3B0aW9ucy5wcmVwYXJlIH07XG4gIGlmIChvcHRpb25zLmNvbnNpc3RlbmN5KSBxdWVyeU9wdGlvbnMuY29uc2lzdGVuY3kgPSBvcHRpb25zLmNvbnNpc3RlbmN5O1xuICBpZiAob3B0aW9ucy5mZXRjaFNpemUpIHF1ZXJ5T3B0aW9ucy5mZXRjaFNpemUgPSBvcHRpb25zLmZldGNoU2l6ZTtcbiAgaWYgKG9wdGlvbnMuYXV0b1BhZ2UpIHF1ZXJ5T3B0aW9ucy5hdXRvUGFnZSA9IG9wdGlvbnMuYXV0b1BhZ2U7XG4gIGlmIChvcHRpb25zLmhpbnRzKSBxdWVyeU9wdGlvbnMuaGludHMgPSBvcHRpb25zLmhpbnRzO1xuICBpZiAob3B0aW9ucy5wYWdlU3RhdGUpIHF1ZXJ5T3B0aW9ucy5wYWdlU3RhdGUgPSBvcHRpb25zLnBhZ2VTdGF0ZTtcbiAgaWYgKG9wdGlvbnMucmV0cnkpIHF1ZXJ5T3B0aW9ucy5yZXRyeSA9IG9wdGlvbnMucmV0cnk7XG4gIGlmIChvcHRpb25zLnNlcmlhbENvbnNpc3RlbmN5KSBxdWVyeU9wdGlvbnMuc2VyaWFsQ29uc2lzdGVuY3kgPSBvcHRpb25zLnNlcmlhbENvbnNpc3RlbmN5O1xuXG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMuX2V4ZWN1dGVfdGFibGVfc3RyZWFtKHNlbGVjdFF1ZXJ5LnF1ZXJ5LCBzZWxlY3RRdWVyeS5wYXJhbXMsIHF1ZXJ5T3B0aW9ucywgZnVuY3Rpb24gZjEoKSB7XG4gICAgY29uc3QgcmVhZGVyID0gdGhpcztcbiAgICByZWFkZXIucmVhZFJvdyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHJvdyA9IHJlYWRlci5yZWFkKCk7XG4gICAgICBpZiAoIXJvdykgcmV0dXJuIHJvdztcbiAgICAgIGlmICghb3B0aW9ucy5yYXcpIHtcbiAgICAgICAgY29uc3QgTW9kZWxDb25zdHJ1Y3RvciA9IHNlbGYuX3Byb3BlcnRpZXMuZ2V0X2NvbnN0cnVjdG9yKCk7XG4gICAgICAgIHJldHVybiBuZXcgTW9kZWxDb25zdHJ1Y3Rvcihyb3cpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJvdztcbiAgICB9O1xuICAgIG9uUmVhZGFibGUocmVhZGVyKTtcbiAgfSwgKGVycikgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNhbGxiYWNrKGJ1aWxkRXJyb3IoJ21vZGVsLmZpbmQuZGJlcnJvcicsIGVycikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsYmFjaygpO1xuICB9KTtcbn07XG5cbkJhc2VNb2RlbC5maW5kID0gZnVuY3Rpb24gZihxdWVyeU9iamVjdCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicgJiYgIW9wdGlvbnMucmV0dXJuX3F1ZXJ5KSB7XG4gICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLmZpbmQuY2JlcnJvcicpKTtcbiAgfVxuXG4gIGNvbnN0IGRlZmF1bHRzID0ge1xuICAgIHJhdzogZmFsc2UsXG4gICAgcHJlcGFyZTogdHJ1ZSxcbiAgfTtcblxuICBvcHRpb25zID0gXy5kZWZhdWx0c0RlZXAob3B0aW9ucywgZGVmYXVsdHMpO1xuXG4gIC8vIHNldCByYXcgdHJ1ZSBpZiBzZWxlY3QgaXMgdXNlZCxcbiAgLy8gYmVjYXVzZSBjYXN0aW5nIHRvIG1vZGVsIGluc3RhbmNlcyBtYXkgbGVhZCB0byBwcm9ibGVtc1xuICBpZiAob3B0aW9ucy5zZWxlY3QpIG9wdGlvbnMucmF3ID0gdHJ1ZTtcblxuICBsZXQgcXVlcnlQYXJhbXMgPSBbXTtcblxuICBsZXQgcXVlcnk7XG4gIHRyeSB7XG4gICAgY29uc3QgZmluZFF1ZXJ5ID0gdGhpcy5fY3JlYXRlX2ZpbmRfcXVlcnkocXVlcnlPYmplY3QsIG9wdGlvbnMpO1xuICAgIHF1ZXJ5ID0gZmluZFF1ZXJ5LnF1ZXJ5O1xuICAgIHF1ZXJ5UGFyYW1zID0gcXVlcnlQYXJhbXMuY29uY2F0KGZpbmRRdWVyeS5wYXJhbXMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FsbGJhY2soZSk7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIHRocm93IChlKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLnJldHVybl9xdWVyeSkge1xuICAgIHJldHVybiB7IHF1ZXJ5LCBwYXJhbXM6IHF1ZXJ5UGFyYW1zIH07XG4gIH1cblxuICBjb25zdCBxdWVyeU9wdGlvbnMgPSB7IHByZXBhcmU6IG9wdGlvbnMucHJlcGFyZSB9O1xuICBpZiAob3B0aW9ucy5jb25zaXN0ZW5jeSkgcXVlcnlPcHRpb25zLmNvbnNpc3RlbmN5ID0gb3B0aW9ucy5jb25zaXN0ZW5jeTtcbiAgaWYgKG9wdGlvbnMuZmV0Y2hTaXplKSBxdWVyeU9wdGlvbnMuZmV0Y2hTaXplID0gb3B0aW9ucy5mZXRjaFNpemU7XG4gIGlmIChvcHRpb25zLmF1dG9QYWdlKSBxdWVyeU9wdGlvbnMuYXV0b1BhZ2UgPSBvcHRpb25zLmF1dG9QYWdlO1xuICBpZiAob3B0aW9ucy5oaW50cykgcXVlcnlPcHRpb25zLmhpbnRzID0gb3B0aW9ucy5oaW50cztcbiAgaWYgKG9wdGlvbnMucGFnZVN0YXRlKSBxdWVyeU9wdGlvbnMucGFnZVN0YXRlID0gb3B0aW9ucy5wYWdlU3RhdGU7XG4gIGlmIChvcHRpb25zLnJldHJ5KSBxdWVyeU9wdGlvbnMucmV0cnkgPSBvcHRpb25zLnJldHJ5O1xuICBpZiAob3B0aW9ucy5zZXJpYWxDb25zaXN0ZW5jeSkgcXVlcnlPcHRpb25zLnNlcmlhbENvbnNpc3RlbmN5ID0gb3B0aW9ucy5zZXJpYWxDb25zaXN0ZW5jeTtcblxuICB0aGlzLl9leGVjdXRlX3RhYmxlX3F1ZXJ5KHF1ZXJ5LCBxdWVyeVBhcmFtcywgcXVlcnlPcHRpb25zLCAoZXJyLCByZXN1bHRzKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwuZmluZC5kYmVycm9yJywgZXJyKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghb3B0aW9ucy5yYXcpIHtcbiAgICAgIGNvbnN0IE1vZGVsQ29uc3RydWN0b3IgPSB0aGlzLl9wcm9wZXJ0aWVzLmdldF9jb25zdHJ1Y3RvcigpO1xuICAgICAgcmVzdWx0cyA9IHJlc3VsdHMucm93cy5tYXAoKHJlcykgPT4ge1xuICAgICAgICBkZWxldGUgKHJlcy5jb2x1bW5zKTtcbiAgICAgICAgcmV0dXJuIG5ldyBNb2RlbENvbnN0cnVjdG9yKHJlcyk7XG4gICAgICB9KTtcbiAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRzID0gcmVzdWx0cy5yb3dzLm1hcCgocmVzKSA9PiB7XG4gICAgICAgIGRlbGV0ZSAocmVzLmNvbHVtbnMpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfSk7XG4gICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB7fTtcbn07XG5cbkJhc2VNb2RlbC5maW5kT25lID0gZnVuY3Rpb24gZihxdWVyeU9iamVjdCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicgJiYgIW9wdGlvbnMucmV0dXJuX3F1ZXJ5KSB7XG4gICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLmZpbmQuY2JlcnJvcicpKTtcbiAgfVxuXG4gIHF1ZXJ5T2JqZWN0LiRsaW1pdCA9IDE7XG5cbiAgcmV0dXJuIHRoaXMuZmluZChxdWVyeU9iamVjdCwgb3B0aW9ucywgKGVyciwgcmVzdWx0cykgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdHNbMF0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsYmFjaygpO1xuICB9KTtcbn07XG5cbkJhc2VNb2RlbC51cGRhdGUgPSBmdW5jdGlvbiBmKHF1ZXJ5T2JqZWN0LCB1cGRhdGVWYWx1ZXMsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGNvbnN0IHNjaGVtYSA9IHRoaXMuX3Byb3BlcnRpZXMuc2NoZW1hO1xuXG4gIGNvbnN0IGRlZmF1bHRzID0ge1xuICAgIHByZXBhcmU6IHRydWUsXG4gIH07XG5cbiAgb3B0aW9ucyA9IF8uZGVmYXVsdHNEZWVwKG9wdGlvbnMsIGRlZmF1bHRzKTtcblxuICBsZXQgcXVlcnlQYXJhbXMgPSBbXTtcblxuICBjb25zdCB1cGRhdGVDbGF1c2VBcnJheSA9IFtdO1xuXG4gIGxldCBlcnJvckhhcHBlbmVkID0gT2JqZWN0LmtleXModXBkYXRlVmFsdWVzKS5zb21lKChrZXkpID0+IHtcbiAgICBpZiAoc2NoZW1hLmZpZWxkc1trZXldID09PSB1bmRlZmluZWQgfHwgc2NoZW1hLmZpZWxkc1trZXldLnZpcnR1YWwpIHJldHVybiBmYWxzZTtcblxuICAgIC8vIGNoZWNrIGZpZWxkIHZhbHVlXG4gICAgY29uc3QgZmllbGR0eXBlID0gc2NoZW1lci5nZXRfZmllbGRfdHlwZShzY2hlbWEsIGtleSk7XG4gICAgbGV0IGZpZWxkdmFsdWUgPSB1cGRhdGVWYWx1ZXNba2V5XTtcblxuICAgIGlmIChmaWVsZHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZpZWxkdmFsdWUgPSB0aGlzLl9nZXRfZGVmYXVsdF92YWx1ZShrZXkpO1xuICAgICAgaWYgKGZpZWxkdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoc2NoZW1hLmtleS5pbmRleE9mKGtleSkgPj0gMCB8fCBzY2hlbWEua2V5WzBdLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudXBkYXRlLnVuc2V0a2V5Jywga2V5KSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLnVwZGF0ZS51bnNldGtleScsIGtleSkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNjaGVtYS5maWVsZHNba2V5XS5ydWxlICYmIHNjaGVtYS5maWVsZHNba2V5XS5ydWxlLnJlcXVpcmVkKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudXBkYXRlLnVuc2V0cmVxdWlyZWQnLCBrZXkpKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyAoYnVpbGRFcnJvcignbW9kZWwudXBkYXRlLnVuc2V0cmVxdWlyZWQnLCBrZXkpKTtcbiAgICAgICAgfSBlbHNlIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoIXNjaGVtYS5maWVsZHNba2V5XS5ydWxlIHx8ICFzY2hlbWEuZmllbGRzW2tleV0ucnVsZS5pZ25vcmVfZGVmYXVsdCkge1xuICAgICAgICAvLyBkaWQgc2V0IGEgZGVmYXVsdCB2YWx1ZSwgaWdub3JlIGRlZmF1bHQgaXMgbm90IHNldFxuICAgICAgICBpZiAodGhpcy52YWxpZGF0ZShrZXksIGZpZWxkdmFsdWUpICE9PSB0cnVlKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudXBkYXRlLmludmFsaWRkZWZhdWx0dmFsdWUnLCBmaWVsZHZhbHVlLCBrZXksIGZpZWxkdHlwZSkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC51cGRhdGUuaW52YWxpZGRlZmF1bHR2YWx1ZScsIGZpZWxkdmFsdWUsIGtleSwgZmllbGR0eXBlKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZmllbGR2YWx1ZSA9PT0gbnVsbCB8fCBmaWVsZHZhbHVlID09PSBjcWwudHlwZXMudW5zZXQpIHtcbiAgICAgIGlmIChzY2hlbWEua2V5LmluZGV4T2Yoa2V5KSA+PSAwIHx8IHNjaGVtYS5rZXlbMF0uaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNhbGxiYWNrKGJ1aWxkRXJyb3IoJ21vZGVsLnVwZGF0ZS51bnNldGtleScsIGtleSkpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC51cGRhdGUudW5zZXRrZXknLCBrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoc2NoZW1hLmZpZWxkc1trZXldLnJ1bGUgJiYgc2NoZW1hLmZpZWxkc1trZXldLnJ1bGUucmVxdWlyZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNhbGxiYWNrKGJ1aWxkRXJyb3IoJ21vZGVsLnVwZGF0ZS51bnNldHJlcXVpcmVkJywga2V5KSk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLnVwZGF0ZS51bnNldHJlcXVpcmVkJywga2V5KSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICB0cnkge1xuICAgICAgbGV0ICRhZGQgPSBmYWxzZTtcbiAgICAgIGxldCAkYXBwZW5kID0gZmFsc2U7XG4gICAgICBsZXQgJHByZXBlbmQgPSBmYWxzZTtcbiAgICAgIGxldCAkcmVwbGFjZSA9IGZhbHNlO1xuICAgICAgbGV0ICRyZW1vdmUgPSBmYWxzZTtcbiAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QoZmllbGR2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGZpZWxkdmFsdWUuJGFkZCkge1xuICAgICAgICAgIGZpZWxkdmFsdWUgPSBmaWVsZHZhbHVlLiRhZGQ7XG4gICAgICAgICAgJGFkZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGR2YWx1ZS4kYXBwZW5kKSB7XG4gICAgICAgICAgZmllbGR2YWx1ZSA9IGZpZWxkdmFsdWUuJGFwcGVuZDtcbiAgICAgICAgICAkYXBwZW5kID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChmaWVsZHZhbHVlLiRwcmVwZW5kKSB7XG4gICAgICAgICAgZmllbGR2YWx1ZSA9IGZpZWxkdmFsdWUuJHByZXBlbmQ7XG4gICAgICAgICAgJHByZXBlbmQgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGZpZWxkdmFsdWUuJHJlcGxhY2UpIHtcbiAgICAgICAgICBmaWVsZHZhbHVlID0gZmllbGR2YWx1ZS4kcmVwbGFjZTtcbiAgICAgICAgICAkcmVwbGFjZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGR2YWx1ZS4kcmVtb3ZlKSB7XG4gICAgICAgICAgZmllbGR2YWx1ZSA9IGZpZWxkdmFsdWUuJHJlbW92ZTtcbiAgICAgICAgICAkcmVtb3ZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBkYlZhbCA9IHRoaXMuX2dldF9kYl92YWx1ZV9leHByZXNzaW9uKGtleSwgZmllbGR2YWx1ZSk7XG5cbiAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QoZGJWYWwpICYmIGRiVmFsLnF1ZXJ5X3NlZ21lbnQpIHtcbiAgICAgICAgaWYgKFsnbWFwJywgJ2xpc3QnLCAnc2V0J10uaW5kZXhPZihmaWVsZHR5cGUpID4gLTEpIHtcbiAgICAgICAgICBpZiAoJGFkZCB8fCAkYXBwZW5kKSB7XG4gICAgICAgICAgICBkYlZhbC5xdWVyeV9zZWdtZW50ID0gdXRpbC5mb3JtYXQoJ1wiJXNcIiArICVzJywga2V5LCBkYlZhbC5xdWVyeV9zZWdtZW50KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCRwcmVwZW5kKSB7XG4gICAgICAgICAgICBpZiAoZmllbGR0eXBlID09PSAnbGlzdCcpIHtcbiAgICAgICAgICAgICAgZGJWYWwucXVlcnlfc2VnbWVudCA9IHV0aWwuZm9ybWF0KCclcyArIFwiJXNcIicsIGRiVmFsLnF1ZXJ5X3NlZ21lbnQsIGtleSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyAoYnVpbGRFcnJvcihcbiAgICAgICAgICAgICAgICAnbW9kZWwudXBkYXRlLmludmFsaWRwcmVwZW5kb3AnLFxuICAgICAgICAgICAgICAgIHV0aWwuZm9ybWF0KCclcyBkYXRhdHlwZXMgZG9lcyBub3Qgc3VwcG9ydCAkcHJlcGVuZCwgdXNlICRhZGQgaW5zdGVhZCcsIGZpZWxkdHlwZSksXG4gICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoJHJlbW92ZSkge1xuICAgICAgICAgICAgZGJWYWwucXVlcnlfc2VnbWVudCA9IHV0aWwuZm9ybWF0KCdcIiVzXCIgLSAlcycsIGtleSwgZGJWYWwucXVlcnlfc2VnbWVudCk7XG4gICAgICAgICAgICBpZiAoZmllbGR0eXBlID09PSAnbWFwJykgZGJWYWwucGFyYW1ldGVyID0gT2JqZWN0LmtleXMoZGJWYWwucGFyYW1ldGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJHJlcGxhY2UpIHtcbiAgICAgICAgICBpZiAoZmllbGR0eXBlID09PSAnbWFwJykge1xuICAgICAgICAgICAgdXBkYXRlQ2xhdXNlQXJyYXkucHVzaCh1dGlsLmZvcm1hdCgnXCIlc1wiWz9dPSVzJywga2V5LCBkYlZhbC5xdWVyeV9zZWdtZW50KSk7XG4gICAgICAgICAgICBjb25zdCByZXBsYWNlS2V5cyA9IE9iamVjdC5rZXlzKGRiVmFsLnBhcmFtZXRlcik7XG4gICAgICAgICAgICBjb25zdCByZXBsYWNlVmFsdWVzID0gXy52YWx1ZXMoZGJWYWwucGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGlmIChyZXBsYWNlS2V5cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgcXVlcnlQYXJhbXMucHVzaChyZXBsYWNlS2V5c1swXSk7XG4gICAgICAgICAgICAgIHF1ZXJ5UGFyYW1zLnB1c2gocmVwbGFjZVZhbHVlc1swXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyAoXG4gICAgICAgICAgICAgICAgYnVpbGRFcnJvcignbW9kZWwudXBkYXRlLmludmFsaWRyZXBsYWNlb3AnLCAnJHJlcGxhY2UgaW4gbWFwIGRvZXMgbm90IHN1cHBvcnQgbW9yZSB0aGFuIG9uZSBpdGVtJylcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGZpZWxkdHlwZSA9PT0gJ2xpc3QnKSB7XG4gICAgICAgICAgICB1cGRhdGVDbGF1c2VBcnJheS5wdXNoKHV0aWwuZm9ybWF0KCdcIiVzXCJbP109JXMnLCBrZXksIGRiVmFsLnF1ZXJ5X3NlZ21lbnQpKTtcbiAgICAgICAgICAgIGlmIChkYlZhbC5wYXJhbWV0ZXIubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgIHF1ZXJ5UGFyYW1zLnB1c2goZGJWYWwucGFyYW1ldGVyWzBdKTtcbiAgICAgICAgICAgICAgcXVlcnlQYXJhbXMucHVzaChkYlZhbC5wYXJhbWV0ZXJbMV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgKGJ1aWxkRXJyb3IoXG4gICAgICAgICAgICAgICAgJ21vZGVsLnVwZGF0ZS5pbnZhbGlkcmVwbGFjZW9wJyxcbiAgICAgICAgICAgICAgICAnJHJlcGxhY2UgaW4gbGlzdCBzaG91bGQgaGF2ZSBleGFjdGx5IDIgaXRlbXMsIGZpcnN0IG9uZSBhcyB0aGUgaW5kZXggYW5kIHRoZSBzZWNvbmQgb25lIGFzIHRoZSB2YWx1ZScsXG4gICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyAoYnVpbGRFcnJvcihcbiAgICAgICAgICAgICAgJ21vZGVsLnVwZGF0ZS5pbnZhbGlkcmVwbGFjZW9wJyxcbiAgICAgICAgICAgICAgdXRpbC5mb3JtYXQoJyVzIGRhdGF0eXBlcyBkb2VzIG5vdCBzdXBwb3J0ICRyZXBsYWNlJywgZmllbGR0eXBlKSxcbiAgICAgICAgICAgICkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cGRhdGVDbGF1c2VBcnJheS5wdXNoKHV0aWwuZm9ybWF0KCdcIiVzXCI9JXMnLCBrZXksIGRiVmFsLnF1ZXJ5X3NlZ21lbnQpKTtcbiAgICAgICAgICBxdWVyeVBhcmFtcy5wdXNoKGRiVmFsLnBhcmFtZXRlcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVwZGF0ZUNsYXVzZUFycmF5LnB1c2godXRpbC5mb3JtYXQoJ1wiJXNcIj0lcycsIGtleSwgZGJWYWwpKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrKGUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRocm93IChlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcblxuICBpZiAoZXJyb3JIYXBwZW5lZCkgcmV0dXJuIHt9O1xuXG4gIGxldCBxdWVyeSA9ICdVUERBVEUgXCIlc1wiJztcbiAgbGV0IHdoZXJlID0gJyc7XG4gIGlmIChvcHRpb25zLnR0bCkgcXVlcnkgKz0gdXRpbC5mb3JtYXQoJyBVU0lORyBUVEwgJXMnLCBvcHRpb25zLnR0bCk7XG4gIHF1ZXJ5ICs9ICcgU0VUICVzICVzJztcbiAgdHJ5IHtcbiAgICBjb25zdCB3aGVyZUNsYXVzZSA9IHRoaXMuX2NyZWF0ZV93aGVyZV9jbGF1c2UocXVlcnlPYmplY3QpO1xuICAgIHdoZXJlID0gd2hlcmVDbGF1c2UucXVlcnk7XG4gICAgcXVlcnlQYXJhbXMgPSBxdWVyeVBhcmFtcy5jb25jYXQod2hlcmVDbGF1c2UucGFyYW1zKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNhbGxiYWNrKGUpO1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICB0aHJvdyAoZSk7XG4gIH1cbiAgcXVlcnkgPSB1dGlsLmZvcm1hdChxdWVyeSwgdGhpcy5fcHJvcGVydGllcy50YWJsZV9uYW1lLCB1cGRhdGVDbGF1c2VBcnJheS5qb2luKCcsICcpLCB3aGVyZSk7XG5cbiAgaWYgKG9wdGlvbnMuY29uZGl0aW9ucykge1xuICAgIGNvbnN0IHVwZGF0ZUNvbmRpdGlvbnNBcnJheSA9IFtdO1xuXG4gICAgZXJyb3JIYXBwZW5lZCA9IE9iamVjdC5rZXlzKG9wdGlvbnMuY29uZGl0aW9ucykuc29tZSgoa2V5KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBkYlZhbCA9IHRoaXMuX2dldF9kYl92YWx1ZV9leHByZXNzaW9uKGtleSwgb3B0aW9ucy5jb25kaXRpb25zW2tleV0pO1xuICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGRiVmFsKSAmJiBkYlZhbC5xdWVyeV9zZWdtZW50KSB7XG4gICAgICAgICAgdXBkYXRlQ29uZGl0aW9uc0FycmF5LnB1c2godXRpbC5mb3JtYXQoJ1wiJXNcIj0lcycsIGtleSwgZGJWYWwucXVlcnlfc2VnbWVudCkpO1xuICAgICAgICAgIHF1ZXJ5UGFyYW1zLnB1c2goZGJWYWwucGFyYW1ldGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cGRhdGVDb25kaXRpb25zQXJyYXkucHVzaCh1dGlsLmZvcm1hdCgnXCIlc1wiPSVzJywga2V5LCBkYlZhbCkpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjYWxsYmFjayhlKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyAoZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG5cbiAgICBpZiAoZXJyb3JIYXBwZW5lZCkgcmV0dXJuIHt9O1xuXG4gICAgcXVlcnkgKz0gdXRpbC5mb3JtYXQoJyBJRiAlcycsIHVwZGF0ZUNvbmRpdGlvbnNBcnJheS5qb2luKCcgQU5EICcpKTtcbiAgfVxuICBpZiAob3B0aW9ucy5pZl9leGlzdHMpIHF1ZXJ5ICs9ICcgSUYgRVhJU1RTJztcblxuICBxdWVyeSArPSAnOyc7XG5cbiAgaWYgKG9wdGlvbnMucmV0dXJuX3F1ZXJ5KSB7XG4gICAgcmV0dXJuIHsgcXVlcnksIHBhcmFtczogcXVlcnlQYXJhbXMgfTtcbiAgfVxuXG4gIGNvbnN0IHF1ZXJ5T3B0aW9ucyA9IHsgcHJlcGFyZTogb3B0aW9ucy5wcmVwYXJlIH07XG4gIGlmIChvcHRpb25zLmNvbnNpc3RlbmN5KSBxdWVyeU9wdGlvbnMuY29uc2lzdGVuY3kgPSBvcHRpb25zLmNvbnNpc3RlbmN5O1xuICBpZiAob3B0aW9ucy5mZXRjaFNpemUpIHF1ZXJ5T3B0aW9ucy5mZXRjaFNpemUgPSBvcHRpb25zLmZldGNoU2l6ZTtcbiAgaWYgKG9wdGlvbnMuYXV0b1BhZ2UpIHF1ZXJ5T3B0aW9ucy5hdXRvUGFnZSA9IG9wdGlvbnMuYXV0b1BhZ2U7XG4gIGlmIChvcHRpb25zLmhpbnRzKSBxdWVyeU9wdGlvbnMuaGludHMgPSBvcHRpb25zLmhpbnRzO1xuICBpZiAob3B0aW9ucy5wYWdlU3RhdGUpIHF1ZXJ5T3B0aW9ucy5wYWdlU3RhdGUgPSBvcHRpb25zLnBhZ2VTdGF0ZTtcbiAgaWYgKG9wdGlvbnMucmV0cnkpIHF1ZXJ5T3B0aW9ucy5yZXRyeSA9IG9wdGlvbnMucmV0cnk7XG4gIGlmIChvcHRpb25zLnNlcmlhbENvbnNpc3RlbmN5KSBxdWVyeU9wdGlvbnMuc2VyaWFsQ29uc2lzdGVuY3kgPSBvcHRpb25zLnNlcmlhbENvbnNpc3RlbmN5O1xuXG4gIC8vIHNldCBkdW1teSBob29rIGZ1bmN0aW9uIGlmIG5vdCBwcmVzZW50IGluIHNjaGVtYVxuICBpZiAodHlwZW9mIHNjaGVtYS5iZWZvcmVfdXBkYXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgc2NoZW1hLmJlZm9yZV91cGRhdGUgPSBmdW5jdGlvbiBmMShxdWVyeU9iaiwgdXBkYXRlVmFsLCBvcHRpb25zT2JqLCBuZXh0KSB7XG4gICAgICBuZXh0KCk7XG4gICAgfTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2NoZW1hLmFmdGVyX3VwZGF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHNjaGVtYS5hZnRlcl91cGRhdGUgPSBmdW5jdGlvbiBmMShxdWVyeU9iaiwgdXBkYXRlVmFsLCBvcHRpb25zT2JqLCBuZXh0KSB7XG4gICAgICBuZXh0KCk7XG4gICAgfTtcbiAgfVxuXG4gIHNjaGVtYS5iZWZvcmVfdXBkYXRlKHF1ZXJ5T2JqZWN0LCB1cGRhdGVWYWx1ZXMsIG9wdGlvbnMsIChlcnJvcikgPT4ge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYWxsYmFjayhidWlsZEVycm9yKCdtb2RlbC51cGRhdGUuYmVmb3JlLmVycm9yJywgZXJyb3IpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLnVwZGF0ZS5iZWZvcmUuZXJyb3InLCBlcnJvcikpO1xuICAgIH1cblxuICAgIHRoaXMuX2V4ZWN1dGVfdGFibGVfcXVlcnkocXVlcnksIHF1ZXJ5UGFyYW1zLCBxdWVyeU9wdGlvbnMsIChlcnIsIHJlc3VsdHMpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGNhbGxiYWNrKGJ1aWxkRXJyb3IoJ21vZGVsLnVwZGF0ZS5kYmVycm9yJywgZXJyKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNjaGVtYS5hZnRlcl91cGRhdGUocXVlcnlPYmplY3QsIHVwZGF0ZVZhbHVlcywgb3B0aW9ucywgKGVycm9yMSkgPT4ge1xuICAgICAgICAgIGlmIChlcnJvcjEpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGJ1aWxkRXJyb3IoJ21vZGVsLnVwZGF0ZS5hZnRlci5lcnJvcicsIGVycm9yMSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGVycikge1xuICAgICAgICB0aHJvdyAoYnVpbGRFcnJvcignbW9kZWwudXBkYXRlLmRiZXJyb3InLCBlcnIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjaGVtYS5hZnRlcl91cGRhdGUocXVlcnlPYmplY3QsIHVwZGF0ZVZhbHVlcywgb3B0aW9ucywgKGVycm9yMSkgPT4ge1xuICAgICAgICAgIGlmIChlcnJvcjEpIHtcbiAgICAgICAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC51cGRhdGUuYWZ0ZXIuZXJyb3InLCBlcnJvcjEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4ge307XG59O1xuXG5CYXNlTW9kZWwuZGVsZXRlID0gZnVuY3Rpb24gZihxdWVyeU9iamVjdCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgcHJlcGFyZTogdHJ1ZSxcbiAgfTtcblxuICBvcHRpb25zID0gXy5kZWZhdWx0c0RlZXAob3B0aW9ucywgZGVmYXVsdHMpO1xuXG4gIGxldCBxdWVyeVBhcmFtcyA9IFtdO1xuXG4gIGxldCBxdWVyeSA9ICdERUxFVEUgRlJPTSBcIiVzXCIgJXM7JztcbiAgbGV0IHdoZXJlID0gJyc7XG4gIHRyeSB7XG4gICAgY29uc3Qgd2hlcmVDbGF1c2UgPSB0aGlzLl9jcmVhdGVfd2hlcmVfY2xhdXNlKHF1ZXJ5T2JqZWN0KTtcbiAgICB3aGVyZSA9IHdoZXJlQ2xhdXNlLnF1ZXJ5O1xuICAgIHF1ZXJ5UGFyYW1zID0gcXVlcnlQYXJhbXMuY29uY2F0KHdoZXJlQ2xhdXNlLnBhcmFtcyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayhlKTtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgdGhyb3cgKGUpO1xuICB9XG5cbiAgcXVlcnkgPSB1dGlsLmZvcm1hdChxdWVyeSwgdGhpcy5fcHJvcGVydGllcy50YWJsZV9uYW1lLCB3aGVyZSk7XG5cbiAgaWYgKG9wdGlvbnMucmV0dXJuX3F1ZXJ5KSB7XG4gICAgcmV0dXJuIHsgcXVlcnksIHBhcmFtczogcXVlcnlQYXJhbXMgfTtcbiAgfVxuXG4gIGNvbnN0IHF1ZXJ5T3B0aW9ucyA9IHsgcHJlcGFyZTogb3B0aW9ucy5wcmVwYXJlIH07XG4gIGlmIChvcHRpb25zLmNvbnNpc3RlbmN5KSBxdWVyeU9wdGlvbnMuY29uc2lzdGVuY3kgPSBvcHRpb25zLmNvbnNpc3RlbmN5O1xuICBpZiAob3B0aW9ucy5mZXRjaFNpemUpIHF1ZXJ5T3B0aW9ucy5mZXRjaFNpemUgPSBvcHRpb25zLmZldGNoU2l6ZTtcbiAgaWYgKG9wdGlvbnMuYXV0b1BhZ2UpIHF1ZXJ5T3B0aW9ucy5hdXRvUGFnZSA9IG9wdGlvbnMuYXV0b1BhZ2U7XG4gIGlmIChvcHRpb25zLmhpbnRzKSBxdWVyeU9wdGlvbnMuaGludHMgPSBvcHRpb25zLmhpbnRzO1xuICBpZiAob3B0aW9ucy5wYWdlU3RhdGUpIHF1ZXJ5T3B0aW9ucy5wYWdlU3RhdGUgPSBvcHRpb25zLnBhZ2VTdGF0ZTtcbiAgaWYgKG9wdGlvbnMucmV0cnkpIHF1ZXJ5T3B0aW9ucy5yZXRyeSA9IG9wdGlvbnMucmV0cnk7XG4gIGlmIChvcHRpb25zLnNlcmlhbENvbnNpc3RlbmN5KSBxdWVyeU9wdGlvbnMuc2VyaWFsQ29uc2lzdGVuY3kgPSBvcHRpb25zLnNlcmlhbENvbnNpc3RlbmN5O1xuXG4gIC8vIHNldCBkdW1teSBob29rIGZ1bmN0aW9uIGlmIG5vdCBwcmVzZW50IGluIHNjaGVtYVxuICBjb25zdCBzY2hlbWEgPSB0aGlzLl9wcm9wZXJ0aWVzLnNjaGVtYTtcbiAgaWYgKHR5cGVvZiBzY2hlbWEuYmVmb3JlX2RlbGV0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHNjaGVtYS5iZWZvcmVfZGVsZXRlID0gZnVuY3Rpb24gZjEocXVlcnlPYmosIG9wdGlvbnNPYmosIG5leHQpIHtcbiAgICAgIG5leHQoKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzY2hlbWEuYWZ0ZXJfZGVsZXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgc2NoZW1hLmFmdGVyX2RlbGV0ZSA9IGZ1bmN0aW9uIGYxKHF1ZXJ5T2JqLCBvcHRpb25zT2JqLCBuZXh0KSB7XG4gICAgICBuZXh0KCk7XG4gICAgfTtcbiAgfVxuXG4gIHNjaGVtYS5iZWZvcmVfZGVsZXRlKHF1ZXJ5T2JqZWN0LCBvcHRpb25zLCAoZXJyb3IpID0+IHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwuZGVsZXRlLmJlZm9yZS5lcnJvcicsIGVycm9yKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5kZWxldGUuYmVmb3JlLmVycm9yJywgZXJyb3IpKTtcbiAgICB9XG5cbiAgICB0aGlzLl9leGVjdXRlX3RhYmxlX3F1ZXJ5KHF1ZXJ5LCBxdWVyeVBhcmFtcywgcXVlcnlPcHRpb25zLCAoZXJyLCByZXN1bHRzKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjYWxsYmFjayhidWlsZEVycm9yKCdtb2RlbC5kZWxldGUuZGJlcnJvcicsIGVycikpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzY2hlbWEuYWZ0ZXJfZGVsZXRlKHF1ZXJ5T2JqZWN0LCBvcHRpb25zLCAoZXJyb3IxKSA9PiB7XG4gICAgICAgICAgaWYgKGVycm9yMSkge1xuICAgICAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwuZGVsZXRlLmFmdGVyLmVycm9yJywgZXJyb3IxKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoZXJyKSB7XG4gICAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5kZWxldGUuZGJlcnJvcicsIGVycikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2NoZW1hLmFmdGVyX2RlbGV0ZShxdWVyeU9iamVjdCwgb3B0aW9ucywgKGVycm9yMSkgPT4ge1xuICAgICAgICAgIGlmIChlcnJvcjEpIHtcbiAgICAgICAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5kZWxldGUuYWZ0ZXIuZXJyb3InLCBlcnJvcjEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4ge307XG59O1xuXG5CYXNlTW9kZWwudHJ1bmNhdGUgPSBmdW5jdGlvbiBmKGNhbGxiYWNrKSB7XG4gIGNvbnN0IHByb3BlcnRpZXMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICBjb25zdCB0YWJsZU5hbWUgPSBwcm9wZXJ0aWVzLnRhYmxlX25hbWU7XG5cbiAgY29uc3QgcXVlcnkgPSB1dGlsLmZvcm1hdCgnVFJVTkNBVEUgVEFCTEUgXCIlc1wiOycsIHRhYmxlTmFtZSk7XG4gIHRoaXMuX2V4ZWN1dGVfZGVmaW5pdGlvbl9xdWVyeShxdWVyeSwgW10sIGNhbGxiYWNrKTtcbn07XG5cbkJhc2VNb2RlbC5kcm9wX212aWV3cyA9IGZ1bmN0aW9uIGYobXZpZXdzLCBjYWxsYmFjaykge1xuICBhc3luYy5lYWNoKG12aWV3cywgKHZpZXcsIHZpZXdDYWxsYmFjaykgPT4ge1xuICAgIGNvbnN0IHF1ZXJ5ID0gdXRpbC5mb3JtYXQoJ0RST1AgTUFURVJJQUxJWkVEIFZJRVcgSUYgRVhJU1RTIFwiJXNcIjsnLCB2aWV3KTtcbiAgICB0aGlzLl9leGVjdXRlX2RlZmluaXRpb25fcXVlcnkocXVlcnksIFtdLCB2aWV3Q2FsbGJhY2spO1xuICB9LCAoZXJyKSA9PiB7XG4gICAgaWYgKGVycikgY2FsbGJhY2soZXJyKTtcbiAgICBlbHNlIGNhbGxiYWNrKCk7XG4gIH0pO1xufTtcblxuQmFzZU1vZGVsLmRyb3BfaW5kZXhlcyA9IGZ1bmN0aW9uIGYoaW5kZXhlcywgY2FsbGJhY2spIHtcbiAgYXN5bmMuZWFjaChpbmRleGVzLCAoaW5kZXgsIGluZGV4Q2FsbGJhY2spID0+IHtcbiAgICBjb25zdCBxdWVyeSA9IHV0aWwuZm9ybWF0KCdEUk9QIElOREVYIElGIEVYSVNUUyBcIiVzXCI7JywgaW5kZXgpO1xuICAgIHRoaXMuX2V4ZWN1dGVfZGVmaW5pdGlvbl9xdWVyeShxdWVyeSwgW10sIGluZGV4Q2FsbGJhY2spO1xuICB9LCAoZXJyKSA9PiB7XG4gICAgaWYgKGVycikgY2FsbGJhY2soZXJyKTtcbiAgICBlbHNlIGNhbGxiYWNrKCk7XG4gIH0pO1xufTtcblxuQmFzZU1vZGVsLmFsdGVyX3RhYmxlID0gZnVuY3Rpb24gZihvcGVyYXRpb24sIGZpZWxkbmFtZSwgdHlwZSwgY2FsbGJhY2spIHtcbiAgY29uc3QgcHJvcGVydGllcyA9IHRoaXMuX3Byb3BlcnRpZXM7XG4gIGNvbnN0IHRhYmxlTmFtZSA9IHByb3BlcnRpZXMudGFibGVfbmFtZTtcblxuICBpZiAob3BlcmF0aW9uID09PSAnQUxURVInKSB0eXBlID0gdXRpbC5mb3JtYXQoJ1RZUEUgJXMnLCB0eXBlKTtcbiAgZWxzZSBpZiAob3BlcmF0aW9uID09PSAnRFJPUCcpIHR5cGUgPSAnJztcblxuICBjb25zdCBxdWVyeSA9IHV0aWwuZm9ybWF0KCdBTFRFUiBUQUJMRSBcIiVzXCIgJXMgXCIlc1wiICVzOycsIHRhYmxlTmFtZSwgb3BlcmF0aW9uLCBmaWVsZG5hbWUsIHR5cGUpO1xuICB0aGlzLl9leGVjdXRlX2RlZmluaXRpb25fcXVlcnkocXVlcnksIFtdLCBjYWxsYmFjayk7XG59O1xuXG5CYXNlTW9kZWwuZHJvcF90YWJsZSA9IGZ1bmN0aW9uIGYoY2FsbGJhY2spIHtcbiAgY29uc3QgcHJvcGVydGllcyA9IHRoaXMuX3Byb3BlcnRpZXM7XG4gIGNvbnN0IHRhYmxlTmFtZSA9IHByb3BlcnRpZXMudGFibGVfbmFtZTtcblxuICBjb25zdCBxdWVyeSA9IHV0aWwuZm9ybWF0KCdEUk9QIFRBQkxFIElGIEVYSVNUUyBcIiVzXCI7JywgdGFibGVOYW1lKTtcbiAgdGhpcy5fZXhlY3V0ZV9kZWZpbml0aW9uX3F1ZXJ5KHF1ZXJ5LCBbXSwgY2FsbGJhY2spO1xufTtcblxuQmFzZU1vZGVsLnByb3RvdHlwZS5fZ2V0X2RhdGFfdHlwZXMgPSBmdW5jdGlvbiBmKCkge1xuICByZXR1cm4gY3FsLnR5cGVzO1xufTtcblxuQmFzZU1vZGVsLnByb3RvdHlwZS5fZ2V0X2RlZmF1bHRfdmFsdWUgPSBmdW5jdGlvbiBmKGZpZWxkbmFtZSkge1xuICBjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5jb25zdHJ1Y3Rvci5fcHJvcGVydGllcztcbiAgY29uc3Qgc2NoZW1hID0gcHJvcGVydGllcy5zY2hlbWE7XG5cbiAgaWYgKF8uaXNQbGFpbk9iamVjdChzY2hlbWEuZmllbGRzW2ZpZWxkbmFtZV0pICYmIHNjaGVtYS5maWVsZHNbZmllbGRuYW1lXS5kZWZhdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIHNjaGVtYS5maWVsZHNbZmllbGRuYW1lXS5kZWZhdWx0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2NoZW1hLmZpZWxkc1tmaWVsZG5hbWVdLmRlZmF1bHQuY2FsbCh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHNjaGVtYS5maWVsZHNbZmllbGRuYW1lXS5kZWZhdWx0O1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5CYXNlTW9kZWwucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gZihwcm9wZXJ0eU5hbWUsIHZhbHVlKSB7XG4gIHZhbHVlID0gdmFsdWUgfHwgdGhpc1twcm9wZXJ0eU5hbWVdO1xuICB0aGlzLl92YWxpZGF0b3JzID0gdGhpcy5fdmFsaWRhdG9ycyB8fCB7fTtcbiAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuX3ZhbGlkYXRlKHRoaXMuX3ZhbGlkYXRvcnNbcHJvcGVydHlOYW1lXSB8fCBbXSwgdmFsdWUpO1xufTtcblxuQmFzZU1vZGVsLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gZm4ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgY29uc3QgaWRlbnRpZmllcnMgPSBbXTtcbiAgY29uc3QgdmFsdWVzID0gW107XG4gIGNvbnN0IHByb3BlcnRpZXMgPSB0aGlzLmNvbnN0cnVjdG9yLl9wcm9wZXJ0aWVzO1xuICBjb25zdCBzY2hlbWEgPSBwcm9wZXJ0aWVzLnNjaGVtYTtcblxuICBjb25zdCBkZWZhdWx0cyA9IHtcbiAgICBwcmVwYXJlOiB0cnVlLFxuICB9O1xuXG4gIG9wdGlvbnMgPSBfLmRlZmF1bHRzRGVlcChvcHRpb25zLCBkZWZhdWx0cyk7XG5cbiAgY29uc3QgcXVlcnlQYXJhbXMgPSBbXTtcblxuICBjb25zdCBlcnJvckhhcHBlbmVkID0gT2JqZWN0LmtleXMoc2NoZW1hLmZpZWxkcykuc29tZSgoZikgPT4ge1xuICAgIGlmIChzY2hlbWEuZmllbGRzW2ZdLnZpcnR1YWwpIHJldHVybiBmYWxzZTtcblxuICAgIC8vIGNoZWNrIGZpZWxkIHZhbHVlXG4gICAgY29uc3QgZmllbGR0eXBlID0gc2NoZW1lci5nZXRfZmllbGRfdHlwZShzY2hlbWEsIGYpO1xuICAgIGxldCBmaWVsZHZhbHVlID0gdGhpc1tmXTtcblxuICAgIGlmIChmaWVsZHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZpZWxkdmFsdWUgPSB0aGlzLl9nZXRfZGVmYXVsdF92YWx1ZShmKTtcbiAgICAgIGlmIChmaWVsZHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHNjaGVtYS5rZXkuaW5kZXhPZihmKSA+PSAwIHx8IHNjaGVtYS5rZXlbMF0uaW5kZXhPZihmKSA+PSAwKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwuc2F2ZS51bnNldGtleScsIGYpKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyAoYnVpbGRFcnJvcignbW9kZWwuc2F2ZS51bnNldGtleScsIGYpKTtcbiAgICAgICAgfSBlbHNlIGlmIChzY2hlbWEuZmllbGRzW2ZdLnJ1bGUgJiYgc2NoZW1hLmZpZWxkc1tmXS5ydWxlLnJlcXVpcmVkKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwuc2F2ZS51bnNldHJlcXVpcmVkJywgZikpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5zYXZlLnVuc2V0cmVxdWlyZWQnLCBmKSk7XG4gICAgICAgIH0gZWxzZSByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKCFzY2hlbWEuZmllbGRzW2ZdLnJ1bGUgfHwgIXNjaGVtYS5maWVsZHNbZl0ucnVsZS5pZ25vcmVfZGVmYXVsdCkge1xuICAgICAgICAvLyBkaWQgc2V0IGEgZGVmYXVsdCB2YWx1ZSwgaWdub3JlIGRlZmF1bHQgaXMgbm90IHNldFxuICAgICAgICBpZiAodGhpcy52YWxpZGF0ZShmLCBmaWVsZHZhbHVlKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGJ1aWxkRXJyb3IoJ21vZGVsLnNhdmUuaW52YWxpZGRlZmF1bHR2YWx1ZScsIGZpZWxkdmFsdWUsIGYsIGZpZWxkdHlwZSkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5zYXZlLmludmFsaWRkZWZhdWx0dmFsdWUnLCBmaWVsZHZhbHVlLCBmLCBmaWVsZHR5cGUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmaWVsZHZhbHVlID09PSBudWxsIHx8IGZpZWxkdmFsdWUgPT09IGNxbC50eXBlcy51bnNldCkge1xuICAgICAgaWYgKHNjaGVtYS5rZXkuaW5kZXhPZihmKSA+PSAwIHx8IHNjaGVtYS5rZXlbMF0uaW5kZXhPZihmKSA+PSAwKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjYWxsYmFjayhidWlsZEVycm9yKCdtb2RlbC5zYXZlLnVuc2V0a2V5JywgZikpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5zYXZlLnVuc2V0a2V5JywgZikpO1xuICAgICAgfSBlbHNlIGlmIChzY2hlbWEuZmllbGRzW2ZdLnJ1bGUgJiYgc2NoZW1hLmZpZWxkc1tmXS5ydWxlLnJlcXVpcmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjYWxsYmFjayhidWlsZEVycm9yKCdtb2RlbC5zYXZlLnVuc2V0cmVxdWlyZWQnLCBmKSk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLnNhdmUudW5zZXRyZXF1aXJlZCcsIGYpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKHV0aWwuZm9ybWF0KCdcIiVzXCInLCBmKSk7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgZGJWYWwgPSB0aGlzLmNvbnN0cnVjdG9yLl9nZXRfZGJfdmFsdWVfZXhwcmVzc2lvbihmLCBmaWVsZHZhbHVlKTtcbiAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QoZGJWYWwpICYmIGRiVmFsLnF1ZXJ5X3NlZ21lbnQpIHtcbiAgICAgICAgdmFsdWVzLnB1c2goZGJWYWwucXVlcnlfc2VnbWVudCk7XG4gICAgICAgIHF1ZXJ5UGFyYW1zLnB1c2goZGJWYWwucGFyYW1ldGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKGRiVmFsKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrKGUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRocm93IChlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcblxuICBpZiAoZXJyb3JIYXBwZW5lZCkgcmV0dXJuIHt9O1xuXG4gIGxldCBxdWVyeSA9IHV0aWwuZm9ybWF0KFxuICAgICdJTlNFUlQgSU5UTyBcIiVzXCIgKCAlcyApIFZBTFVFUyAoICVzICknLFxuICAgIHByb3BlcnRpZXMudGFibGVfbmFtZSxcbiAgICBpZGVudGlmaWVycy5qb2luKCcgLCAnKSxcbiAgICB2YWx1ZXMuam9pbignICwgJyksXG4gICk7XG5cbiAgaWYgKG9wdGlvbnMuaWZfbm90X2V4aXN0KSBxdWVyeSArPSAnIElGIE5PVCBFWElTVFMnO1xuICBpZiAob3B0aW9ucy50dGwpIHF1ZXJ5ICs9IHV0aWwuZm9ybWF0KCcgVVNJTkcgVFRMICVzJywgb3B0aW9ucy50dGwpO1xuXG4gIHF1ZXJ5ICs9ICc7JztcblxuICBpZiAob3B0aW9ucy5yZXR1cm5fcXVlcnkpIHtcbiAgICByZXR1cm4geyBxdWVyeSwgcGFyYW1zOiBxdWVyeVBhcmFtcyB9O1xuICB9XG5cbiAgY29uc3QgcXVlcnlPcHRpb25zID0geyBwcmVwYXJlOiBvcHRpb25zLnByZXBhcmUgfTtcbiAgaWYgKG9wdGlvbnMuY29uc2lzdGVuY3kpIHF1ZXJ5T3B0aW9ucy5jb25zaXN0ZW5jeSA9IG9wdGlvbnMuY29uc2lzdGVuY3k7XG4gIGlmIChvcHRpb25zLmZldGNoU2l6ZSkgcXVlcnlPcHRpb25zLmZldGNoU2l6ZSA9IG9wdGlvbnMuZmV0Y2hTaXplO1xuICBpZiAob3B0aW9ucy5hdXRvUGFnZSkgcXVlcnlPcHRpb25zLmF1dG9QYWdlID0gb3B0aW9ucy5hdXRvUGFnZTtcbiAgaWYgKG9wdGlvbnMuaGludHMpIHF1ZXJ5T3B0aW9ucy5oaW50cyA9IG9wdGlvbnMuaGludHM7XG4gIGlmIChvcHRpb25zLnBhZ2VTdGF0ZSkgcXVlcnlPcHRpb25zLnBhZ2VTdGF0ZSA9IG9wdGlvbnMucGFnZVN0YXRlO1xuICBpZiAob3B0aW9ucy5yZXRyeSkgcXVlcnlPcHRpb25zLnJldHJ5ID0gb3B0aW9ucy5yZXRyeTtcbiAgaWYgKG9wdGlvbnMuc2VyaWFsQ29uc2lzdGVuY3kpIHF1ZXJ5T3B0aW9ucy5zZXJpYWxDb25zaXN0ZW5jeSA9IG9wdGlvbnMuc2VyaWFsQ29uc2lzdGVuY3k7XG5cbiAgLy8gc2V0IGR1bW15IGhvb2sgZnVuY3Rpb24gaWYgbm90IHByZXNlbnQgaW4gc2NoZW1hXG4gIGlmICh0eXBlb2Ygc2NoZW1hLmJlZm9yZV9zYXZlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgc2NoZW1hLmJlZm9yZV9zYXZlID0gZnVuY3Rpb24gZihpbnN0YW5jZSwgb3B0aW9uLCBuZXh0KSB7XG4gICAgICBuZXh0KCk7XG4gICAgfTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2NoZW1hLmFmdGVyX3NhdmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICBzY2hlbWEuYWZ0ZXJfc2F2ZSA9IGZ1bmN0aW9uIGYoaW5zdGFuY2UsIG9wdGlvbiwgbmV4dCkge1xuICAgICAgbmV4dCgpO1xuICAgIH07XG4gIH1cblxuICBzY2hlbWEuYmVmb3JlX3NhdmUodGhpcywgb3B0aW9ucywgKGVycm9yKSA9PiB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrKGJ1aWxkRXJyb3IoJ21vZGVsLnNhdmUuYmVmb3JlLmVycm9yJywgZXJyb3IpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLnNhdmUuYmVmb3JlLmVycm9yJywgZXJyb3IpKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnN0cnVjdG9yLl9leGVjdXRlX3RhYmxlX3F1ZXJ5KHF1ZXJ5LCBxdWVyeVBhcmFtcywgcXVlcnlPcHRpb25zLCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGNhbGxiYWNrKGJ1aWxkRXJyb3IoJ21vZGVsLnNhdmUuZGJlcnJvcicsIGVycikpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzY2hlbWEuYWZ0ZXJfc2F2ZSh0aGlzLCBvcHRpb25zLCAoZXJyb3IxKSA9PiB7XG4gICAgICAgICAgaWYgKGVycm9yMSkge1xuICAgICAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwuc2F2ZS5hZnRlci5lcnJvcicsIGVycm9yMSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoZXJyKSB7XG4gICAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5zYXZlLmRiZXJyb3InLCBlcnIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjaGVtYS5hZnRlcl9zYXZlKHRoaXMsIG9wdGlvbnMsIChlcnJvcjEpID0+IHtcbiAgICAgICAgICBpZiAoZXJyb3IxKSB7XG4gICAgICAgICAgICB0aHJvdyAoYnVpbGRFcnJvcignbW9kZWwuc2F2ZS5hZnRlci5lcnJvcicsIGVycm9yMSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiB7fTtcbn07XG5cbkJhc2VNb2RlbC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gZihvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBjb25zdCBzY2hlbWEgPSB0aGlzLmNvbnN0cnVjdG9yLl9wcm9wZXJ0aWVzLnNjaGVtYTtcbiAgY29uc3QgZGVsZXRlUXVlcnkgPSB7fTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNjaGVtYS5rZXkubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBmaWVsZEtleSA9IHNjaGVtYS5rZXlbaV07XG4gICAgaWYgKGZpZWxkS2V5IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZmllbGRLZXkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZGVsZXRlUXVlcnlbZmllbGRLZXlbal1dID0gdGhpc1tmaWVsZEtleVtqXV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZVF1ZXJ5W2ZpZWxkS2V5XSA9IHRoaXNbZmllbGRLZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmRlbGV0ZShkZWxldGVRdWVyeSwgb3B0aW9ucywgY2FsbGJhY2spO1xufTtcblxuQmFzZU1vZGVsLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gIGNvbnN0IG9iamVjdCA9IHt9O1xuICBjb25zdCBzY2hlbWEgPSB0aGlzLmNvbnN0cnVjdG9yLl9wcm9wZXJ0aWVzLnNjaGVtYTtcblxuICBPYmplY3Qua2V5cyhzY2hlbWEuZmllbGRzKS5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgIG9iamVjdFtmaWVsZF0gPSB0aGlzW2ZpZWxkXTtcbiAgfSk7XG5cbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZU1vZGVsO1xuIl19